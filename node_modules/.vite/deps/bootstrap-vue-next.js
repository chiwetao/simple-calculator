import {
  Fragment,
  Teleport,
  Transition,
  TransitionGroup,
  computed,
  createApp,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  customRef,
  defineComponent,
  getCurrentInstance,
  getCurrentScope,
  guardReactiveProps,
  h,
  inject,
  isRef,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onActivated,
  onBeforeUnmount,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  provide,
  reactive,
  readonly,
  ref,
  renderList,
  renderSlot,
  resolveDynamicComponent,
  shallowReadonly,
  shallowRef,
  toDisplayString,
  toRef,
  toValue,
  unref,
  useAttrs,
  useSlots,
  vModelCheckbox,
  vModelRadio,
  vModelSelect,
  vShow,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers
} from "./chunk-WX2IDLXX.js";

// node_modules/.pnpm/bootstrap-vue-next@0.16.6_vue@3.4.14/node_modules/bootstrap-vue-next/dist/bootstrap-vue-next.mjs
var Ln = Object.defineProperty;
var zn = (e, t, o) => t in e ? Ln(e, t, { enumerable: true, configurable: true, writable: true, value: o }) : e[t] = o;
var qe = (e, t, o) => (zn(e, typeof t != "symbol" ? t + "" : t, o), o);
var Jt = (e) => computed(() => {
  const t = toValue(e);
  return t ? `justify-content-${t}` : "";
});
var Gn = (e) => typeof e == "boolean" || e === "true" || e === "false";
var d = (e) => computed(() => {
  const t = toValue(e);
  return Gn(t) ? !!t : t;
});
var ya = (e, t) => {
  const o = d(e), a = toRef(t);
  return computed(
    () => o.value === true ? "true" : typeof o.value == "string" ? o.value : a.value === false ? "true" : o.value === false ? "false" : void 0
  );
};
var ol = /_/g;
var ll = /([a-z])([A-Z])/g;
var Un = /^[0-9]*\.?[0-9]+$/;
var Xn = /(\s|^)(\w)/g;
var Kn = /(\s|^)(\w)/;
var ra = /\s+/;
var Yn = /^#/;
var Zn = /^#[A-Za-z]+[\w\-:.]*$/;
var Jn = /[-/\\^$*+?.()|[\]{}]/g;
var Qn = /[\s\uFEFF\xA0]+/g;
var Pa = (e) => computed(() => {
  const t = toValue(e);
  return Un.test(String(t)) ? `${Number(t)}px` : t;
});
var vt = class _vt {
  constructor(t, o = {}) {
    qe(this, "cancelable", true);
    qe(this, "componentId", null);
    qe(this, "_defaultPrevented", false);
    qe(this, "eventType", "");
    qe(this, "nativeEvent", null);
    qe(this, "_preventDefault");
    qe(this, "relatedTarget", null);
    qe(this, "target", null);
    if (!t)
      throw new TypeError(
        `Failed to construct '${this.constructor.name}'. 1 argument required, ${arguments.length} given.`
      );
    Object.assign(this, _vt.Defaults, o, { eventType: t }), this._preventDefault = function() {
      this.cancelable && (this.defaultPrevented = true);
    };
  }
  // Readable by everyone,
  // But only overwritten by inherrited constructors
  get defaultPrevented() {
    return this._defaultPrevented;
  }
  set defaultPrevented(t) {
    this._defaultPrevented = t;
  }
  // I think this is right
  // We want to be able to have it callable to everyone,
  // But only overwritten by inherrited constructors
  get preventDefault() {
    return this._preventDefault;
  }
  // This may not be correct, because it doesn't get correct type inferences in children
  // Ex overwrite this.preventDefault = () => true is valid. Could be a TS issue
  set preventDefault(t) {
    this._preventDefault = t;
  }
  static get Defaults() {
    return {
      cancelable: true,
      componentId: null,
      eventType: "",
      nativeEvent: null,
      relatedTarget: null,
      target: null
    };
  }
};
var Vt = class extends vt {
  constructor(o, a = {}) {
    super(o, a);
    qe(this, "trigger", null);
    Object.assign(this, vt.Defaults, a, { eventType: o });
  }
  static get Defaults() {
    return {
      ...super.Defaults,
      trigger: null
    };
  }
};
var nl = class extends vt {
  constructor(o, a) {
    super(o, a);
    qe(this, "from");
    qe(this, "to");
    qe(this, "direction");
    Object.assign(this, vt.Defaults, a, { eventType: o });
    const { from: l, direction: n, to: r } = a;
    this.from = l, this.to = r, this.direction = n;
  }
  static get Defaults() {
    return {
      ...super.Defaults
    };
  }
};
var es = (e, t = {}) => {
  const o = (l = []) => {
    const { activeElement: n } = document;
    return n && !l.some((r) => r === n) ? n : null;
  }, a = (l) => l === o();
  try {
    e.focus(t);
  } catch (l) {
    console.error(l);
  }
  return a(e);
};
var He = (e) => ((e == null ? void 0 : e()) ?? []).length === 0;
var ts = (e) => {
  if (e.getAttribute("display") === "none")
    return false;
  const t = e.getBoundingClientRect();
  return !!(t && t.height > 0 && t.width > 0);
};
var Na = (e) => {
  const t = window.getComputedStyle(e), o = t.transitionDelay.split(",")[0] || "", a = t.transitionDuration.split(",")[0] || "", l = Number(o.slice(0, -1)) * 1e3, n = Number(a.slice(0, -1)) * 1e3;
  return l + n;
};
var Xa = typeof window < "u" && typeof document < "u" && typeof navigator < "u";
var as = (e) => (() => {
  let o = false;
  if (Xa)
    try {
      const a = {
        // This function will be called when the browser
        // attempts to access the passive property
        get passive() {
          o = true;
        }
      };
      WINDOW.addEventListener("test", a, a), WINDOW.removeEventListener("test", a, a);
    } catch {
      o = false;
    }
  return o;
})() ? typeof e == "object" ? e : { capture: !!e || false } : typeof e == "object" ? e.capture : e;
var os = (e, t, o, a) => {
  e && e.addEventListener && e.addEventListener(t, o, as(a));
};
var ls = (e, t, o, a) => {
  e && e.removeEventListener && e.removeEventListener(t, o, a);
};
var ho = (e, t) => {
  (e ? os : ls)(...t);
};
var ns = ["TD", "TH", "TR"];
var ss = [
  "a",
  "a *",
  // Include content inside links
  "button",
  "button *",
  // Include content inside buttons
  "input:not(.disabled):not([disabled])",
  "select:not(.disabled):not([disabled])",
  "textarea:not(.disabled):not([disabled])",
  '[role="link"]',
  '[role="link"] *',
  '[role="button"]',
  '[role="button"] *',
  "[tabindex]:not(.disabled):not([disabled])"
].join(",");
var aa = (e) => {
  if (!e || !e.target)
    return false;
  const t = e.target;
  if ("disabled" in t && t.disabled || ns.indexOf(t.tagName) !== -1)
    return false;
  if (t.closest(".dropdown-menu"))
    return true;
  const o = t.tagName === "LABEL" ? t : t.closest("label");
  if (o) {
    const a = o.getAttribute("for"), l = a ? document.getElementById(a) : o.querySelector("input, select, textarea");
    if (l && !l.disabled)
      return true;
  }
  return t.matches(ss);
};
var sl = ["top", "right", "bottom", "left"];
var Bo = ["start", "end"];
var So = sl.reduce((e, t) => e.concat(t, t + "-" + Bo[0], t + "-" + Bo[1]), []);
var ut = Math.min;
var xe = Math.max;
var da = Math.round;
var oa = Math.floor;
var St = (e) => ({
  x: e,
  y: e
});
var rs = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var is = {
  start: "end",
  end: "start"
};
function Ia(e, t, o) {
  return xe(e, ut(t, o));
}
function bt(e, t) {
  return typeof e == "function" ? e(t) : e;
}
function et(e) {
  return e.split("-")[0];
}
function rt(e) {
  return e.split("-")[1];
}
function rl(e) {
  return e === "x" ? "y" : "x";
}
function Ka(e) {
  return e === "y" ? "height" : "width";
}
function Mt(e) {
  return ["top", "bottom"].includes(et(e)) ? "y" : "x";
}
function Ya(e) {
  return rl(Mt(e));
}
function il(e, t, o) {
  o === void 0 && (o = false);
  const a = rt(e), l = Ya(e), n = Ka(l);
  let r = l === "x" ? a === (o ? "end" : "start") ? "right" : "left" : a === "start" ? "bottom" : "top";
  return t.reference[n] > t.floating[n] && (r = fa(r)), [r, fa(r)];
}
function us(e) {
  const t = fa(e);
  return [ca(e), t, ca(t)];
}
function ca(e) {
  return e.replace(/start|end/g, (t) => is[t]);
}
function ds(e, t, o) {
  const a = ["left", "right"], l = ["right", "left"], n = ["top", "bottom"], r = ["bottom", "top"];
  switch (e) {
    case "top":
    case "bottom":
      return o ? t ? l : a : t ? a : l;
    case "left":
    case "right":
      return t ? n : r;
    default:
      return [];
  }
}
function cs(e, t, o, a) {
  const l = rt(e);
  let n = ds(et(e), o === "start", a);
  return l && (n = n.map((r) => r + "-" + l), t && (n = n.concat(n.map(ca)))), n;
}
function fa(e) {
  return e.replace(/left|right|bottom|top/g, (t) => rs[t]);
}
function fs(e) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...e
  };
}
function Za(e) {
  return typeof e != "number" ? fs(e) : {
    top: e,
    right: e,
    bottom: e,
    left: e
  };
}
function Ht(e) {
  return {
    ...e,
    top: e.y,
    left: e.x,
    right: e.x + e.width,
    bottom: e.y + e.height
  };
}
function wo(e, t, o) {
  let {
    reference: a,
    floating: l
  } = e;
  const n = Mt(t), r = Ya(t), s = Ka(r), i = et(t), u = n === "y", c = a.x + a.width / 2 - l.width / 2, f = a.y + a.height / 2 - l.height / 2, b = a[s] / 2 - l[s] / 2;
  let m;
  switch (i) {
    case "top":
      m = {
        x: c,
        y: a.y - l.height
      };
      break;
    case "bottom":
      m = {
        x: c,
        y: a.y + a.height
      };
      break;
    case "right":
      m = {
        x: a.x + a.width,
        y: f
      };
      break;
    case "left":
      m = {
        x: a.x - l.width,
        y: f
      };
      break;
    default:
      m = {
        x: a.x,
        y: a.y
      };
  }
  switch (rt(t)) {
    case "start":
      m[r] -= b * (o && u ? -1 : 1);
      break;
    case "end":
      m[r] += b * (o && u ? -1 : 1);
      break;
  }
  return m;
}
var vs = async (e, t, o) => {
  const {
    placement: a = "bottom",
    strategy: l = "absolute",
    middleware: n = [],
    platform: r
  } = o, s = n.filter(Boolean), i = await (r.isRTL == null ? void 0 : r.isRTL(t));
  let u = await r.getElementRects({
    reference: e,
    floating: t,
    strategy: l
  }), {
    x: c,
    y: f
  } = wo(u, a, i), b = a, m = {}, h2 = 0;
  for (let $ = 0; $ < s.length; $++) {
    const {
      name: B,
      fn: v
    } = s[$], {
      x: S,
      y,
      data: _,
      reset: C
    } = await v({
      x: c,
      y: f,
      initialPlacement: a,
      placement: b,
      strategy: l,
      middlewareData: m,
      rects: u,
      platform: r,
      elements: {
        reference: e,
        floating: t
      }
    });
    c = S ?? c, f = y ?? f, m = {
      ...m,
      [B]: {
        ...m[B],
        ..._
      }
    }, C && h2 <= 50 && (h2++, typeof C == "object" && (C.placement && (b = C.placement), C.rects && (u = C.rects === true ? await r.getElementRects({
      reference: e,
      floating: t,
      strategy: l
    }) : C.rects), {
      x: c,
      y: f
    } = wo(u, b, i)), $ = -1);
  }
  return {
    x: c,
    y: f,
    placement: b,
    strategy: l,
    middlewareData: m
  };
};
async function Rt(e, t) {
  var o;
  t === void 0 && (t = {});
  const {
    x: a,
    y: l,
    platform: n,
    rects: r,
    elements: s,
    strategy: i
  } = e, {
    boundary: u = "clippingAncestors",
    rootBoundary: c = "viewport",
    elementContext: f = "floating",
    altBoundary: b = false,
    padding: m = 0
  } = bt(t, e), h2 = Za(m), B = s[b ? f === "floating" ? "reference" : "floating" : f], v = Ht(await n.getClippingRect({
    element: (o = await (n.isElement == null ? void 0 : n.isElement(B))) == null || o ? B : B.contextElement || await (n.getDocumentElement == null ? void 0 : n.getDocumentElement(s.floating)),
    boundary: u,
    rootBoundary: c,
    strategy: i
  })), S = f === "floating" ? {
    ...r.floating,
    x: a,
    y: l
  } : r.reference, y = await (n.getOffsetParent == null ? void 0 : n.getOffsetParent(s.floating)), _ = await (n.isElement == null ? void 0 : n.isElement(y)) ? await (n.getScale == null ? void 0 : n.getScale(y)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, C = Ht(n.convertOffsetParentRelativeRectToViewportRelativeRect ? await n.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements: s,
    rect: S,
    offsetParent: y,
    strategy: i
  }) : S);
  return {
    top: (v.top - C.top + h2.top) / _.y,
    bottom: (C.bottom - v.bottom + h2.bottom) / _.y,
    left: (v.left - C.left + h2.left) / _.x,
    right: (C.right - v.right + h2.right) / _.x
  };
}
var ps = (e) => ({
  name: "arrow",
  options: e,
  async fn(t) {
    const {
      x: o,
      y: a,
      placement: l,
      rects: n,
      platform: r,
      elements: s,
      middlewareData: i
    } = t, {
      element: u,
      padding: c = 0
    } = bt(e, t) || {};
    if (u == null)
      return {};
    const f = Za(c), b = {
      x: o,
      y: a
    }, m = Ya(l), h2 = Ka(m), $ = await r.getDimensions(u), B = m === "y", v = B ? "top" : "left", S = B ? "bottom" : "right", y = B ? "clientHeight" : "clientWidth", _ = n.reference[h2] + n.reference[m] - b[m] - n.floating[h2], C = b[m] - n.reference[m], T = await (r.getOffsetParent == null ? void 0 : r.getOffsetParent(u));
    let k = T ? T[y] : 0;
    (!k || !await (r.isElement == null ? void 0 : r.isElement(T))) && (k = s.floating[y] || n.floating[h2]);
    const N = _ / 2 - C / 2, V = k / 2 - $[h2] / 2 - 1, A = ut(f[v], V), E = ut(f[S], V), K = A, oe = k - $[h2] - E, F = k / 2 - $[h2] / 2 + N, z = Ia(K, F, oe), D = !i.arrow && rt(l) != null && F !== z && n.reference[h2] / 2 - (F < K ? A : E) - $[h2] / 2 < 0, J = D ? F < K ? F - K : F - oe : 0;
    return {
      [m]: b[m] + J,
      data: {
        [m]: z,
        centerOffset: F - z - J,
        ...D && {
          alignmentOffset: J
        }
      },
      reset: D
    };
  }
});
function ms(e, t, o) {
  return (e ? [...o.filter((l) => rt(l) === e), ...o.filter((l) => rt(l) !== e)] : o.filter((l) => et(l) === l)).filter((l) => e ? rt(l) === e || (t ? ca(l) !== l : false) : true);
}
var gs = function(e) {
  return e === void 0 && (e = {}), {
    name: "autoPlacement",
    options: e,
    async fn(t) {
      var o, a, l;
      const {
        rects: n,
        middlewareData: r,
        placement: s,
        platform: i,
        elements: u
      } = t, {
        crossAxis: c = false,
        alignment: f,
        allowedPlacements: b = So,
        autoAlignment: m = true,
        ...h2
      } = bt(e, t), $ = f !== void 0 || b === So ? ms(f || null, m, b) : b, B = await Rt(t, h2), v = ((o = r.autoPlacement) == null ? void 0 : o.index) || 0, S = $[v];
      if (S == null)
        return {};
      const y = il(S, n, await (i.isRTL == null ? void 0 : i.isRTL(u.floating)));
      if (s !== S)
        return {
          reset: {
            placement: $[0]
          }
        };
      const _ = [B[et(S)], B[y[0]], B[y[1]]], C = [...((a = r.autoPlacement) == null ? void 0 : a.overflows) || [], {
        placement: S,
        overflows: _
      }], T = $[v + 1];
      if (T)
        return {
          data: {
            index: v + 1,
            overflows: C
          },
          reset: {
            placement: T
          }
        };
      const k = C.map((A) => {
        const E = rt(A.placement);
        return [A.placement, E && c ? (
          // Check along the mainAxis and main crossAxis side.
          A.overflows.slice(0, 2).reduce((K, oe) => K + oe, 0)
        ) : (
          // Check only the mainAxis.
          A.overflows[0]
        ), A.overflows];
      }).sort((A, E) => A[1] - E[1]), V = ((l = k.filter((A) => A[2].slice(
        0,
        // Aligned placements should not check their opposite crossAxis
        // side.
        rt(A[0]) ? 2 : 3
      ).every((E) => E <= 0))[0]) == null ? void 0 : l[0]) || k[0][0];
      return V !== s ? {
        data: {
          index: v + 1,
          overflows: C
        },
        reset: {
          placement: V
        }
      } : {};
    }
  };
};
var bs = function(e) {
  return e === void 0 && (e = {}), {
    name: "flip",
    options: e,
    async fn(t) {
      var o, a;
      const {
        placement: l,
        middlewareData: n,
        rects: r,
        initialPlacement: s,
        platform: i,
        elements: u
      } = t, {
        mainAxis: c = true,
        crossAxis: f = true,
        fallbackPlacements: b,
        fallbackStrategy: m = "bestFit",
        fallbackAxisSideDirection: h2 = "none",
        flipAlignment: $ = true,
        ...B
      } = bt(e, t);
      if ((o = n.arrow) != null && o.alignmentOffset)
        return {};
      const v = et(l), S = et(s) === s, y = await (i.isRTL == null ? void 0 : i.isRTL(u.floating)), _ = b || (S || !$ ? [fa(s)] : us(s));
      !b && h2 !== "none" && _.push(...cs(s, $, h2, y));
      const C = [s, ..._], T = await Rt(t, B), k = [];
      let N = ((a = n.flip) == null ? void 0 : a.overflows) || [];
      if (c && k.push(T[v]), f) {
        const K = il(l, r, y);
        k.push(T[K[0]], T[K[1]]);
      }
      if (N = [...N, {
        placement: l,
        overflows: k
      }], !k.every((K) => K <= 0)) {
        var V, A;
        const K = (((V = n.flip) == null ? void 0 : V.index) || 0) + 1, oe = C[K];
        if (oe)
          return {
            data: {
              index: K,
              overflows: N
            },
            reset: {
              placement: oe
            }
          };
        let F = (A = N.filter((z) => z.overflows[0] <= 0).sort((z, D) => z.overflows[1] - D.overflows[1])[0]) == null ? void 0 : A.placement;
        if (!F)
          switch (m) {
            case "bestFit": {
              var E;
              const z = (E = N.map((D) => [D.placement, D.overflows.filter((J) => J > 0).reduce((J, ie) => J + ie, 0)]).sort((D, J) => D[1] - J[1])[0]) == null ? void 0 : E[0];
              z && (F = z);
              break;
            }
            case "initialPlacement":
              F = s;
              break;
          }
        if (l !== F)
          return {
            reset: {
              placement: F
            }
          };
      }
      return {};
    }
  };
};
function Co(e, t) {
  return {
    top: e.top - t.height,
    right: e.right - t.width,
    bottom: e.bottom - t.height,
    left: e.left - t.width
  };
}
function ko(e) {
  return sl.some((t) => e[t] >= 0);
}
var ys = function(e) {
  return e === void 0 && (e = {}), {
    name: "hide",
    options: e,
    async fn(t) {
      const {
        rects: o
      } = t, {
        strategy: a = "referenceHidden",
        ...l
      } = bt(e, t);
      switch (a) {
        case "referenceHidden": {
          const n = await Rt(t, {
            ...l,
            elementContext: "reference"
          }), r = Co(n, o.reference);
          return {
            data: {
              referenceHiddenOffsets: r,
              referenceHidden: ko(r)
            }
          };
        }
        case "escaped": {
          const n = await Rt(t, {
            ...l,
            altBoundary: true
          }), r = Co(n, o.floating);
          return {
            data: {
              escapedOffsets: r,
              escaped: ko(r)
            }
          };
        }
        default:
          return {};
      }
    }
  };
};
function ul(e) {
  const t = ut(...e.map((n) => n.left)), o = ut(...e.map((n) => n.top)), a = xe(...e.map((n) => n.right)), l = xe(...e.map((n) => n.bottom));
  return {
    x: t,
    y: o,
    width: a - t,
    height: l - o
  };
}
function hs(e) {
  const t = e.slice().sort((l, n) => l.y - n.y), o = [];
  let a = null;
  for (let l = 0; l < t.length; l++) {
    const n = t[l];
    !a || n.y - a.y > a.height / 2 ? o.push([n]) : o[o.length - 1].push(n), a = n;
  }
  return o.map((l) => Ht(ul(l)));
}
var Bs = function(e) {
  return e === void 0 && (e = {}), {
    name: "inline",
    options: e,
    async fn(t) {
      const {
        placement: o,
        elements: a,
        rects: l,
        platform: n,
        strategy: r
      } = t, {
        padding: s = 2,
        x: i,
        y: u
      } = bt(e, t), c = Array.from(await (n.getClientRects == null ? void 0 : n.getClientRects(a.reference)) || []), f = hs(c), b = Ht(ul(c)), m = Za(s);
      function h2() {
        if (f.length === 2 && f[0].left > f[1].right && i != null && u != null)
          return f.find((B) => i > B.left - m.left && i < B.right + m.right && u > B.top - m.top && u < B.bottom + m.bottom) || b;
        if (f.length >= 2) {
          if (Mt(o) === "y") {
            const A = f[0], E = f[f.length - 1], K = et(o) === "top", oe = A.top, F = E.bottom, z = K ? A.left : E.left, D = K ? A.right : E.right, J = D - z, ie = F - oe;
            return {
              top: oe,
              bottom: F,
              left: z,
              right: D,
              width: J,
              height: ie,
              x: z,
              y: oe
            };
          }
          const B = et(o) === "left", v = xe(...f.map((A) => A.right)), S = ut(...f.map((A) => A.left)), y = f.filter((A) => B ? A.left === S : A.right === v), _ = y[0].top, C = y[y.length - 1].bottom, T = S, k = v, N = k - T, V = C - _;
          return {
            top: _,
            bottom: C,
            left: T,
            right: k,
            width: N,
            height: V,
            x: T,
            y: _
          };
        }
        return b;
      }
      const $ = await n.getElementRects({
        reference: {
          getBoundingClientRect: h2
        },
        floating: a.floating,
        strategy: r
      });
      return l.reference.x !== $.reference.x || l.reference.y !== $.reference.y || l.reference.width !== $.reference.width || l.reference.height !== $.reference.height ? {
        reset: {
          rects: $
        }
      } : {};
    }
  };
};
async function Ss(e, t) {
  const {
    placement: o,
    platform: a,
    elements: l
  } = e, n = await (a.isRTL == null ? void 0 : a.isRTL(l.floating)), r = et(o), s = rt(o), i = Mt(o) === "y", u = ["left", "top"].includes(r) ? -1 : 1, c = n && i ? -1 : 1, f = bt(t, e);
  let {
    mainAxis: b,
    crossAxis: m,
    alignmentAxis: h2
  } = typeof f == "number" ? {
    mainAxis: f,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...f
  };
  return s && typeof h2 == "number" && (m = s === "end" ? h2 * -1 : h2), i ? {
    x: m * c,
    y: b * u
  } : {
    x: b * u,
    y: m * c
  };
}
var dl = function(e) {
  return e === void 0 && (e = 0), {
    name: "offset",
    options: e,
    async fn(t) {
      var o, a;
      const {
        x: l,
        y: n,
        placement: r,
        middlewareData: s
      } = t, i = await Ss(t, e);
      return r === ((o = s.offset) == null ? void 0 : o.placement) && (a = s.arrow) != null && a.alignmentOffset ? {} : {
        x: l + i.x,
        y: n + i.y,
        data: {
          ...i,
          placement: r
        }
      };
    }
  };
};
var ws = function(e) {
  return e === void 0 && (e = {}), {
    name: "shift",
    options: e,
    async fn(t) {
      const {
        x: o,
        y: a,
        placement: l
      } = t, {
        mainAxis: n = true,
        crossAxis: r = false,
        limiter: s = {
          fn: (B) => {
            let {
              x: v,
              y: S
            } = B;
            return {
              x: v,
              y: S
            };
          }
        },
        ...i
      } = bt(e, t), u = {
        x: o,
        y: a
      }, c = await Rt(t, i), f = Mt(et(l)), b = rl(f);
      let m = u[b], h2 = u[f];
      if (n) {
        const B = b === "y" ? "top" : "left", v = b === "y" ? "bottom" : "right", S = m + c[B], y = m - c[v];
        m = Ia(S, m, y);
      }
      if (r) {
        const B = f === "y" ? "top" : "left", v = f === "y" ? "bottom" : "right", S = h2 + c[B], y = h2 - c[v];
        h2 = Ia(S, h2, y);
      }
      const $ = s.fn({
        ...t,
        [b]: m,
        [f]: h2
      });
      return {
        ...$,
        data: {
          x: $.x - o,
          y: $.y - a
        }
      };
    }
  };
};
var Cs = function(e) {
  return e === void 0 && (e = {}), {
    name: "size",
    options: e,
    async fn(t) {
      const {
        placement: o,
        rects: a,
        platform: l,
        elements: n
      } = t, {
        apply: r = () => {
        },
        ...s
      } = bt(e, t), i = await Rt(t, s), u = et(o), c = rt(o), f = Mt(o) === "y", {
        width: b,
        height: m
      } = a.floating;
      let h2, $;
      u === "top" || u === "bottom" ? (h2 = u, $ = c === (await (l.isRTL == null ? void 0 : l.isRTL(n.floating)) ? "start" : "end") ? "left" : "right") : ($ = u, h2 = c === "end" ? "top" : "bottom");
      const B = m - i[h2], v = b - i[$], S = !t.middlewareData.shift;
      let y = B, _ = v;
      if (f) {
        const T = b - i.left - i.right;
        _ = c || S ? ut(v, T) : T;
      } else {
        const T = m - i.top - i.bottom;
        y = c || S ? ut(B, T) : T;
      }
      if (S && !c) {
        const T = xe(i.left, 0), k = xe(i.right, 0), N = xe(i.top, 0), V = xe(i.bottom, 0);
        f ? _ = b - 2 * (T !== 0 || k !== 0 ? T + k : xe(i.left, i.right)) : y = m - 2 * (N !== 0 || V !== 0 ? N + V : xe(i.top, i.bottom));
      }
      await r({
        ...t,
        availableWidth: _,
        availableHeight: y
      });
      const C = await l.getDimensions(n.floating);
      return b !== C.width || m !== C.height ? {
        reset: {
          rects: true
        }
      } : {};
    }
  };
};
function pt(e) {
  return Ja(e) ? (e.nodeName || "").toLowerCase() : "#document";
}
function Ke(e) {
  var t;
  return (e == null || (t = e.ownerDocument) == null ? void 0 : t.defaultView) || window;
}
function yt(e) {
  var t;
  return (t = (Ja(e) ? e.ownerDocument : e.document) || window.document) == null ? void 0 : t.documentElement;
}
function Ja(e) {
  return e instanceof Node || e instanceof Ke(e).Node;
}
function mt(e) {
  return e instanceof Element || e instanceof Ke(e).Element;
}
function ct(e) {
  return e instanceof HTMLElement || e instanceof Ke(e).HTMLElement;
}
function $o(e) {
  return typeof ShadowRoot > "u" ? false : e instanceof ShadowRoot || e instanceof Ke(e).ShadowRoot;
}
function Qt(e) {
  const {
    overflow: t,
    overflowX: o,
    overflowY: a,
    display: l
  } = tt(e);
  return /auto|scroll|overlay|hidden|clip/.test(t + a + o) && !["inline", "contents"].includes(l);
}
function ks(e) {
  return ["table", "td", "th"].includes(pt(e));
}
function Qa(e) {
  const t = eo(), o = tt(e);
  return o.transform !== "none" || o.perspective !== "none" || (o.containerType ? o.containerType !== "normal" : false) || !t && (o.backdropFilter ? o.backdropFilter !== "none" : false) || !t && (o.filter ? o.filter !== "none" : false) || ["transform", "perspective", "filter"].some((a) => (o.willChange || "").includes(a)) || ["paint", "layout", "strict", "content"].some((a) => (o.contain || "").includes(a));
}
function cl(e) {
  let t = xt(e);
  for (; ct(t) && !ha(t); ) {
    if (Qa(t))
      return t;
    t = xt(t);
  }
  return null;
}
function eo() {
  return typeof CSS > "u" || !CSS.supports ? false : CSS.supports("-webkit-backdrop-filter", "none");
}
function ha(e) {
  return ["html", "body", "#document"].includes(pt(e));
}
function tt(e) {
  return Ke(e).getComputedStyle(e);
}
function Ba(e) {
  return mt(e) ? {
    scrollLeft: e.scrollLeft,
    scrollTop: e.scrollTop
  } : {
    scrollLeft: e.pageXOffset,
    scrollTop: e.pageYOffset
  };
}
function xt(e) {
  if (pt(e) === "html")
    return e;
  const t = (
    // Step into the shadow DOM of the parent of a slotted node.
    e.assignedSlot || // DOM Element detected.
    e.parentNode || // ShadowRoot detected.
    $o(e) && e.host || // Fallback.
    yt(e)
  );
  return $o(t) ? t.host : t;
}
function fl(e) {
  const t = xt(e);
  return ha(t) ? e.ownerDocument ? e.ownerDocument.body : e.body : ct(t) && Qt(t) ? t : fl(t);
}
function Xt(e, t, o) {
  var a;
  t === void 0 && (t = []), o === void 0 && (o = true);
  const l = fl(e), n = l === ((a = e.ownerDocument) == null ? void 0 : a.body), r = Ke(l);
  return n ? t.concat(r, r.visualViewport || [], Qt(l) ? l : [], r.frameElement && o ? Xt(r.frameElement) : []) : t.concat(l, Xt(l, [], o));
}
function vl(e) {
  const t = tt(e);
  let o = parseFloat(t.width) || 0, a = parseFloat(t.height) || 0;
  const l = ct(e), n = l ? e.offsetWidth : o, r = l ? e.offsetHeight : a, s = da(o) !== n || da(a) !== r;
  return s && (o = n, a = r), {
    width: o,
    height: a,
    $: s
  };
}
function to(e) {
  return mt(e) ? e : e.contextElement;
}
function Lt(e) {
  const t = to(e);
  if (!ct(t))
    return St(1);
  const o = t.getBoundingClientRect(), {
    width: a,
    height: l,
    $: n
  } = vl(t);
  let r = (n ? da(o.width) : o.width) / a, s = (n ? da(o.height) : o.height) / l;
  return (!r || !Number.isFinite(r)) && (r = 1), (!s || !Number.isFinite(s)) && (s = 1), {
    x: r,
    y: s
  };
}
var $s = St(0);
function pl(e) {
  const t = Ke(e);
  return !eo() || !t.visualViewport ? $s : {
    x: t.visualViewport.offsetLeft,
    y: t.visualViewport.offsetTop
  };
}
function Ts(e, t, o) {
  return t === void 0 && (t = false), !o || t && o !== Ke(e) ? false : t;
}
function $t(e, t, o, a) {
  t === void 0 && (t = false), o === void 0 && (o = false);
  const l = e.getBoundingClientRect(), n = to(e);
  let r = St(1);
  t && (a ? mt(a) && (r = Lt(a)) : r = Lt(e));
  const s = Ts(n, o, a) ? pl(n) : St(0);
  let i = (l.left + s.x) / r.x, u = (l.top + s.y) / r.y, c = l.width / r.x, f = l.height / r.y;
  if (n) {
    const b = Ke(n), m = a && mt(a) ? Ke(a) : a;
    let h2 = b.frameElement;
    for (; h2 && a && m !== b; ) {
      const $ = Lt(h2), B = h2.getBoundingClientRect(), v = tt(h2), S = B.left + (h2.clientLeft + parseFloat(v.paddingLeft)) * $.x, y = B.top + (h2.clientTop + parseFloat(v.paddingTop)) * $.y;
      i *= $.x, u *= $.y, c *= $.x, f *= $.y, i += S, u += y, h2 = Ke(h2).frameElement;
    }
  }
  return Ht({
    width: c,
    height: f,
    x: i,
    y: u
  });
}
var _s = [":popover-open", ":modal"];
function ml(e) {
  let t = false, o = 0, a = 0;
  function l(n) {
    try {
      t = t || e.matches(n);
    } catch {
    }
  }
  if (_s.forEach((n) => {
    l(n);
  }), t) {
    const n = cl(e);
    if (n) {
      const r = n.getBoundingClientRect();
      o = r.x, a = r.y;
    }
  }
  return [t, o, a];
}
function Vs(e) {
  let {
    elements: t,
    rect: o,
    offsetParent: a,
    strategy: l
  } = e;
  const n = yt(a), [r] = t ? ml(t.floating) : [false];
  if (a === n || r)
    return o;
  let s = {
    scrollLeft: 0,
    scrollTop: 0
  }, i = St(1);
  const u = St(0), c = ct(a);
  if ((c || !c && l !== "fixed") && ((pt(a) !== "body" || Qt(n)) && (s = Ba(a)), ct(a))) {
    const f = $t(a);
    i = Lt(a), u.x = f.x + a.clientLeft, u.y = f.y + a.clientTop;
  }
  return {
    width: o.width * i.x,
    height: o.height * i.y,
    x: o.x * i.x - s.scrollLeft * i.x + u.x,
    y: o.y * i.y - s.scrollTop * i.y + u.y
  };
}
function As(e) {
  return Array.from(e.getClientRects());
}
function gl(e) {
  return $t(yt(e)).left + Ba(e).scrollLeft;
}
function Os(e) {
  const t = yt(e), o = Ba(e), a = e.ownerDocument.body, l = xe(t.scrollWidth, t.clientWidth, a.scrollWidth, a.clientWidth), n = xe(t.scrollHeight, t.clientHeight, a.scrollHeight, a.clientHeight);
  let r = -o.scrollLeft + gl(e);
  const s = -o.scrollTop;
  return tt(a).direction === "rtl" && (r += xe(t.clientWidth, a.clientWidth) - l), {
    width: l,
    height: n,
    x: r,
    y: s
  };
}
function Es(e, t) {
  const o = Ke(e), a = yt(e), l = o.visualViewport;
  let n = a.clientWidth, r = a.clientHeight, s = 0, i = 0;
  if (l) {
    n = l.width, r = l.height;
    const u = eo();
    (!u || u && t === "fixed") && (s = l.offsetLeft, i = l.offsetTop);
  }
  return {
    width: n,
    height: r,
    x: s,
    y: i
  };
}
function Ps(e, t) {
  const o = $t(e, true, t === "fixed"), a = o.top + e.clientTop, l = o.left + e.clientLeft, n = ct(e) ? Lt(e) : St(1), r = e.clientWidth * n.x, s = e.clientHeight * n.y, i = l * n.x, u = a * n.y;
  return {
    width: r,
    height: s,
    x: i,
    y: u
  };
}
function To(e, t, o) {
  let a;
  if (t === "viewport")
    a = Es(e, o);
  else if (t === "document")
    a = Os(yt(e));
  else if (mt(t))
    a = Ps(t, o);
  else {
    const l = pl(e);
    a = {
      ...t,
      x: t.x - l.x,
      y: t.y - l.y
    };
  }
  return Ht(a);
}
function bl(e, t) {
  const o = xt(e);
  return o === t || !mt(o) || ha(o) ? false : tt(o).position === "fixed" || bl(o, t);
}
function Ns(e, t) {
  const o = t.get(e);
  if (o)
    return o;
  let a = Xt(e, [], false).filter((s) => mt(s) && pt(s) !== "body"), l = null;
  const n = tt(e).position === "fixed";
  let r = n ? xt(e) : e;
  for (; mt(r) && !ha(r); ) {
    const s = tt(r), i = Qa(r);
    !i && s.position === "fixed" && (l = null), (n ? !i && !l : !i && s.position === "static" && !!l && ["absolute", "fixed"].includes(l.position) || Qt(r) && !i && bl(e, r)) ? a = a.filter((c) => c !== r) : l = s, r = xt(r);
  }
  return t.set(e, a), a;
}
function Is(e) {
  let {
    element: t,
    boundary: o,
    rootBoundary: a,
    strategy: l
  } = e;
  const r = [...o === "clippingAncestors" ? Ns(t, this._c) : [].concat(o), a], s = r[0], i = r.reduce((u, c) => {
    const f = To(t, c, l);
    return u.top = xe(f.top, u.top), u.right = ut(f.right, u.right), u.bottom = ut(f.bottom, u.bottom), u.left = xe(f.left, u.left), u;
  }, To(t, s, l));
  return {
    width: i.right - i.left,
    height: i.bottom - i.top,
    x: i.left,
    y: i.top
  };
}
function Fs(e) {
  const {
    width: t,
    height: o
  } = vl(e);
  return {
    width: t,
    height: o
  };
}
function Ls(e, t, o, a) {
  const l = ct(t), n = yt(t), r = o === "fixed", s = $t(e, true, r, t);
  let i = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const u = St(0);
  if (l || !l && !r)
    if ((pt(t) !== "body" || Qt(n)) && (i = Ba(t)), l) {
      const $ = $t(t, true, r, t);
      u.x = $.x + t.clientLeft, u.y = $.y + t.clientTop;
    } else
      n && (u.x = gl(n));
  let c = s.left + i.scrollLeft - u.x, f = s.top + i.scrollTop - u.y;
  const [b, m, h2] = ml(a);
  return b && (c += m, f += h2, l && (c += t.clientLeft, f += t.clientTop)), {
    x: c,
    y: f,
    width: s.width,
    height: s.height
  };
}
function _o(e, t) {
  return !ct(e) || tt(e).position === "fixed" ? null : t ? t(e) : e.offsetParent;
}
function yl(e, t) {
  const o = Ke(e);
  if (!ct(e))
    return o;
  let a = _o(e, t);
  for (; a && ks(a) && tt(a).position === "static"; )
    a = _o(a, t);
  return a && (pt(a) === "html" || pt(a) === "body" && tt(a).position === "static" && !Qa(a)) ? o : a || cl(e) || o;
}
var zs = async function(e) {
  const t = this.getOffsetParent || yl, o = this.getDimensions;
  return {
    reference: Ls(e.reference, await t(e.floating), e.strategy, e.floating),
    floating: {
      x: 0,
      y: 0,
      ...await o(e.floating)
    }
  };
};
function Hs(e) {
  return tt(e).direction === "rtl";
}
var Rs = {
  convertOffsetParentRelativeRectToViewportRelativeRect: Vs,
  getDocumentElement: yt,
  getClippingRect: Is,
  getOffsetParent: yl,
  getElementRects: zs,
  getClientRects: As,
  getDimensions: Fs,
  getScale: Lt,
  isElement: mt,
  isRTL: Hs
};
function xs(e, t) {
  let o = null, a;
  const l = yt(e);
  function n() {
    var s;
    clearTimeout(a), (s = o) == null || s.disconnect(), o = null;
  }
  function r(s, i) {
    s === void 0 && (s = false), i === void 0 && (i = 1), n();
    const {
      left: u,
      top: c,
      width: f,
      height: b
    } = e.getBoundingClientRect();
    if (s || t(), !f || !b)
      return;
    const m = oa(c), h2 = oa(l.clientWidth - (u + f)), $ = oa(l.clientHeight - (c + b)), B = oa(u), S = {
      rootMargin: -m + "px " + -h2 + "px " + -$ + "px " + -B + "px",
      threshold: xe(0, ut(1, i)) || 1
    };
    let y = true;
    function _(C) {
      const T = C[0].intersectionRatio;
      if (T !== i) {
        if (!y)
          return r();
        T ? r(false, T) : a = setTimeout(() => {
          r(false, 1e-7);
        }, 100);
      }
      y = false;
    }
    try {
      o = new IntersectionObserver(_, {
        ...S,
        // Handle <iframe>s
        root: l.ownerDocument
      });
    } catch {
      o = new IntersectionObserver(_, S);
    }
    o.observe(e);
  }
  return r(true), n;
}
function hl(e, t, o, a) {
  a === void 0 && (a = {});
  const {
    ancestorScroll: l = true,
    ancestorResize: n = true,
    elementResize: r = typeof ResizeObserver == "function",
    layoutShift: s = typeof IntersectionObserver == "function",
    animationFrame: i = false
  } = a, u = to(e), c = l || n ? [...u ? Xt(u) : [], ...Xt(t)] : [];
  c.forEach((v) => {
    l && v.addEventListener("scroll", o, {
      passive: true
    }), n && v.addEventListener("resize", o);
  });
  const f = u && s ? xs(u, o) : null;
  let b = -1, m = null;
  r && (m = new ResizeObserver((v) => {
    let [S] = v;
    S && S.target === u && m && (m.unobserve(t), cancelAnimationFrame(b), b = requestAnimationFrame(() => {
      var y;
      (y = m) == null || y.observe(t);
    })), o();
  }), u && !i && m.observe(u), m.observe(t));
  let h2, $ = i ? $t(e) : null;
  i && B();
  function B() {
    const v = $t(e);
    $ && (v.x !== $.x || v.y !== $.y || v.width !== $.width || v.height !== $.height) && o(), $ = v, h2 = requestAnimationFrame(B);
  }
  return o(), () => {
    var v;
    c.forEach((S) => {
      l && S.removeEventListener("scroll", o), n && S.removeEventListener("resize", o);
    }), f == null || f(), (v = m) == null || v.disconnect(), m = null, i && cancelAnimationFrame(h2);
  };
}
var Ms = gs;
var Bl = ws;
var Sl = bs;
var wl = Cs;
var Ds = ys;
var js = ps;
var qs = Bs;
var Ws = (e, t, o) => {
  const a = /* @__PURE__ */ new Map(), l = {
    platform: Rs,
    ...o
  }, n = {
    ...l.platform,
    _c: a
  };
  return vs(e, t, {
    ...l,
    platform: n
  });
};
function Gs(e) {
  return e != null && typeof e == "object" && "$el" in e;
}
function Fa(e) {
  if (Gs(e)) {
    const t = e.$el;
    return Ja(t) && pt(t) === "#comment" ? null : t;
  }
  return e;
}
function Us(e) {
  return {
    name: "arrow",
    options: e,
    fn(t) {
      const o = Fa(unref(e.element));
      return o == null ? {} : js({
        element: o,
        padding: e.padding
      }).fn(t);
    }
  };
}
function Cl(e) {
  return typeof window > "u" ? 1 : (e.ownerDocument.defaultView || window).devicePixelRatio || 1;
}
function Vo(e, t) {
  const o = Cl(e);
  return Math.round(t * o) / o;
}
function kl(e, t, o) {
  o === void 0 && (o = {});
  const a = o.whileElementsMounted, l = computed(() => {
    var k;
    return (k = unref(o.open)) != null ? k : true;
  }), n = computed(() => unref(o.middleware)), r = computed(() => {
    var k;
    return (k = unref(o.placement)) != null ? k : "bottom";
  }), s = computed(() => {
    var k;
    return (k = unref(o.strategy)) != null ? k : "absolute";
  }), i = computed(() => {
    var k;
    return (k = unref(o.transform)) != null ? k : true;
  }), u = computed(() => Fa(e.value)), c = computed(() => Fa(t.value)), f = ref(0), b = ref(0), m = ref(s.value), h2 = ref(r.value), $ = shallowRef({}), B = ref(false), v = computed(() => {
    const k = {
      position: m.value,
      left: "0",
      top: "0"
    };
    if (!c.value)
      return k;
    const N = Vo(c.value, f.value), V = Vo(c.value, b.value);
    return i.value ? {
      ...k,
      transform: "translate(" + N + "px, " + V + "px)",
      ...Cl(c.value) >= 1.5 && {
        willChange: "transform"
      }
    } : {
      position: m.value,
      left: N + "px",
      top: V + "px"
    };
  });
  let S;
  function y() {
    u.value == null || c.value == null || Ws(u.value, c.value, {
      middleware: n.value,
      placement: r.value,
      strategy: s.value
    }).then((k) => {
      f.value = k.x, b.value = k.y, m.value = k.strategy, h2.value = k.placement, $.value = k.middlewareData, B.value = true;
    });
  }
  function _() {
    typeof S == "function" && (S(), S = void 0);
  }
  function C() {
    if (_(), a === void 0) {
      y();
      return;
    }
    if (u.value != null && c.value != null) {
      S = a(u.value, c.value, y);
      return;
    }
  }
  function T() {
    l.value || (B.value = false);
  }
  return watch([n, r, s], y, {
    flush: "sync"
  }), watch([u, c], C, {
    flush: "sync"
  }), watch(l, T, {
    flush: "sync"
  }), getCurrentScope() && onScopeDispose(_), {
    x: shallowReadonly(f),
    y: shallowReadonly(b),
    strategy: shallowReadonly(m),
    placement: shallowReadonly(h2),
    middlewareData: shallowReadonly($),
    isPositioned: shallowReadonly(B),
    floatingStyles: v,
    update: y
  };
}
var Xs = /* @__PURE__ */ new Set([
  "background",
  "cite",
  "href",
  "itemtype",
  "longdesc",
  "poster",
  "src",
  "xlink:href"
]);
var Ks = /^aria-[\w-]*$/i;
var Ys = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
var Zs = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
var Js = (e, t) => {
  const o = e.nodeName.toLowerCase();
  return t.includes(o) ? Xs.has(o) ? !!(Ys.test(e.nodeValue || "") || Zs.test(e.nodeValue || "")) : true : t.filter((a) => a instanceof RegExp).some((a) => a.test(o));
};
var Nt = {
  // Global attributes allowed on any supplied element below.
  "*": ["class", "dir", "id", "lang", "role", Ks],
  a: ["target", "href", "title", "rel"],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ["src", "srcset", "alt", "title", "width", "height"],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
var It = (e, t, o) => {
  if (!e.length)
    return e;
  if (o && typeof o == "function")
    return o(e);
  const l = new window.DOMParser().parseFromString(e, "text/html"), n = l.body.querySelectorAll("*");
  for (const r of n) {
    const s = r.nodeName.toLowerCase();
    if (!Object.keys(t).includes(s)) {
      r.remove();
      continue;
    }
    const i = r.attributes, u = [...t["*"] || [], ...t[s] || []];
    for (const c of i)
      Js(c, u) || r.removeAttribute(c.nodeName);
  }
  return l.body.innerHTML;
};
function gt(e) {
  return getCurrentScope() ? (onScopeDispose(e), true) : false;
}
function Qs(e, t) {
  if (typeof Symbol < "u") {
    const o = { ...e };
    return Object.defineProperty(o, Symbol.iterator, {
      enumerable: false,
      value() {
        let a = 0;
        return {
          next: () => ({
            value: t[a++],
            done: a > t.length
          })
        };
      }
    }), o;
  } else
    return Object.assign([...t], e);
}
function Ye(e) {
  return typeof e == "function" ? e() : unref(e);
}
var va = typeof window < "u" && typeof document < "u";
typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
var er = (e) => typeof e < "u";
var tr = (e) => e != null;
var ar = Object.prototype.toString;
var or = (e) => ar.call(e) === "[object Object]";
var Qe = () => {
};
var La = lr();
function lr() {
  var e, t;
  return va && ((e = window == null ? void 0 : window.navigator) == null ? void 0 : e.userAgent) && (/iP(ad|hone|od)/.test(window.navigator.userAgent) || ((t = window == null ? void 0 : window.navigator) == null ? void 0 : t.maxTouchPoints) > 2 && /iPad|Macintosh/.test(window == null ? void 0 : window.navigator.userAgent));
}
function $l(e, t) {
  function o(...a) {
    return new Promise((l, n) => {
      Promise.resolve(e(() => t.apply(this, a), { fn: t, thisArg: this, args: a })).then(l).catch(n);
    });
  }
  return o;
}
var Tl = (e) => e();
function nr(e, t = {}) {
  let o, a, l = Qe;
  const n = (s) => {
    clearTimeout(s), l(), l = Qe;
  };
  return (s) => {
    const i = Ye(e), u = Ye(t.maxWait);
    return o && n(o), i <= 0 || u !== void 0 && u <= 0 ? (a && (n(a), a = null), Promise.resolve(s())) : new Promise((c, f) => {
      l = t.rejectOnCancel ? f : c, u && !a && (a = setTimeout(() => {
        o && n(o), a = null, c(s());
      }, u)), o = setTimeout(() => {
        a && n(a), a = null, c(s());
      }, i);
    });
  };
}
function sr(e = Tl) {
  const t = ref(true);
  function o() {
    t.value = false;
  }
  function a() {
    t.value = true;
  }
  const l = (...n) => {
    t.value && e(...n);
  };
  return { isActive: readonly(t), pause: o, resume: a, eventFilter: l };
}
function rr(e) {
  const t = /* @__PURE__ */ Object.create(null);
  return (o) => t[o] || (t[o] = e(o));
}
var ir = /-(\w)/g;
var ur = rr((e) => e.replace(ir, (t, o) => o ? o.toUpperCase() : ""));
function dr(e) {
  return e || getCurrentInstance();
}
function _l(...e) {
  if (e.length !== 1)
    return toRef(...e);
  const t = e[0];
  return typeof t == "function" ? readonly(customRef(() => ({ get: t, set: Qe }))) : ref(t);
}
function cr(e, t = 200, o = {}) {
  return $l(
    nr(t, o),
    e
  );
}
function fr(e, t, o = {}) {
  const {
    eventFilter: a = Tl,
    ...l
  } = o;
  return watch(
    e,
    $l(
      a,
      t
    ),
    l
  );
}
function za(e, t, o = {}) {
  const {
    eventFilter: a,
    ...l
  } = o, { eventFilter: n, pause: r, resume: s, isActive: i } = sr(a);
  return { stop: fr(
    e,
    t,
    {
      ...l,
      eventFilter: n
    }
  ), pause: r, resume: s, isActive: i };
}
function Ha(e, t, ...[o]) {
  const {
    flush: a = "sync",
    deep: l = false,
    immediate: n = true,
    direction: r = "both",
    transform: s = {}
  } = o || {}, i = [], u = "ltr" in s && s.ltr || ((b) => b), c = "rtl" in s && s.rtl || ((b) => b);
  return (r === "both" || r === "ltr") && i.push(za(
    e,
    (b) => {
      i.forEach((m) => m.pause()), t.value = u(b), i.forEach((m) => m.resume());
    },
    { flush: a, deep: l, immediate: n }
  )), (r === "both" || r === "rtl") && i.push(za(
    t,
    (b) => {
      i.forEach((m) => m.pause()), e.value = c(b), i.forEach((m) => m.resume());
    },
    { flush: a, deep: l, immediate: n }
  )), () => {
    i.forEach((b) => b.stop());
  };
}
function Vl(e, t = true, o) {
  dr() ? onMounted(e, o) : t ? e() : nextTick(e);
}
function Al(e, t = 1e3, o = {}) {
  const {
    immediate: a = true,
    immediateCallback: l = false
  } = o;
  let n = null;
  const r = ref(false);
  function s() {
    n && (clearInterval(n), n = null);
  }
  function i() {
    r.value = false, s();
  }
  function u() {
    const c = Ye(t);
    c <= 0 || (r.value = true, l && e(), s(), n = setInterval(e, c));
  }
  if (a && va && u(), isRef(t) || typeof t == "function") {
    const c = watch(t, () => {
      r.value && va && u();
    });
    gt(c);
  }
  return gt(i), {
    isActive: r,
    pause: i,
    resume: u
  };
}
function Se(e, t = {}) {
  const {
    method: o = "parseFloat",
    radix: a,
    nanToZero: l
  } = t;
  return computed(() => {
    let n = Ye(e);
    return typeof n == "string" && (n = Number[o](n, a)), l && Number.isNaN(n) && (n = 0), n;
  });
}
function pa(e = {}) {
  const {
    inheritAttrs: t = true
  } = e, o = shallowRef(), a = defineComponent({
    setup(n, { slots: r }) {
      return () => {
        o.value = r.default;
      };
    }
  }), l = defineComponent({
    inheritAttrs: t,
    setup(n, { attrs: r, slots: s }) {
      return () => {
        var i;
        if (!o.value && true)
          throw new Error("[VueUse] Failed to find the definition of reusable template");
        const u = (i = o.value) == null ? void 0 : i.call(o, { ...vr(r), $slots: s });
        return t && (u == null ? void 0 : u.length) === 1 ? u[0] : u;
      };
    }
  });
  return Qs(
    { define: a, reuse: l },
    [a, l]
  );
}
function vr(e) {
  const t = {};
  for (const o in e)
    t[ur(o)] = e[o];
  return t;
}
function Xe(e) {
  var t;
  const o = Ye(e);
  return (t = o == null ? void 0 : o.$el) != null ? t : o;
}
var Ze = va ? window : void 0;
function Ne(...e) {
  let t, o, a, l;
  if (typeof e[0] == "string" || Array.isArray(e[0]) ? ([o, a, l] = e, t = Ze) : [t, o, a, l] = e, !t)
    return Qe;
  Array.isArray(o) || (o = [o]), Array.isArray(a) || (a = [a]);
  const n = [], r = () => {
    n.forEach((c) => c()), n.length = 0;
  }, s = (c, f, b, m) => (c.addEventListener(f, b, m), () => c.removeEventListener(f, b, m)), i = watch(
    () => [Xe(t), Ye(l)],
    ([c, f]) => {
      if (r(), !c)
        return;
      const b = or(f) ? { ...f } : f;
      n.push(
        ...o.flatMap((m) => a.map((h2) => s(c, m, h2, b)))
      );
    },
    { immediate: true, flush: "post" }
  ), u = () => {
    i(), r();
  };
  return gt(u), u;
}
var Ao = false;
function Ol(e, t, o = {}) {
  const { window: a = Ze, ignore: l = [], capture: n = true, detectIframe: r = false } = o;
  if (!a)
    return Qe;
  La && !Ao && (Ao = true, Array.from(a.document.body.children).forEach((b) => b.addEventListener("click", Qe)), a.document.documentElement.addEventListener("click", Qe));
  let s = true;
  const i = (b) => l.some((m) => {
    if (typeof m == "string")
      return Array.from(a.document.querySelectorAll(m)).some((h2) => h2 === b.target || b.composedPath().includes(h2));
    {
      const h2 = Xe(m);
      return h2 && (b.target === h2 || b.composedPath().includes(h2));
    }
  }), c = [
    Ne(a, "click", (b) => {
      const m = Xe(e);
      if (!(!m || m === b.target || b.composedPath().includes(m))) {
        if (b.detail === 0 && (s = !i(b)), !s) {
          s = true;
          return;
        }
        t(b);
      }
    }, { passive: true, capture: n }),
    Ne(a, "pointerdown", (b) => {
      const m = Xe(e);
      s = !i(b) && !!(m && !b.composedPath().includes(m));
    }, { passive: true }),
    r && Ne(a, "blur", (b) => {
      setTimeout(() => {
        var m;
        const h2 = Xe(e);
        ((m = a.document.activeElement) == null ? void 0 : m.tagName) === "IFRAME" && !(h2 != null && h2.contains(a.document.activeElement)) && t(b);
      }, 0);
    })
  ].filter(Boolean);
  return () => c.forEach((b) => b());
}
function pr(e) {
  return typeof e == "function" ? e : typeof e == "string" ? (t) => t.key === e : Array.isArray(e) ? (t) => e.includes(t.key) : () => true;
}
function Ge(...e) {
  let t, o, a = {};
  e.length === 3 ? (t = e[0], o = e[1], a = e[2]) : e.length === 2 ? typeof e[1] == "object" ? (t = true, o = e[0], a = e[1]) : (t = e[0], o = e[1]) : (t = true, o = e[0]);
  const {
    target: l = Ze,
    eventName: n = "keydown",
    passive: r = false,
    dedupe: s = false
  } = a, i = pr(t);
  return Ne(l, n, (c) => {
    c.repeat && Ye(s) || i(c) && o(c);
  }, r);
}
function mr() {
  const e = ref(false);
  return getCurrentInstance() && onMounted(() => {
    e.value = true;
  }), e;
}
function ao(e) {
  const t = mr();
  return computed(() => (t.value, !!e()));
}
function gr(e, t = {}) {
  const { window: o = Ze } = t, a = ao(() => o && "matchMedia" in o && typeof o.matchMedia == "function");
  let l;
  const n = ref(false), r = (u) => {
    n.value = u.matches;
  }, s = () => {
    l && ("removeEventListener" in l ? l.removeEventListener("change", r) : l.removeListener(r));
  }, i = watchEffect(() => {
    a.value && (s(), l = o.matchMedia(Ye(e)), "addEventListener" in l ? l.addEventListener("change", r) : l.addListener(r), n.value = l.matches);
  });
  return gt(() => {
    i(), s(), l = void 0;
  }), n;
}
function br(e) {
  return JSON.parse(JSON.stringify(e));
}
var la = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var na = "__vueuse_ssr_handlers__";
var yr = hr();
function hr() {
  return na in la || (la[na] = la[na] || {}), la[na];
}
function oo(e, t) {
  return yr[e] || t;
}
function Br(e) {
  return e == null ? "any" : e instanceof Set ? "set" : e instanceof Map ? "map" : e instanceof Date ? "date" : typeof e == "boolean" ? "boolean" : typeof e == "string" ? "string" : typeof e == "object" ? "object" : Number.isNaN(e) ? "any" : "number";
}
var Sr = {
  boolean: {
    read: (e) => e === "true",
    write: (e) => String(e)
  },
  object: {
    read: (e) => JSON.parse(e),
    write: (e) => JSON.stringify(e)
  },
  number: {
    read: (e) => Number.parseFloat(e),
    write: (e) => String(e)
  },
  any: {
    read: (e) => e,
    write: (e) => String(e)
  },
  string: {
    read: (e) => e,
    write: (e) => String(e)
  },
  map: {
    read: (e) => new Map(JSON.parse(e)),
    write: (e) => JSON.stringify(Array.from(e.entries()))
  },
  set: {
    read: (e) => new Set(JSON.parse(e)),
    write: (e) => JSON.stringify(Array.from(e))
  },
  date: {
    read: (e) => new Date(e),
    write: (e) => e.toISOString()
  }
};
var Oo = "vueuse-storage";
function wr(e, t, o, a = {}) {
  var l;
  const {
    flush: n = "pre",
    deep: r = true,
    listenToStorageChanges: s = true,
    writeDefaults: i = true,
    mergeDefaults: u = false,
    shallow: c,
    window: f = Ze,
    eventFilter: b,
    onError: m = (V) => {
      console.error(V);
    },
    initOnMounted: h2
  } = a, $ = (c ? shallowRef : ref)(typeof t == "function" ? t() : t);
  if (!o)
    try {
      o = oo("getDefaultStorage", () => {
        var V;
        return (V = Ze) == null ? void 0 : V.localStorage;
      })();
    } catch (V) {
      m(V);
    }
  if (!o)
    return $;
  const B = Ye(t), v = Br(B), S = (l = a.serializer) != null ? l : Sr[v], { pause: y, resume: _ } = za(
    $,
    () => C($.value),
    { flush: n, deep: r, eventFilter: b }
  );
  return f && s && Vl(() => {
    Ne(f, "storage", N), Ne(f, Oo, k), h2 && N();
  }), h2 || N(), $;
  function C(V) {
    try {
      if (V == null)
        o.removeItem(e);
      else {
        const A = S.write(V), E = o.getItem(e);
        E !== A && (o.setItem(e, A), f && f.dispatchEvent(new CustomEvent(Oo, {
          detail: {
            key: e,
            oldValue: E,
            newValue: A,
            storageArea: o
          }
        })));
      }
    } catch (A) {
      m(A);
    }
  }
  function T(V) {
    const A = V ? V.newValue : o.getItem(e);
    if (A == null)
      return i && B != null && o.setItem(e, S.write(B)), B;
    if (!V && u) {
      const E = S.read(A);
      return typeof u == "function" ? u(E, B) : v === "object" && !Array.isArray(E) ? { ...B, ...E } : E;
    } else
      return typeof A != "string" ? A : S.read(A);
  }
  function k(V) {
    N(V.detail);
  }
  function N(V) {
    if (!(V && V.storageArea !== o)) {
      if (V && V.key == null) {
        $.value = B;
        return;
      }
      if (!(V && V.key !== e)) {
        y();
        try {
          (V == null ? void 0 : V.newValue) !== S.write($.value) && ($.value = T(V));
        } catch (A) {
          m(A);
        } finally {
          V ? nextTick(_) : _();
        }
      }
    }
  }
}
function Cr(e) {
  return gr("(prefers-color-scheme: dark)", e);
}
function kr(e = {}) {
  const {
    selector: t = "html",
    attribute: o = "class",
    initialValue: a = "auto",
    window: l = Ze,
    storage: n,
    storageKey: r = "vueuse-color-scheme",
    listenToStorageChanges: s = true,
    storageRef: i,
    emitAuto: u,
    disableTransition: c = true
  } = e, f = {
    auto: "",
    light: "light",
    dark: "dark",
    ...e.modes || {}
  }, b = Cr({ window: l }), m = computed(() => b.value ? "dark" : "light"), h2 = i || (r == null ? _l(a) : wr(r, a, n, { window: l, listenToStorageChanges: s })), $ = computed(() => h2.value === "auto" ? m.value : h2.value), B = oo(
    "updateHTMLAttrs",
    (_, C, T) => {
      const k = typeof _ == "string" ? l == null ? void 0 : l.document.querySelector(_) : Xe(_);
      if (!k)
        return;
      let N;
      if (c && (N = l.document.createElement("style"), N.appendChild(document.createTextNode("*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")), l.document.head.appendChild(N)), C === "class") {
        const V = T.split(/\s/g);
        Object.values(f).flatMap((A) => (A || "").split(/\s/g)).filter(Boolean).forEach((A) => {
          V.includes(A) ? k.classList.add(A) : k.classList.remove(A);
        });
      } else
        k.setAttribute(C, T);
      c && (l.getComputedStyle(N).opacity, document.head.removeChild(N));
    }
  );
  function v(_) {
    var C;
    B(t, o, (C = f[_]) != null ? C : _);
  }
  function S(_) {
    e.onChanged ? e.onChanged(_, v) : v(_);
  }
  watch($, S, { flush: "post", immediate: true }), Vl(() => S($.value));
  const y = computed({
    get() {
      return u ? h2.value : $.value;
    },
    set(_) {
      h2.value = _;
    }
  });
  try {
    return Object.assign(y, { store: h2, system: m, state: $ });
  } catch {
    return y;
  }
}
function $r(e, t, o = {}) {
  const { window: a = Ze, ...l } = o;
  let n;
  const r = ao(() => a && "MutationObserver" in a), s = () => {
    n && (n.disconnect(), n = void 0);
  }, i = watch(
    () => Xe(e),
    (f) => {
      s(), r.value && a && f && (n = new MutationObserver(t), n.observe(f, l));
    },
    { immediate: true }
  ), u = () => n == null ? void 0 : n.takeRecords(), c = () => {
    s(), i();
  };
  return gt(c), {
    isSupported: r,
    stop: c,
    takeRecords: u
  };
}
function lo(e, t = {}) {
  const {
    delayEnter: o = 0,
    delayLeave: a = 0,
    window: l = Ze
  } = t, n = ref(false);
  let r;
  const s = (i) => {
    const u = i ? o : a;
    r && (clearTimeout(r), r = void 0), u ? r = setTimeout(() => n.value = i, u) : n.value = i;
  };
  return l && (Ne(e, "mouseenter", () => s(true), { passive: true }), Ne(e, "mouseleave", () => s(false), { passive: true })), n;
}
function Tr(e, t, o = {}) {
  const {
    root: a,
    rootMargin: l = "0px",
    threshold: n = 0.1,
    window: r = Ze,
    immediate: s = true
  } = o, i = ao(() => r && "IntersectionObserver" in r), u = computed(() => {
    const h2 = Ye(e);
    return (Array.isArray(h2) ? h2 : [h2]).map(Xe).filter(tr);
  });
  let c = Qe;
  const f = ref(s), b = i.value ? watch(
    () => [u.value, Xe(a), f.value],
    ([h2, $]) => {
      if (c(), !f.value || !h2.length)
        return;
      const B = new IntersectionObserver(
        t,
        {
          root: Xe($),
          rootMargin: l,
          threshold: n
        }
      );
      h2.forEach((v) => v && B.observe(v)), c = () => {
        B.disconnect(), c = Qe;
      };
    },
    { immediate: s, flush: "post" }
  ) : Qe, m = () => {
    c(), b(), f.value = false;
  };
  return gt(m), {
    isSupported: i,
    isActive: f,
    pause() {
      c(), f.value = false;
    },
    resume() {
      f.value = true;
    },
    stop: m
  };
}
function De(e, t = {}) {
  const { initialValue: o = false, focusVisible: a = false } = t, l = ref(false), n = computed(() => Xe(e));
  Ne(n, "focus", (s) => {
    var i, u;
    (!a || (u = (i = s.target).matches) != null && u.call(i, ":focus-visible")) && (l.value = true);
  }), Ne(n, "blur", () => l.value = false);
  const r = computed({
    get: () => l.value,
    set(s) {
      var i, u;
      !s && l.value ? (i = n.value) == null || i.blur() : s && !l.value && ((u = n.value) == null || u.focus());
    }
  });
  return watch(
    n,
    () => {
      r.value = o;
    },
    { immediate: true, flush: "post" }
  ), { focused: r };
}
function _a(e) {
  return typeof Window < "u" && e instanceof Window ? e.document.documentElement : typeof Document < "u" && e instanceof Document ? e.documentElement : e;
}
var _r = {
  page: (e) => [e.pageX, e.pageY],
  client: (e) => [e.clientX, e.clientY],
  screen: (e) => [e.screenX, e.screenY],
  movement: (e) => e instanceof Touch ? null : [e.movementX, e.movementY]
};
function Vr(e = {}) {
  const {
    type: t = "page",
    touch: o = true,
    resetOnTouchEnds: a = false,
    initialValue: l = { x: 0, y: 0 },
    window: n = Ze,
    target: r = n,
    scroll: s = true,
    eventFilter: i
  } = e;
  let u = null;
  const c = ref(l.x), f = ref(l.y), b = ref(null), m = typeof t == "function" ? t : _r[t], h2 = (C) => {
    const T = m(C);
    u = C, T && ([c.value, f.value] = T, b.value = "mouse");
  }, $ = (C) => {
    if (C.touches.length > 0) {
      const T = m(C.touches[0]);
      T && ([c.value, f.value] = T, b.value = "touch");
    }
  }, B = () => {
    if (!u || !n)
      return;
    const C = m(u);
    u instanceof MouseEvent && C && (c.value = C[0] + n.scrollX, f.value = C[1] + n.scrollY);
  }, v = () => {
    c.value = l.x, f.value = l.y;
  }, S = i ? (C) => i(() => h2(C), {}) : (C) => h2(C), y = i ? (C) => i(() => $(C), {}) : (C) => $(C), _ = i ? () => i(() => B(), {}) : () => B();
  if (r) {
    const C = { passive: true };
    Ne(r, ["mousemove", "dragover"], S, C), o && t !== "movement" && (Ne(r, ["touchstart", "touchmove"], y, C), a && Ne(r, "touchend", v, C)), s && t === "page" && Ne(n, "scroll", _, { passive: true });
  }
  return {
    x: c,
    y: f,
    sourceType: b
  };
}
function Eo(e, t = {}) {
  const {
    handleOutside: o = true,
    window: a = Ze
  } = t, l = t.type || "page", { x: n, y: r, sourceType: s } = Vr(t), i = ref(e ?? (a == null ? void 0 : a.document.body)), u = ref(0), c = ref(0), f = ref(0), b = ref(0), m = ref(0), h2 = ref(0), $ = ref(true);
  let B = () => {
  };
  return a && (B = watch(
    [i, n, r],
    () => {
      const v = Xe(i);
      if (!v)
        return;
      const {
        left: S,
        top: y,
        width: _,
        height: C
      } = v.getBoundingClientRect();
      f.value = S + (l === "page" ? a.pageXOffset : 0), b.value = y + (l === "page" ? a.pageYOffset : 0), m.value = C, h2.value = _;
      const T = n.value - f.value, k = r.value - b.value;
      $.value = _ === 0 || C === 0 || T < 0 || k < 0 || T > _ || k > C, (o || !$.value) && (u.value = T, c.value = k);
    },
    { immediate: true }
  ), Ne(document, "mouseleave", () => {
    $.value = true;
  })), {
    x: n,
    y: r,
    sourceType: s,
    elementX: u,
    elementY: c,
    elementPositionX: f,
    elementPositionY: b,
    elementHeight: m,
    elementWidth: h2,
    isOutside: $,
    stop: B
  };
}
function El(e) {
  const t = window.getComputedStyle(e);
  if (t.overflowX === "scroll" || t.overflowY === "scroll" || t.overflowX === "auto" && e.clientWidth < e.scrollWidth || t.overflowY === "auto" && e.clientHeight < e.scrollHeight)
    return true;
  {
    const o = e.parentNode;
    return !o || o.tagName === "BODY" ? false : El(o);
  }
}
function Ar(e) {
  const t = e || window.event, o = t.target;
  return El(o) ? false : t.touches.length > 1 ? true : (t.preventDefault && t.preventDefault(), false);
}
var sa = /* @__PURE__ */ new WeakMap();
function Or(e, t = false) {
  const o = ref(t);
  let a = null, l;
  watch(_l(e), (s) => {
    const i = _a(Ye(s));
    if (i) {
      const u = i;
      sa.get(u) || sa.set(u, l), o.value && (u.style.overflow = "hidden");
    }
  }, {
    immediate: true
  });
  const n = () => {
    const s = _a(Ye(e));
    !s || o.value || (La && (a = Ne(
      s,
      "touchmove",
      (i) => {
        Ar(i);
      },
      { passive: false }
    )), s.style.overflow = "hidden", o.value = true);
  }, r = () => {
    var s;
    const i = _a(Ye(e));
    !i || !o.value || (La && (a == null || a()), i.style.overflow = (s = sa.get(i)) != null ? s : "", sa.delete(i), o.value = false);
  };
  return gt(r), computed({
    get() {
      return o.value;
    },
    set(s) {
      s ? n() : r();
    }
  });
}
function Er(e, t = {}) {
  const {
    threshold: o = 50,
    onSwipe: a,
    onSwipeEnd: l,
    onSwipeStart: n,
    passive: r = true,
    window: s = Ze
  } = t, i = reactive({ x: 0, y: 0 }), u = reactive({ x: 0, y: 0 }), c = computed(() => i.x - u.x), f = computed(() => i.y - u.y), { max: b, abs: m } = Math, h2 = computed(() => b(m(c.value), m(f.value)) >= o), $ = ref(false), B = computed(() => h2.value ? m(c.value) > m(f.value) ? c.value > 0 ? "left" : "right" : f.value > 0 ? "up" : "down" : "none"), v = (V) => [V.touches[0].clientX, V.touches[0].clientY], S = (V, A) => {
    i.x = V, i.y = A;
  }, y = (V, A) => {
    u.x = V, u.y = A;
  };
  let _;
  const C = Pr(s == null ? void 0 : s.document);
  r ? _ = C ? { passive: true } : { capture: false } : _ = C ? { passive: false, capture: true } : { capture: true };
  const T = (V) => {
    $.value && (l == null || l(V, B.value)), $.value = false;
  }, k = [
    Ne(e, "touchstart", (V) => {
      if (V.touches.length !== 1)
        return;
      _.capture && !_.passive && V.preventDefault();
      const [A, E] = v(V);
      S(A, E), y(A, E), n == null || n(V);
    }, _),
    Ne(e, "touchmove", (V) => {
      if (V.touches.length !== 1)
        return;
      const [A, E] = v(V);
      y(A, E), !$.value && h2.value && ($.value = true), $.value && (a == null || a(V));
    }, _),
    Ne(e, ["touchend", "touchcancel"], T, _)
  ];
  return {
    isPassiveEventSupported: C,
    isSwiping: $,
    direction: B,
    coordsStart: i,
    coordsEnd: u,
    lengthX: c,
    lengthY: f,
    stop: () => k.forEach((V) => V())
  };
}
function Pr(e) {
  if (!e)
    return false;
  let t = false;
  const o = {
    get passive() {
      return t = true, false;
    }
  };
  return e.addEventListener("x", Qe, o), e.removeEventListener("x", Qe), t;
}
function _e(e, t, o, a = {}) {
  var l, n, r;
  const {
    clone: s = false,
    passive: i = false,
    eventName: u,
    deep: c = false,
    defaultValue: f,
    shouldEmit: b
  } = a, m = getCurrentInstance(), h2 = o || (m == null ? void 0 : m.emit) || ((l = m == null ? void 0 : m.$emit) == null ? void 0 : l.bind(m)) || ((r = (n = m == null ? void 0 : m.proxy) == null ? void 0 : n.$emit) == null ? void 0 : r.bind(m == null ? void 0 : m.proxy));
  let $ = u;
  t || (t = "modelValue"), $ = $ || `update:${t.toString()}`;
  const B = (y) => s ? typeof s == "function" ? s(y) : br(y) : y, v = () => er(e[t]) ? B(e[t]) : f, S = (y) => {
    b ? b(y) && h2($, y) : h2($, y);
  };
  if (i) {
    const y = v(), _ = ref(y);
    let C = false;
    return watch(
      () => e[t],
      (T) => {
        C || (C = true, _.value = B(T), nextTick(() => C = false));
      }
    ), watch(
      _,
      (T) => {
        !C && (T !== e[t] || c) && S(T);
      },
      { deep: c }
    ), _;
  } else
    return computed({
      get() {
        return v();
      },
      set(y) {
        S(y);
      }
    });
}
var Nr = ["id"];
var Ir = ["innerHTML"];
var Fr = ["innerHTML"];
var no = defineComponent({
  inheritAttrs: false,
  __name: "BPopover",
  props: {
    boundary: { default: "clippingAncestors" },
    boundaryPadding: { default: void 0 },
    click: { type: [Boolean, String], default: false },
    container: { default: void 0 },
    content: { default: void 0 },
    customClass: { default: "" },
    delay: { default: () => ({ show: 100, hide: 300 }) },
    floatingMiddleware: { default: void 0 },
    hide: { type: [Boolean, String], default: void 0 },
    html: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    inline: { type: [Boolean, String], default: false },
    manual: { type: [Boolean, String], default: false },
    modelValue: { type: [Boolean, String], default: false },
    noAutoClose: { type: [Boolean, String], default: false },
    noFade: { type: [Boolean, String], default: false },
    noFlip: { type: [Boolean, String], default: false },
    noHide: { type: [Boolean, String], default: false },
    noShift: { type: [Boolean, String], default: false },
    noSize: { type: [Boolean, String], default: false },
    noninteractive: { type: [Boolean, String], default: false },
    offset: { default: null },
    placement: { default: "top" },
    persistent: { type: [Boolean, String], default: false },
    realtime: { type: [Boolean, String], default: false },
    reference: { default: null },
    strategy: { default: "absolute" },
    target: { default: null },
    title: { default: void 0 },
    tooltip: { type: [Boolean, String], default: false },
    variant: { default: null }
  },
  emits: ["hidden", "hide", "hide-prevented", "show", "show-prevented", "shown", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = d(() => a.modelValue), r = ref(n.value), s = ref(n.value);
    watchEffect(() => {
      l("update:modelValue", r.value);
    }), watch(n, () => {
      n.value !== r.value && (n.value ? pe() : ne(new Event("update:modelValue")));
    });
    const i = Pe(() => a.id, "popover"), u = d(() => a.click), c = d(() => a.manual), f = d(() => a.noShift), b = d(() => a.noSize), m = d(() => a.noFlip), h2 = d(() => a.noFade), $ = d(() => a.noAutoClose), B = d(() => a.noHide), v = d(() => a.realtime), S = d(() => a.inline), y = d(() => a.persistent), _ = d(() => a.tooltip), C = d(() => a.noninteractive), T = d(() => a.html), k = ref(false), N = ref(null), V = ref(null), A = ref(null), E = ref(null), K = ref(null), oe = computed(
      () => a.title ? It(a.title, Nt) : ""
    ), F = computed(
      () => a.content ? It(a.content, Nt) : ""
    ), z = toRef(() => a.placement.startsWith("auto")), D = Se(() => a.offset ?? NaN), J = computed(
      () => a.boundary === "document" || a.boundary === "viewport" ? void 0 : a.boundary
    ), ie = computed(
      () => a.boundary === "document" || a.boundary === "viewport" ? a.boundary : void 0
    ), te = ref({}), he = computed(() => {
      if (a.floatingMiddleware !== void 0)
        return a.floatingMiddleware;
      const x = a.offset !== null ? D.value : _.value ? 6 : 8, U = [dl(x)];
      return m.value === false && !z.value && U.push(
        Sl({
          boundary: J.value,
          rootBoundary: ie.value,
          padding: a.boundaryPadding
        })
      ), z.value && U.push(
        Ms({
          alignment: a.placement.split("-")[1] || void 0,
          boundary: J.value,
          rootBoundary: ie.value,
          padding: a.boundaryPadding
        })
      ), f.value === false && U.push(
        Bl({
          boundary: J.value,
          rootBoundary: ie.value,
          padding: a.boundaryPadding
        })
      ), B.value === false && U.push(
        Ds({
          boundary: J.value,
          rootBoundary: ie.value,
          padding: a.boundaryPadding
        })
      ), S.value === true && U.push(qs()), U.push(Us({ element: A, padding: 10 })), b.value === false && U.push(
        wl({
          boundary: J.value,
          rootBoundary: ie.value,
          padding: a.boundaryPadding,
          apply({ availableWidth: re, availableHeight: Te }) {
            te.value = {
              maxHeight: Te ? `${Te}px` : void 0,
              maxWidth: re ? `${re}px` : void 0
            };
          }
        })
      ), U;
    }), Oe = toRef(
      () => z.value ? void 0 : a.placement
    ), { floatingStyles: ve, middlewareData: ge, placement: ke, update: Ce } = kl(V, N, {
      placement: Oe,
      middleware: he,
      strategy: toRef(() => a.strategy),
      whileElementsMounted: (...x) => hl(...x, { animationFrame: v.value })
    }), M = ref({ position: "absolute" });
    watch(ge, () => {
      var x;
      if (B.value === false && ((x = ge.value.hide) != null && x.referenceHidden ? k.value = true : k.value = false), ge.value.arrow) {
        const { x: U, y: re } = ge.value.arrow;
        M.value = {
          position: "absolute",
          top: re ? `${re}px` : "",
          left: U ? `${U}px` : ""
        };
      }
    });
    const X = computed(() => {
      const x = _.value ? "tooltip" : "popover";
      return [
        x,
        `b-${x}`,
        {
          [`b-${x}-${a.variant}`]: a.variant !== null,
          show: r.value && !k.value,
          "pe-none": !r.value,
          fade: !h2.value,
          "d-none": !r.value && h2.value,
          [`${a.customClass}`]: a.customClass !== void 0,
          [`bs-${x}-${zr(ke.value)}`]: ke.value !== void 0
        }
      ];
    }), { isOutside: L } = Eo(N), { isOutside: j } = Eo(E), Q = (x) => {
      const U = x ?? new Event("click");
      r.value ? ne(U) : pe();
    }, Z = (x, U = {}) => new Vt(x, {
      cancelable: false,
      target: N.value || null,
      relatedTarget: null,
      trigger: null,
      ...U,
      componentId: i.value
    });
    let Y;
    const pe = () => {
      const x = Z("show", { cancelable: true });
      if (l("show", x), x.defaultPrevented) {
        l("show-prevented");
        return;
      }
      s.value = true, nextTick(() => {
        var U;
        Ce(), Y = setTimeout(
          () => {
            Ce(), r.value = true, nextTick(() => {
              l("shown", Z("shown"));
            });
          },
          typeof a.delay == "number" ? a.delay : ((U = a.delay) == null ? void 0 : U.show) || 0
        );
      });
    }, ne = (x) => {
      var Te;
      const U = Z("hide", { cancelable: true });
      if (l("hide", U), U.defaultPrevented) {
        l("hide-prevented");
        return;
      }
      Y && (clearTimeout(Y), Y = void 0);
      const re = typeof a.delay == "number" ? a.delay : ((Te = a.delay) == null ? void 0 : Te.hide) || 0;
      setTimeout(() => {
        var $e, Ve;
        (x == null ? void 0 : x.type) === "click" || (x == null ? void 0 : x.type) === "forceHide" || (x == null ? void 0 : x.type) === "update:modelValue" && c.value || !C.value && L.value && j.value && !(($e = N.value) != null && $e.contains(document == null ? void 0 : document.activeElement)) && !((Ve = E.value) != null && Ve.contains(document == null ? void 0 : document.activeElement)) || C.value && j.value ? (r.value = false, nextTick(() => {
          setTimeout(
            () => {
              s.value = false;
            },
            N.value ? Na(N.value) : 150
          ), l("hidden", Z("hidden"));
        })) : setTimeout(
          () => {
            ne(x);
          },
          re < 50 ? 50 : re
        );
      }, re);
    };
    t({
      hide: ne,
      show: pe,
      toggle: Q
    });
    const Be = () => {
      var x;
      if (a.target) {
        const U = Ct(a.target);
        U ? E.value = U : console.warn("Target element not found", a.target);
      } else
        E.value = (x = K.value) == null ? void 0 : x.nextElementSibling;
      if (a.reference) {
        const U = Ct(a.reference);
        U ? V.value = U : console.warn("Reference element not found", a.reference);
      } else
        V.value = E.value;
      if (!(!E.value || c.value) && Xa) {
        if (E.value.addEventListener("forceHide", ne), u.value) {
          E.value.addEventListener("click", Q);
          return;
        }
        E.value.addEventListener("pointerenter", pe), E.value.addEventListener("pointerleave", ne), E.value.addEventListener("focus", pe), E.value.addEventListener("blur", ne);
      }
    }, ue = () => {
      E.value && (E.value.removeEventListener("forceHide", ne), E.value.removeEventListener("click", Q), E.value.removeEventListener("pointerenter", pe), E.value.removeEventListener("pointerleave", ne), E.value.removeEventListener("focus", pe), E.value.removeEventListener("blur", ne));
    };
    return Ol(
      N,
      () => {
        r.value && u.value && !$.value && !c.value && ne(new Event("clickOutside"));
      },
      { ignore: [E] }
    ), watch([() => a.click, () => a.target, () => a.reference], () => {
      ue(), Be();
    }), onMounted(Be), onBeforeUnmount(ue), (x, U) => (openBlock(), createElementBlock(Fragment, null, [
      createBaseVNode("span", {
        ref_key: "placeholder",
        ref: K
      }, null, 512),
      renderSlot(x.$slots, "target", {
        show: pe,
        hide: ne,
        toggle: Q,
        showState: r.value
      }),
      (openBlock(), createBlock(Teleport, {
        to: x.container || "body",
        disabled: !x.container
      }, [
        s.value || unref(y) ? (openBlock(), createElementBlock("div", mergeProps({
          key: 0,
          id: x.id
        }, x.$attrs, {
          ref_key: "element",
          ref: N,
          class: X.value,
          role: "tooltip",
          tabindex: "-1",
          style: unref(ve)
        }), [
          createBaseVNode("div", {
            ref_key: "arrow",
            ref: A,
            class: normalizeClass(`${unref(_) ? "tooltip" : "popover"}-arrow`),
            style: normalizeStyle(M.value),
            "data-popper-arrow": ""
          }, null, 6),
          createBaseVNode("div", {
            class: "overflow-auto",
            style: normalizeStyle(te.value)
          }, [
            x.title || x.$slots.title ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              unref(T) ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(["position-sticky top-0", unref(_) ? "tooltip-inner" : "popover-header"]),
                innerHTML: oe.value
              }, null, 10, Ir)) : (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(["position-sticky top-0", unref(_) ? "tooltip-inner" : "popover-header"])
              }, [
                renderSlot(x.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString(x.title), 1)
                ])
              ], 2))
            ], 64)) : createCommentVNode("", true),
            unref(_) && !x.$slots.title && !x.title || !unref(_) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              unref(T) ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(unref(_) ? "tooltip-inner" : "popover-body"),
                innerHTML: F.value
              }, null, 10, Fr)) : (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(_) ? "tooltip-inner" : "popover-body")
              }, [
                renderSlot(x.$slots, "default", {}, () => [
                  createTextVNode(toDisplayString(x.content), 1)
                ])
              ], 2))
            ], 64)) : createCommentVNode("", true)
          ], 4)
        ], 16, Nr)) : createCommentVNode("", true)
      ], 8, ["to", "disabled"]))
    ], 64));
  }
});
var Lr = ({
  top: e,
  end: t,
  start: o,
  alignCenter: a,
  alignEnd: l
}) => {
  const n = e ? "top" : o ? "left" : t ? "right" : "bottom", r = l ? "end" : a ? null : "start";
  return `${n}${r ? `-${r}` : ""}`;
};
var zr = (e) => {
  const [t] = e.split("-");
  switch (t) {
    case "left":
      return "start";
    case "right":
      return "end";
    default:
      return t;
  }
};
var Kt = (e) => typeof e != "object" || e.active !== false;
var ma = (e, t) => {
  if (!Kt(e))
    return {};
  const a = typeof e > "u" || typeof e == "object" && !e.title && !e.content, l = t.getAttribute("title") || t.getAttribute("data-original-title");
  return a ? l ? (t.removeAttribute("title"), t.setAttribute("data-original-title", l), {
    content: It(l, Nt)
  }) : {} : typeof e == "string" ? {
    content: It(e, Nt)
  } : {
    title: e != null && e.title ? It(e == null ? void 0 : e.title, Nt) : void 0,
    content: e != null && e.content ? It(e == null ? void 0 : e.content, Nt) : void 0
  };
};
var zt = (e, t) => ({
  target: t,
  modelValue: e.modifiers.show,
  inline: e.modifiers.inline,
  click: e.modifiers.click,
  realtime: e.modifiers.realtime,
  persistent: e.modifiers.persistent,
  placement: e.modifiers.left ? "left" : e.modifiers.right ? "right" : e.modifiers.bottom ? "bottom" : e.modifiers.top ? "top" : void 0,
  html: true,
  ...typeof e.value == "object" ? e.value : {},
  ...e.modifiers.interactive ? { noninteractive: false } : {},
  title: null,
  content: null
});
var ga = (e, t) => {
  var a;
  const o = document.createElement("span");
  t.modifiers.body ? document.body.appendChild(o) : t.modifiers.child ? e.appendChild(o) : (a = e.parentNode) == null || a.insertBefore(o, e.nextSibling), e.$__app = createApp({ render: () => {
    var l;
    return h(no, { ...(l = e.$__state) == null ? void 0 : l.value });
  } }), e.$__app.mount(o), e.$__element = o;
};
var Pl = (e) => {
  var o;
  const t = e.$__element;
  (o = e.$__app) == null || o.unmount(), delete e.$__app, delete e.$__state, setTimeout(() => {
    t == null || t.remove();
  }, 0), delete e.$__element;
};
var Nl = (e, t, o) => {
  const a = st(e, t);
  return o && typeof o == "function" ? o(a, t, e) : a;
};
var Sa = (e, t, o) => t.concat(["sm", "md", "lg", "xl", "xxl"]).reduce((a, l) => (a[e ? `${e}${l.charAt(0).toUpperCase() + l.slice(1)}` : l] = o, a), {});
var Il = (e, t, o, a = o) => Object.keys(t).reduce((l, n) => (e[n] && l.push(
  [a, n.replace(o, ""), e[n]].filter((r) => r && typeof r != "boolean").join("-").toLowerCase()
), l), []);
var Ct = (e) => {
  if (e)
    return typeof e == "string" ? typeof document > "u" ? void 0 : document.getElementById(e) ?? document.querySelector(e) ?? void 0 : e.$el ?? e;
};
var Gt = (e = "") => `__BVID__${Math.random().toString().slice(2, 8)}___BV_${e}__`;
var Hr = (e, t) => ((e == null ? void 0 : e()) ?? []).reduce((o, a) => (typeof a.type == "symbol" ? o = o.concat(a.children) : o.push(a), o), []).filter((o) => {
  var a;
  return ((a = o.type) == null ? void 0 : a.__name) === t;
});
var Va = (e) => e.replace(ol, " ").replace(ll, (t, o, a) => `${o} ${a}`).replace(Kn, (t, o, a) => o + a.toUpperCase());
var Po = (e) => e.replace(ol, " ").replace(ll, (t, o, a) => `${o} ${a}`).replace(Xn, (t, o, a) => o + a.toUpperCase());
var Rr = (e) => {
  const t = e.trim();
  return t.charAt(0).toUpperCase() + t.slice(1);
};
var xr = (e) => e.replace(Jn, "\\$&");
var Mr = (e) => xr(e).replace(Qn, "\\s");
var ia = (e) => typeof e == "string" ? Po(e) : e.label !== void 0 ? e.label : typeof e.key == "string" ? Po(e.key) : e.key;
var Dr = (e) => !!(e.href || e.to);
var Fl = Symbol("carousel");
var Ll = Symbol("tabs");
var zl = Symbol("progress");
var Hl = Symbol("listGroup");
var Rl = Symbol("avatarGroup");
var xl = Symbol("accordion");
var Ml = Symbol("checkboxGroup");
var Dl = Symbol("radioGroup");
var so = Symbol("collapse");
var jl = Symbol("collapse");
var ro = Symbol("navbar");
var ql = Symbol("toastPlugin");
var Wl = Symbol("rtlPlugin");
var Gl = Symbol("breadcrumbPlugin");
var Ul = Symbol("modalControllerPlugin");
var Xl = Symbol("modalManagerPlugin");
var Wt = (e, t = {}, o = {}) => {
  const a = [e];
  let l;
  for (let n = 0; n < a.length && !l; n++) {
    const r = a[n];
    l = o[r];
  }
  return l && typeof l == "function" ? l(t) : l;
};
var wa = (e, t) => Object.keys(e).filter((o) => !t.map((a) => a.toString()).includes(o)).reduce((o, a) => ({ ...o, [a]: e[a] }), {});
var io = (e, t) => [...t].reduce(
  (o, a) => (o[a] = e[a], o),
  {}
);
var st = (e, t, o) => {
  const a = t.split(/[.[\]]/g);
  let l = e;
  for (const n of a) {
    if (l === null || l === void 0)
      return o;
    n.trim() !== "" && (l = l[n]);
  }
  return l === void 0 ? o : l;
};
var No = (e, t) => {
  const { all: o, ...a } = e, l = {};
  o && t.forEach((r) => {
    l[r] = o;
  });
  const n = { ...l, ...a };
  return Object.entries(n).filter(([r, s]) => !!s && t.includes(r)).map(([r]) => r);
};
var Io = (e, t) => t + (e ? Rr(e) : "");
var At = (e, t) => {
  const o = toRef(t), a = toRef(e), l = toRef(() => Dr(a.value)), n = computed(
    () => l.value ? io(
      a.value,
      o.value ?? [
        "active",
        "activeClass",
        "append",
        "href",
        "rel",
        "replace",
        "routerComponentName",
        "target",
        "to",
        "variant",
        "opacity",
        "opacityHover",
        "underlineVariant",
        "underlineOffset",
        "underlineOffsetHover",
        "underlineOpacity",
        "underlineOpacityHover"
      ]
    ) : {}
  );
  return { computedLink: l, computedLinkProps: n };
};
var Kl = () => ({ ...inject(Gl) });
var jr = (e = {}) => {
  const t = e.persist ?? false, o = "data-bs-theme", a = "body";
  return kr({
    attribute: o,
    selector: a,
    storageKey: t === true ? `bv-color-${e.attribute ?? o}-${e.selector ?? a}` : null,
    ...e
  });
};
var it = (e) => computed(() => {
  let t = toValue(e);
  return t = {
    ...t,
    variant: t.variant ?? null,
    bgVariant: t.bgVariant ?? null,
    textVariant: t.textVariant ?? null
  }, {
    [`text-bg-${t.variant}`]: t.variant !== null,
    [`text-${t.textVariant}`]: t.textVariant !== null && t.variant === null,
    [`bg-${t.bgVariant}`]: t.bgVariant !== null && t.variant === null
  };
});
var qr = (e) => computed(() => {
  const t = toValue(e);
  return {
    container: t === true,
    [`container-${t}`]: typeof t == "string"
  };
});
var Yl = (e, t = ref(1e3), o = {}) => {
  const a = readonly(toRef(e)), l = readonly(toRef(t)), n = ref(false), r = ref(0), s = toRef(() => Math.ceil(a.value / l.value)), i = toRef(
    () => f.value || n.value ? Math.round(a.value - r.value * l.value) : 0
  ), { pause: u, resume: c, isActive: f } = Al(
    () => {
      r.value = r.value + 1;
    },
    t,
    o
  ), b = () => {
    n.value = false, r.value = 0, c();
  }, m = () => {
    n.value = false, r.value = s.value;
  };
  watchEffect(() => {
    r.value > s.value && (r.value = s.value), r.value === s.value && u();
  }), watch([l, a], () => {
    m(), b();
  });
  const h2 = () => {
    f.value !== false && (n.value = true, u());
  }, $ = () => {
    r.value !== s.value && (n.value = false, c());
  };
  return {
    isActive: readonly(f),
    isPaused: readonly(n),
    restart: b,
    stop: m,
    pause: h2,
    resume: $,
    value: i
  };
};
var Ot = (e) => computed(() => {
  const t = toValue(e);
  return t === true ? "is-valid" : t === false ? "is-invalid" : null;
});
var Zl = (e) => computed(() => {
  const t = toValue(e);
  return {
    "form-check": t.plain === false && t.button === false,
    "form-check-inline": t.inline === true,
    "form-switch": t.switch === true,
    [`form-control-${t.size}`]: t.size !== void 0 && t.size !== "md" && t.button === false
  };
});
var Jl = (e) => {
  const t = toRef(e), o = Ot(() => t.value.state ?? null);
  return computed(() => [
    o.value,
    {
      "form-check-input": t.value.plain === false && t.value.button === false,
      "btn-check": t.value.button === true
    }
  ]);
};
var Ql = (e) => computed(() => {
  const t = toValue(e);
  return {
    "form-check-label": t.plain === false && t.button === false,
    btn: t.button === true,
    [`btn-${t.buttonVariant}`]: t.button === true && t.buttonVariant !== void 0 && t.buttonVariant !== null,
    [`btn-${t.size}`]: t.button && t.size && t.size !== "md"
  };
});
var en = (e) => {
  const t = toRef(e), o = ya(
    () => t.value.ariaInvalid,
    () => t.value.state
  );
  return computed(() => ({
    "aria-invalid": o.value,
    "aria-required": t.value.required === true ? true : void 0
  }));
};
var tn = (e) => computed(() => {
  const t = toValue(e);
  return {
    "was-validated": t.validated === true,
    "btn-group": t.buttons === true && t.stacked === false,
    "btn-group-vertical": t.stacked === true && t.buttons === true,
    [`btn-group-${t.size}`]: t.size !== void 0
  };
});
var Pe = (e, t) => computed(() => toValue(e) || Gt(t));
var an = (e, t) => {
  const o = ref(null), a = _e(e, "modelValue", t, { passive: true }), l = Pe(() => e.id, "input"), n = d(() => e.autofocus), r = d(() => e.disabled), s = d(() => e.lazy), i = d(() => e.lazyFormatter), u = d(() => e.number), c = d(() => e.state), f = d(() => e.trim), b = Se(() => e.debounce ?? 0), m = Se(() => e.debounceMaxWait ?? NaN), h2 = cr(
    (V) => {
      a.value = V;
    },
    () => s.value === true ? 0 : b.value,
    { maxWait: () => s.value === true ? NaN : m.value }
  ), $ = (V, A = false) => {
    s.value === true && A === false || h2(V);
  }, { focused: B } = De(o, {
    initialValue: n.value
  }), v = (V, A, E = false) => e.formatter !== void 0 && (!i.value || E) ? e.formatter(V, A) : V, S = (V) => f.value ? V.trim() : u.value ? Number.parseFloat(V) : V;
  onMounted(() => {
    var V;
    o.value && (o.value.value = ((V = a.value) == null ? void 0 : V.toString()) ?? "");
  }), onActivated(() => {
    nextTick(() => {
      n.value && (B.value = true);
    });
  });
  const y = ya(() => e.ariaInvalid, c);
  return {
    input: o,
    computedId: l,
    computedAriaInvalid: y,
    onInput: (V) => {
      const { value: A } = V.target, E = v(A, V);
      if (V.defaultPrevented) {
        V.preventDefault();
        return;
      }
      const K = S(E);
      $(K);
    },
    onChange: (V) => {
      const { value: A } = V.target, E = v(A, V);
      if (V.defaultPrevented) {
        V.preventDefault();
        return;
      }
      const K = S(E);
      a.value !== K && $(E, true);
    },
    onBlur: (V) => {
      if (!s.value && !i.value)
        return;
      const { value: A } = V.target, E = v(A, V, true), K = S(E);
      a.value !== K && $(E, true);
    },
    focus: () => {
      r.value || (B.value = true);
    },
    blur: () => {
      r.value || (B.value = false);
    }
  };
};
var on = (e, t) => {
  const o = (r) => typeof r == "object" && r !== null && "label" in r, a = (r) => {
    if (typeof r == "string")
      return { value: r, text: r };
    const s = st(r, t.valueField), i = st(r, t.textField), u = st(r, t.htmlField), c = st(r, t.disabledField), f = t.optionsField ? st(r, t.optionsField) : void 0;
    return f !== void 0 ? {
      label: st(r, t.labelField) || i,
      options: f
    } : {
      value: s,
      text: i,
      html: u,
      disabled: c
    };
  }, l = (r) => r.map((s) => a(s));
  return { normalizedOptions: computed(() => l(toValue(e))), isComplex: o };
};
var Aa = "modal-open";
var uo = () => {
  const e = inject(Xl), t = (a) => {
    e == null || e.removeStack(a), e == null || e.removeRegistry(a);
  }, o = oo("updateHTMLAttrs", (a, l, n) => {
    const r = typeof a == "string" ? window == null ? void 0 : window.document.querySelector(a) : Xe(a);
    r && (l === "class" ? r.classList.toggle(Aa, n === Aa) : r.setAttribute(l, n));
  });
  return gt(() => {
    o("body", "class", "");
  }), watch(
    () => e == null ? void 0 : e.countStack.value,
    (a) => {
      a !== void 0 && o("body", "class", a > 0 ? Aa : "");
    }
  ), {
    ...e,
    dispose: t
  };
};
var Wr = (e) => {
  const { pushRegistry: t, pushStack: o, removeStack: a, stack: l, dispose: n, countStack: r } = uo(), s = getCurrentInstance();
  if (!s || s.type.__name !== "BModal")
    throw new Error("useModalManager must only use in BModal component");
  return t == null || t(s), gt(() => {
    n(s);
  }), watch(
    e,
    (i, u) => {
      i ? o == null || o(s) : u && !i && (a == null || a(s));
    },
    { immediate: true }
  ), {
    activePosition: computed(
      () => l == null ? void 0 : l.value.findIndex((i) => {
        var u, c;
        return ((u = i.exposed) == null ? void 0 : u.id) === ((c = s.exposed) == null ? void 0 : c.id);
      })
    ),
    activeModalCount: r
  };
};
var Gr = (e = void 0) => {
  const { registry: t } = uo(), o = getCurrentInstance(), a = (r) => r.parent ? r.parent.type.__name === "BModal" ? r.parent : a(r.parent) : null, l = computed(() => {
    const r = toValue(e);
    return r ? (t == null ? void 0 : t.value.find((s) => {
      var i;
      return ((i = s.exposed) == null ? void 0 : i.id.value) === r;
    })) || null : o ? a(o) : null;
  }), n = toRef(() => {
    var r;
    return (r = l.value) == null ? void 0 : r.proxy;
  });
  return {
    show() {
      var r, s;
      (s = (r = l.value) == null ? void 0 : r.exposed) == null || s.show();
    },
    hide(r = "") {
      var s, i;
      (i = (s = l.value) == null ? void 0 : s.exposed) == null || i.hide(r);
    },
    modal: n
  };
};
var ln = () => {
  const { lastStack: e, stack: t } = uo();
  return {
    ...inject(Ul),
    hide: (n = "") => {
      var r;
      e != null && e.value && ((r = e == null ? void 0 : e.value.exposed) == null || r.hide(n));
    },
    hideAll: (n = "") => {
      t == null || t.value.forEach((r) => {
        var s;
        (s = r.exposed) == null || s.hide(n);
      });
    }
    // Todo: Supports listening events globally in the future
  };
};
var co = (e) => {
  const t = (i, u) => {
    const c = u === null ? "" : `${u}-`;
    return i === "circle" ? `${c}rounded-circle` : i === "pill" ? `${c}rounded-pill` : typeof i == "number" || i === "0" || i === "1" || i === "2" || i === "3" || i === "4" || i === "5" ? `${c}rounded-${i}` : i === "none" ? `${c}rounded-0` : i === "sm" ? `${c}rounded-1` : i === "lg" ? `${c}rounded-5` : `${c}rounded`;
  }, o = readonly(toRef(e)), a = d(() => o.value.rounded), l = d(() => o.value.roundedTop), n = d(() => o.value.roundedBottom), r = d(() => o.value.roundedStart), s = d(() => o.value.roundedEnd);
  return computed(() => ({
    [`${t(a.value, null)}`]: !!a.value,
    [`${t(l.value, "top")}`]: !!l.value,
    [`${t(n.value, "bottom")}`]: !!n.value,
    [`${t(r.value, "start")}`]: !!r.value,
    [`${t(s.value, "end")}`]: !!s.value
  }));
};
var Ur = () => {
  const e = inject(Wl);
  return onMounted(() => {
    watch(
      [() => e == null ? void 0 : e.isRtl.value, () => e == null ? void 0 : e.locale.value],
      ([t, o]) => {
        const a = document.documentElement;
        a.setAttribute("dir", t ?? false ? "rtl" : "ltr"), a.setAttribute("lang", o ?? "");
      },
      { immediate: true }
    );
  }), { ...e };
};
var nn = (e, t) => {
  const o = readonly(toRef(e)), a = readonly(toRef(t)), l = toRef(() => !a.value);
  onMounted(() => {
    const n = Or(
      document.body,
      o.value && l.value
    );
    watch([o, l], ([r, s]) => {
      n.value = r && s;
    });
  });
};
var sn = (e, t, o = {}) => {
  const a = toRef(e), l = toRef(t), n = ref(Ct(a.value)), r = ref(Ct(l.value));
  watch([a, l], () => {
    S();
  });
  const {
    contentQuery: s = ":scope > [id]",
    targetQuery: i = "[href]",
    manual: u = false,
    root: c,
    rootMargin: f = "0px 0px -25%",
    threshold: b = [0.1, 0.5, 1],
    watchChanges: m = true
  } = o, h2 = ref(null), $ = ref([]), B = ref([]);
  getCurrentInstance() ? onMounted(() => {
    Ha(a, n, {
      transform: {
        ltr: (A) => Ct(A)
      },
      direction: "ltr",
      immediate: true
    }), Ha(l, r, {
      transform: {
        ltr: (A) => Ct(A)
      },
      direction: "ltr",
      immediate: true
    }), S();
  }) : nextTick(() => {
    S();
  });
  const S = () => {
    B.value = n.value ? Array.from(n.value.querySelectorAll(s)) : [], $.value = B.value.map((A) => ({
      id: A.id,
      el: A,
      visible: false,
      text: A.textContent
    }));
  };
  let y = true, _ = 0;
  const C = computed(
    () => n.value && getComputedStyle(n.value).overflowY === "visible" ? null : n.value
  ), T = Tr(
    B,
    (A) => {
      var oe, F, z, D;
      const E = (oe = C.value || (document == null ? void 0 : document.documentElement)) == null ? void 0 : oe.scrollTop;
      y = E > _, _ = E, A.forEach((J) => {
        if (J.isIntersecting) {
          $.value.forEach((ie) => {
            ie.el === J.target && (ie.visible = true);
          });
          return;
        }
        $.value.forEach((ie) => {
          ie.el === J.target && (ie.visible = false);
        });
      });
      let K = null;
      y ? K = ((F = [...$.value].reverse().find((J) => J.visible)) == null ? void 0 : F.id) || null : K = ((z = $.value.find((J) => J.visible)) == null ? void 0 : z.id) || null, K !== null && (h2.value = K), h2.value || (h2.value = ((D = $.value[0]) == null ? void 0 : D.id) || null);
    },
    {
      root: c ? Ct(c) : C,
      rootMargin: f,
      threshold: b
    }
  );
  watch(h2, (A) => {
    var F;
    if (u)
      return;
    const E = (F = r.value) == null ? void 0 : F.querySelectorAll(i);
    if (E === void 0)
      return;
    let K = false, oe = null;
    E.forEach((z) => {
      var J, ie, te, he, Oe, ve, ge, ke, Ce, M, X;
      const D = z.closest(".dropdown");
      if ((J = z.getAttribute("href")) != null && J.includes(`#${A}`)) {
        oe = z, z.classList.add("active"), D && ((ie = D == null ? void 0 : D.querySelector(".dropdown-toggle")) == null || ie.classList.add("active"), K = true);
        let L = (te = z.closest(".nav")) == null ? void 0 : te.previousSibling;
        for (; (he = L == null ? void 0 : L.classList) != null && he.contains("nav-item"); )
          K = true, (Oe = L.querySelector(".nav-link")) == null || Oe.classList.add("active"), L = (ve = L.closest(".nav")) == null ? void 0 : ve.previousSibling;
      } else if (z.classList.remove("active"), D && !K && ((ge = D == null ? void 0 : D.querySelector(".dropdown-toggle")) == null || ge.classList.remove("active")), !K) {
        let L = (ke = z.closest(".nav")) == null ? void 0 : ke.previousSibling;
        for (; (Ce = L == null ? void 0 : L.classList) != null && Ce.contains("nav-item"); )
          K = true, L.querySelector(".nav-link") !== oe && ((M = L.querySelector(".nav-link")) == null || M.classList.remove("active")), L = (X = L.closest(".nav")) == null ? void 0 : X.previousSibling;
      }
    });
  });
  const k = m ? $r(
    n,
    () => {
      S();
    },
    {
      childList: true
    }
  ) : { stop: () => {
  } }, N = (A, E = false) => {
    var F, z;
    A.preventDefault();
    const K = (z = (F = A.target) == null ? void 0 : F.getAttribute) == null ? void 0 : z.call(F, "href"), oe = K ? document == null ? void 0 : document.querySelector(K) : null;
    oe && n.value && (n.value.scrollTo ? n.value.scrollTo({ top: oe.offsetTop, behavior: E ? "smooth" : "auto" }) : n.value.scrollTop = oe.offsetTop);
  }, V = () => {
    T.stop(), k.stop();
  };
  return {
    current: readonly(h2),
    list: $,
    content: n,
    target: r,
    scrollIntoView: N,
    updateList: S,
    cleanup: V
  };
};
var rn = () => ({ ...inject(ql) });
var Dt = defineComponent({
  __name: "BTransition",
  props: {
    appear: { type: [Boolean, String], default: false },
    mode: { default: void 0 },
    noFade: { type: [Boolean, String], default: false },
    transProps: { default: void 0 }
  },
  emits: ["after-appear", "after-enter", "after-leave", "appear", "before-appear", "before-enter", "before-leave", "enter", "appear-cancelled", "enter-cancelled", "leave", "leave-cancelled"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = d(() => o.appear), n = d(() => o.noFade), r = computed(() => {
      const i = {
        name: "",
        enterActiveClass: "",
        enterToClass: "",
        leaveActiveClass: "",
        leaveToClass: "showing",
        enterFromClass: "showing",
        leaveFromClass: ""
      }, u = {
        ...i,
        enterActiveClass: "fade showing",
        leaveActiveClass: "fade showing"
      };
      return n.value ? i : u;
    }), s = computed(() => ({ mode: o.mode, css: true, ...r.value }));
    return (i, u) => (openBlock(), createBlock(Transition, mergeProps({ ...s.value, ...i.transProps }, {
      appear: unref(l),
      onAfterAppear: u[0] || (u[0] = (c) => a("after-appear", c)),
      onAfterEnter: u[1] || (u[1] = (c) => a("after-enter", c)),
      onAfterLeave: u[2] || (u[2] = (c) => a("after-leave", c)),
      onAppear: u[3] || (u[3] = (c) => a("appear", c)),
      onBeforeAppear: u[4] || (u[4] = (c) => a("before-appear", c)),
      onBeforeEnter: u[5] || (u[5] = (c) => a("before-enter", c)),
      onBeforeLeave: u[6] || (u[6] = (c) => a("before-leave", c)),
      onEnter: u[7] || (u[7] = (c) => a("enter", c)),
      onAppearCancelled: u[8] || (u[8] = (c) => a("appear-cancelled", c)),
      onEnterCancelled: u[9] || (u[9] = (c) => a("enter-cancelled", c)),
      onLeave: u[10] || (u[10] = (c) => a("leave", c)),
      onLeaveCancelled: u[11] || (u[11] = (c) => a("leave-cancelled", c))
    }), {
      default: withCtx(() => [
        renderSlot(i.$slots, "default")
      ]),
      _: 3
    }, 16, ["appear"]));
  }
});
var Xr = ["type", "disabled", "aria-label"];
var jt = defineComponent({
  __name: "BCloseButton",
  props: {
    ariaLabel: { default: "Close" },
    disabled: { type: [Boolean, String], default: false },
    type: { default: "button" }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = d(() => o.disabled);
    return (n, r) => (openBlock(), createElementBlock("button", {
      type: n.type,
      class: "btn-close",
      disabled: unref(l),
      "aria-label": n.ariaLabel,
      onClick: r[0] || (r[0] = (s) => a("click", s))
    }, null, 8, Xr));
  }
});
var Fo = "active";
var ft = defineComponent({
  __name: "BLink",
  props: {
    active: { type: [Boolean, String], default: void 0 },
    activeClass: { default: "router-link-active" },
    append: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    exactActiveClass: { default: "router-link-exact-active" },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: false },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: false },
    routerComponentName: { default: "router-link" },
    routerTag: { default: "a" },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: null },
    variant: { default: null }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = useAttrs(), n = d(() => o.active), r = d(() => o.icon);
    d(() => o.append);
    const s = d(() => o.disabled);
    d(() => o.replace);
    const i = inject(so, null), u = inject(ro, null), c = getCurrentInstance(), f = computed(() => {
      const v = o.routerComponentName.split("-").map((y) => y.charAt(0).toUpperCase() + y.slice(1)).join("");
      return !((c == null ? void 0 : c.appContext.app.component(v)) !== void 0) || s.value || !o.to ? "a" : o.routerComponentName;
    }), b = computed(() => {
      const v = "#";
      if (o.href)
        return o.href;
      if (typeof o.to == "string")
        return o.to || v;
      const { to: S } = o;
      if (S !== void 0 && "path" in S) {
        const y = S.path || "", _ = S.query ? `?${Object.keys(S.query).map((T) => {
          var k;
          return `${T}=${(k = S.query) == null ? void 0 : k[T]}`;
        }).join("=")}` : "", C = !S.hash || S.hash.charAt(0) === "#" ? S.hash || "" : `#${S.hash}`;
        return `${y}${_}${C}` || v;
      }
      return v;
    }), m = computed(() => ({
      [`link-${o.variant}`]: o.variant !== null,
      [`link-opacity-${o.opacity}`]: o.opacity !== void 0,
      [`link-opacity-${o.opacityHover}-hover`]: o.opacityHover !== void 0,
      [`link-underline-${o.underlineVariant}`]: o.underlineVariant !== null,
      [`link-offset-${o.underlineOffset}`]: o.underlineOffset !== void 0,
      [`link-offset-${o.underlineOffsetHover}-hover`]: o.underlineOffsetHover !== void 0,
      [`link-underline-opacity-${o.underlineOpacity}`]: o.underlineOpacity !== void 0,
      [`link-underline-opacity-${o.underlineOpacityHover}-hover`]: o.underlineOpacityHover !== void 0,
      "icon-link": r.value === true
    })), h2 = computed(() => ({
      class: m.value,
      to: o.to,
      href: b.value,
      target: o.target,
      rel: o.target === "_blank" ? o.rel ?? "noopener" : void 0,
      tabindex: s.value ? "-1" : typeof l.tabindex > "u" ? null : l.tabindex,
      "aria-disabled": s.value ? true : null
    })), $ = computed(() => ({
      [Fo]: n.value,
      disabled: s.value
    })), B = (v) => {
      var S, y, _;
      if (s.value) {
        v.preventDefault(), v.stopImmediatePropagation();
        return;
      }
      (((S = i == null ? void 0 : i.isNav) == null ? void 0 : S.value) === true && u === null || u !== null && ((y = u.autoClose) == null ? void 0 : y.value) === true) && ((_ = i == null ? void 0 : i.close) == null || _.call(i)), a("click", v);
    };
    return (v, S) => f.value === "router-link" ? (openBlock(), createBlock(resolveDynamicComponent(f.value), mergeProps({ key: 0 }, h2.value, { custom: "" }), {
      default: withCtx(({ href: y, navigate: _, isActive: C, isExactActive: T }) => [
        (openBlock(), createBlock(resolveDynamicComponent(v.routerTag), mergeProps({
          href: y,
          class: {
            [Fo]: unref(n),
            [v.activeClass]: C,
            [v.exactActiveClass]: T
          }
        }, v.$attrs, {
          onClick: (k) => {
            _(k), B(k);
          }
        }), {
          default: withCtx(() => [
            renderSlot(v.$slots, "default")
          ]),
          _: 2
        }, 1040, ["href", "class", "onClick"]))
      ]),
      _: 3
    }, 16)) : (openBlock(), createBlock(resolveDynamicComponent(f.value), mergeProps({
      key: 1,
      class: $.value
    }, h2.value, { onClick: B }), {
      default: withCtx(() => [
        renderSlot(v.$slots, "default")
      ]),
      _: 3
    }, 16, ["class"]));
  }
});
var Kr = ["aria-valuenow", "aria-valuemax"];
var un = defineComponent({
  __name: "BProgressBar",
  props: {
    animated: { type: [Boolean, String], default: false },
    label: { default: void 0 },
    labelHtml: { default: void 0 },
    max: { default: void 0 },
    precision: { default: 0 },
    showProgress: { type: [Boolean, String], default: false },
    showValue: { type: [Boolean, String], default: false },
    striped: { type: [Boolean, String], default: false },
    value: { default: 0 },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(e) {
    const t = e, o = inject(zl, null), a = d(() => t.animated), l = d(() => t.showProgress), n = d(() => t.showValue), r = d(() => t.striped), s = it(t), i = computed(() => [
      s.value,
      {
        "progress-bar-animated": a.value || (o == null ? void 0 : o.animated.value),
        "progress-bar-striped": r.value || (o == null ? void 0 : o.striped.value) || a.value || (o == null ? void 0 : o.animated.value)
      }
    ]), u = Se(() => t.precision), c = Se(() => t.value), f = Se(() => t.max ?? NaN), b = Se(() => (o == null ? void 0 : o.max.value) ?? NaN), m = computed(
      () => t.labelHtml !== void 0 ? t.labelHtml : n.value || o != null && o.showValue.value ? c.value.toFixed(u.value) : l.value || o != null && o.showProgress.value ? (c.value * 100 / (f.value || 100)).toFixed(u.value) : t.label !== void 0 ? t.label : ""
    ), h2 = computed(
      () => b.value ? `${c.value * 100 / b.value}%` : f.value ? `${c.value * 100 / f.value}%` : typeof t.value == "string" ? t.value : `${t.value}%`
    );
    return ($, B) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["progress-bar", i.value]),
      role: "progressbar",
      "aria-valuenow": $.value,
      "aria-valuemin": "0",
      "aria-valuemax": $.max,
      style: normalizeStyle({ width: h2.value })
    }, [
      renderSlot($.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(m.value), 1)
      ])
    ], 14, Kr));
  }
});
var dn = defineComponent({
  __name: "BProgress",
  props: {
    height: { default: void 0 },
    animated: { type: [Boolean, String], default: void 0 },
    max: { default: 100 },
    precision: { default: void 0 },
    showProgress: { type: [Boolean, String], default: void 0 },
    showValue: { type: [Boolean, String], default: void 0 },
    striped: { type: [Boolean, String], default: void 0 },
    value: { default: void 0 },
    variant: { default: void 0 },
    bgVariant: { default: void 0 },
    textVariant: { default: void 0 }
  },
  setup(e) {
    const t = e, o = d(() => t.animated), a = d(() => t.showProgress), l = d(() => t.showValue), n = d(() => t.striped);
    return provide(zl, {
      animated: o,
      max: toRef(() => t.max),
      showProgress: a,
      showValue: l,
      striped: n
    }), (r, s) => (openBlock(), createElementBlock("div", {
      class: "progress",
      style: normalizeStyle({ height: r.height })
    }, [
      renderSlot(r.$slots, "default", {}, () => [
        createVNode(un, {
          animated: r.animated,
          max: r.max,
          precision: r.precision,
          "show-progress": r.showProgress,
          "show-value": r.showValue,
          striped: r.striped,
          value: r.value,
          variant: r.variant,
          "text-variant": r.textVariant,
          "bg-variant": r.bgVariant
        }, null, 8, ["animated", "max", "precision", "show-progress", "show-value", "striped", "value", "variant", "text-variant", "bg-variant"])
      ])
    ], 4));
  }
});
var Yr = ["id", "role", "aria-live", "aria-atomic"];
var Zr = { class: "me-auto" };
var cn = defineComponent({
  __name: "BToast",
  props: {
    body: { default: void 0 },
    bodyClass: { default: void 0 },
    headerClass: { default: void 0 },
    headerTag: { default: "div" },
    id: { default: void 0 },
    interval: { default: 1e3 },
    isStatus: { type: [Boolean, String], default: false },
    modelValue: { type: [Boolean, Number], default: false },
    noCloseButton: { type: [Boolean, String], default: false },
    noFade: { type: [Boolean, String], default: false },
    noHoverPause: { type: [Boolean, String], default: false },
    progressProps: { default: void 0 },
    showOnPause: { type: [Boolean, String], default: true },
    solid: { type: [Boolean, String], default: false },
    title: { default: void 0 },
    toastClass: { default: void 0 },
    transProps: { default: void 0 },
    variant: { default: void 0 },
    bgVariant: { default: null },
    textVariant: { default: null },
    active: { type: [Boolean, String], default: void 0 },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 }
  },
  emits: ["close", "close-countdown", "hide", "hidden", "show", "shown", "show-prevented", "hide-prevented", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = ref(null), r = lo(n), s = _e(a, "modelValue", l, { passive: true }), { computedLink: i, computedLinkProps: u } = At(a), c = d(() => a.isStatus), f = d(() => a.noCloseButton), b = d(() => a.noFade), m = d(() => a.noHoverPause), h2 = d(() => a.showOnPause), $ = Se(() => a.interval);
    d(() => a.solid);
    const B = it(a), v = toRef(() => typeof s.value == "boolean" ? 0 : s.value), {
      isActive: S,
      pause: y,
      restart: _,
      resume: C,
      stop: T,
      isPaused: k,
      value: N
    } = Yl(v, $, {
      immediate: typeof s.value == "number"
    });
    watchEffect(() => {
      l("close-countdown", N.value);
    });
    const V = toRef(() => i.value ? ft : "div"), A = toRef(
      () => typeof s.value == "boolean" ? s.value : S.value || h2.value && k.value
    ), E = computed(() => [
      B.value,
      {
        show: A.value
      }
    ]), K = () => {
      m.value || y();
    };
    watch(r, (te) => {
      if (te) {
        K();
        return;
      }
      C();
    });
    const oe = (te, he = {}) => new Vt(te, {
      cancelable: false,
      target: n.value || null,
      relatedTarget: null,
      trigger: null,
      ...he,
      componentId: a.id
    }), F = () => {
      const te = oe("show", { cancelable: true });
      if (l("show", te), te.defaultPrevented) {
        s.value && (s.value = false), l("show-prevented");
        return;
      }
      s.value || (s.value = true);
    }, z = (te = "") => {
      const he = oe("hide", { cancelable: te !== "", trigger: te });
      if (l("hide", he), te === "close" && l("close", he), he.defaultPrevented) {
        l("hide-prevented"), s.value || (s.value = true);
        return;
      }
      typeof s.value == "boolean" ? s.value = false : (s.value = 0, T());
    }, D = () => {
      F();
    }, J = () => {
      l("shown", oe("shown"));
    }, ie = () => {
      l("hidden", oe("hidden"));
    };
    return watch(S, (te) => {
      te === false && k.value === false && s.value && z();
    }), onBeforeUnmount(T), t({
      pause: y,
      restart: _,
      resume: C,
      stop: T
    }), (te, he) => (openBlock(), createBlock(Dt, mergeProps({ "no-fade": unref(b) }, te.transProps, {
      onBeforeEnter: D,
      onAfterEnter: J,
      onAfterLeave: ie
    }), {
      default: withCtx(() => [
        A.value ? (openBlock(), createElementBlock("div", {
          key: 0,
          id: te.id,
          ref_key: "element",
          ref: n,
          class: normalizeClass(["toast", [te.toastClass, E.value]]),
          tabindex: "0",
          role: A.value ? unref(c) ? "status" : "alert" : void 0,
          "aria-live": A.value ? unref(c) ? "polite" : "assertive" : void 0,
          "aria-atomic": A.value ? true : void 0
        }, [
          te.$slots.title || te.title ? (openBlock(), createBlock(resolveDynamicComponent(te.headerTag), {
            key: 0,
            class: "toast-header"
          }, {
            default: withCtx(() => [
              renderSlot(te.$slots, "title", { hide: z }, () => [
                createBaseVNode("strong", Zr, toDisplayString(te.title), 1)
              ]),
              unref(f) ? createCommentVNode("", true) : (openBlock(), createBlock(jt, {
                key: 0,
                onClick: he[0] || (he[0] = (Oe) => z("close"))
              }))
            ]),
            _: 3
          })) : createCommentVNode("", true),
          te.$slots.default || te.body ? (openBlock(), createBlock(resolveDynamicComponent(V.value), mergeProps({
            key: 1,
            class: ["toast-body", te.bodyClass],
            style: { display: "block" }
          }, unref(u), {
            onClick: he[1] || (he[1] = (Oe) => unref(i) ? z() : () => {
            })
          }), {
            default: withCtx(() => [
              renderSlot(te.$slots, "default", { hide: z }, () => [
                createTextVNode(toDisplayString(te.body), 1)
              ])
            ]),
            _: 3
          }, 16, ["class"])) : createCommentVNode("", true),
          typeof unref(s) == "number" && te.progressProps !== void 0 ? (openBlock(), createBlock(dn, {
            key: 2,
            animated: te.progressProps.animated,
            precision: te.progressProps.precision,
            "show-progress": te.progressProps.showProgress,
            "show-value": te.progressProps.showValue,
            striped: te.progressProps.striped,
            variant: te.progressProps.variant,
            max: unref(s),
            value: unref(N),
            height: "4px"
          }, null, 8, ["animated", "precision", "show-progress", "show-value", "striped", "variant", "max", "value"])) : createCommentVNode("", true)
        ], 10, Yr)) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16, ["no-fade"]));
  }
});
var Jr = "top-right";
var Qr = {
  install(e) {
    const t = shallowRef([]), o = ref(false), a = (r) => {
      o.value = r;
    }, l = (r) => {
      const s = Symbol(), i = computed(() => {
        const u = toValue(r.props);
        return {
          component: toValue(r.component) ?? cn,
          props: {
            ...u,
            pos: (u == null ? void 0 : u.pos) || Jr,
            _modelValue: (u == null ? void 0 : u.value) || 5e3,
            _self: s
          }
        };
      });
      return (i.value.props.appendToast !== void 0 ? i.value.props.appendToast : o.value) ? t.value = [...t.value, i] : t.value = [i, ...t.value], s;
    }, n = (r) => {
      t.value = t.value.filter((s) => s.value.props._self !== r);
    };
    e.provide(ql, {
      _setIsAppend: a,
      toasts: t,
      show: l,
      remove: n
    });
  }
};
var ei = {
  install(e) {
    const t = ref([]), o = () => {
      t.value.splice(0, t.value.length);
    };
    e.provide(Gl, { items: t, reset: o });
  }
};
var ti = {
  key: 0,
  class: "visually-hidden"
};
var Ca = defineComponent({
  __name: "BSpinner",
  props: {
    label: { default: void 0 },
    role: { default: "status" },
    small: { type: [Boolean, String], default: false },
    tag: { default: "span" },
    type: { default: "border" },
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = useSlots(), a = d(() => t.small), l = computed(() => [
      `spinner-${t.type}`,
      {
        [`spinner-${t.type}-sm`]: a.value,
        [`text-${t.variant}`]: t.variant !== null
      }
    ]), n = toRef(() => !He(o.label));
    return (r, s) => (openBlock(), createBlock(resolveDynamicComponent(r.tag), {
      class: normalizeClass(l.value),
      role: r.label || n.value ? r.role : null,
      "aria-hidden": r.label || n.value ? null : true
    }, {
      default: withCtx(() => [
        r.label || n.value ? (openBlock(), createElementBlock("span", ti, [
          renderSlot(r.$slots, "label", {}, () => [
            createTextVNode(toDisplayString(r.label), 1)
          ])
        ])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["class", "role", "aria-hidden"]));
  }
});
var Bt = defineComponent({
  __name: "BButton",
  props: {
    loading: { type: [Boolean, String], default: false },
    loadingFill: { type: [Boolean, String], default: false },
    loadingText: { default: "Loading..." },
    pill: { type: [Boolean, String], default: false },
    pressed: { type: [Boolean, String], default: void 0 },
    size: { default: "md" },
    squared: { type: [Boolean, String], default: false },
    tag: { default: "button" },
    type: { default: "button" },
    variant: { default: "secondary" },
    active: { type: [Boolean, String], default: false },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    routerTag: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 }
  },
  emits: ["click", "update:pressed"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = _e(o, "pressed", a), n = d(() => o.active), r = d(() => o.disabled), s = d(() => o.pill), i = d(() => o.pressed), u = d(() => o.squared), c = d(() => o.loading), f = d(() => o.loadingFill), { computedLink: b, computedLinkProps: m } = At(o, [
      "active-class",
      "exact-active-class",
      "replace",
      "routerComponentName",
      "routerTag"
    ]), h2 = toRef(() => typeof i.value == "boolean"), $ = toRef(
      () => o.tag === "button" && o.href === void 0 && o.to === void 0
    ), B = toRef(() => o.to !== void 0), v = toRef(() => o.href !== void 0 ? false : !$.value), S = computed(() => B.value ? m.value : []), y = computed(() => [
      [`btn-${o.size}`],
      {
        [`btn-${o.variant}`]: o.variant !== null,
        active: n.value || i.value,
        "rounded-pill": s.value,
        "rounded-0": u.value,
        disabled: r.value
      }
    ]), _ = toRef(() => B.value ? ft : o.href ? "a" : o.tag), C = (T) => {
      if (r.value) {
        T.preventDefault(), T.stopPropagation();
        return;
      }
      a("click", T), h2.value && (l.value = !i.value);
    };
    return (T, k) => (openBlock(), createBlock(resolveDynamicComponent(_.value), mergeProps({ class: "btn" }, S.value, {
      class: y.value,
      "aria-disabled": v.value ? unref(r) : null,
      "aria-pressed": h2.value ? unref(i) : null,
      autocomplete: h2.value ? "off" : null,
      disabled: $.value ? unref(r) : null,
      href: T.href,
      rel: unref(b) ? T.rel : null,
      role: v.value || unref(b) ? "button" : null,
      target: unref(b) ? T.target : null,
      type: $.value ? T.type : null,
      to: $.value ? null : T.to,
      append: unref(b) ? T.append : null,
      onClick: C
    }), {
      default: withCtx(() => [
        unref(c) ? renderSlot(T.$slots, "loading", { key: 0 }, () => [
          unref(f) ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createTextVNode(toDisplayString(T.loadingText), 1)
          ], 64)),
          renderSlot(T.$slots, "loading-spinner", {}, () => [
            createVNode(Ca, {
              small: T.size !== "lg",
              label: unref(f) ? T.loadingText : void 0
            }, null, 8, ["small", "label"])
          ])
        ]) : renderSlot(T.$slots, "default", { key: 1 })
      ]),
      _: 3
    }, 16, ["class", "aria-disabled", "aria-pressed", "autocomplete", "disabled", "href", "rel", "role", "target", "type", "to", "append"]));
  }
});
var ka = defineComponent({
  __name: "BOverlay",
  props: {
    bgColor: { default: void 0 },
    blur: { default: "2px" },
    fixed: { type: [Boolean, String], default: false },
    noCenter: { type: [Boolean, String], default: false },
    noFade: { type: [Boolean, String], default: false },
    noSpinner: { type: [Boolean, String], default: false },
    noWrap: { type: [Boolean, String], default: false },
    opacity: { default: 0.85 },
    overlayTag: { default: "div" },
    show: { type: [Boolean, String], default: false },
    spinnerSmall: { type: [Boolean, String], default: false },
    spinnerType: { default: "border" },
    spinnerVariant: { default: void 0 },
    variant: { default: "light" },
    wrapTag: { default: "div" },
    zIndex: { default: 10 },
    rounded: { type: [String, Number, Boolean], default: false },
    roundedTop: { type: [String, Number, Boolean], default: void 0 },
    roundedBottom: { type: [String, Number, Boolean], default: void 0 },
    roundedStart: { type: [String, Number, Boolean], default: void 0 },
    roundedEnd: { type: [String, Number, Boolean], default: void 0 }
  },
  emits: ["click", "hidden", "shown"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = { top: 0, left: 0, bottom: 0, right: 0 }, n = d(() => o.fixed), r = d(() => o.noSpinner), s = d(() => o.noCenter), i = d(() => o.noWrap), u = d(() => o.show), c = d(() => o.spinnerSmall), f = d(() => o.rounded), b = d(() => o.roundedTop), m = d(() => o.roundedBottom), h2 = d(() => o.roundedStart), $ = d(() => o.roundedEnd), B = co(() => ({
      rounded: f.value,
      roundedTop: b.value,
      roundedBottom: m.value,
      roundedStart: h2.value,
      roundedEnd: $.value
    })), v = toRef(
      () => o.variant !== null && !o.bgColor ? `bg-${o.variant}` : ""
    ), S = toRef(() => u.value ? true : null), y = computed(() => ({
      type: o.spinnerType,
      variant: o.spinnerVariant,
      small: c.value
    })), _ = computed(() => ({
      ...l,
      zIndex: o.zIndex || 10
    })), C = computed(() => ({
      "position-absolute": !i.value || !n.value,
      "position-fixed": i.value && n.value
    })), T = computed(() => [v.value, B.value]), k = computed(() => ({
      ...l,
      opacity: o.opacity,
      backgroundColor: o.bgColor || void 0,
      backdropFilter: o.blur ? `blur(${o.blur})` : void 0
    })), N = computed(
      () => s.value ? l : {
        top: "50%",
        left: "50%",
        transform: "translateX(-50%) translateY(-50%)"
      }
    );
    return (V, A) => (openBlock(), createBlock(resolveDynamicComponent(V.wrapTag), {
      class: "b-overlay-wrap position-relative",
      "aria-busy": S.value
    }, {
      default: withCtx(() => [
        renderSlot(V.$slots, "default"),
        createVNode(Dt, {
          "no-fade": V.noFade,
          "trans-props": { enterToClass: "show" },
          name: "fade",
          onAfterEnter: A[1] || (A[1] = (E) => a("shown")),
          onAfterLeave: A[2] || (A[2] = (E) => a("hidden"))
        }, {
          default: withCtx(() => [
            unref(u) ? (openBlock(), createBlock(resolveDynamicComponent(V.overlayTag), {
              key: 0,
              class: normalizeClass(["b-overlay", C.value]),
              style: normalizeStyle(_.value),
              onClick: A[0] || (A[0] = (E) => a("click", E))
            }, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass(["position-absolute", T.value]),
                  style: normalizeStyle(k.value)
                }, null, 6),
                createBaseVNode("div", {
                  class: "position-absolute",
                  style: normalizeStyle(N.value)
                }, [
                  renderSlot(V.$slots, "overlay", normalizeProps(guardReactiveProps(y.value)), () => [
                    unref(r) ? createCommentVNode("", true) : (openBlock(), createBlock(Ca, normalizeProps(mergeProps({ key: 0 }, y.value)), null, 16))
                  ])
                ], 4)
              ]),
              _: 3
            }, 8, ["class", "style"])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["no-fade"])
      ]),
      _: 3
    }, 8, ["aria-busy"]));
  }
});
var ai = ["id", "aria-labelledby", "aria-describedby"];
var oi = ["id"];
var Lo = 1056;
var li = defineComponent({
  inheritAttrs: false,
  __name: "BModal",
  props: {
    autoFocus: { type: [Boolean, String], default: true },
    autoFocusButton: { default: void 0 },
    body: { default: void 0 },
    backdropVariant: { default: void 0 },
    bodyBgVariant: { default: null },
    bodyClass: { default: void 0 },
    bodyScrolling: { type: [Boolean, String], default: false },
    bodyTextVariant: { default: null },
    bodyVariant: { default: null },
    busy: { type: [Boolean, String], default: false },
    buttonSize: { default: "md" },
    cancelDisabled: { type: [Boolean, String], default: false },
    cancelTitle: { default: "Cancel" },
    cancelVariant: { default: "secondary" },
    centered: { type: [Boolean, String], default: false },
    contentClass: { default: void 0 },
    dialogClass: { default: void 0 },
    footerBgVariant: { default: null },
    footerBorderVariant: { default: null },
    footerClass: { default: void 0 },
    footerTextVariant: { default: null },
    footerVariant: { default: null },
    fullscreen: { type: [Boolean, String], default: false },
    headerBgVariant: { default: null },
    headerBorderVariant: { default: null },
    headerClass: { default: void 0 },
    headerCloseClass: { default: void 0 },
    headerCloseLabel: { default: "Close" },
    headerCloseVariant: { default: "secondary" },
    headerTextVariant: { default: null },
    headerVariant: { default: null },
    hideBackdrop: { type: [Boolean, String], default: false },
    hideFooter: { type: [Boolean, String], default: false },
    hideHeader: { type: [Boolean, String], default: false },
    hideHeaderClose: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    lazy: { type: [Boolean, String], default: false },
    modalClass: { default: void 0 },
    modelValue: { type: [Boolean, String], default: false },
    noCloseOnBackdrop: { type: [Boolean, String], default: false },
    noCloseOnEsc: { type: [Boolean, String], default: false },
    noFade: { type: [Boolean, String], default: false },
    okDisabled: { type: [Boolean, String], default: false },
    okOnly: { type: [Boolean, String], default: false },
    okTitle: { default: "Ok" },
    okVariant: { default: "primary" },
    scrollable: { type: [Boolean, String], default: false },
    size: { default: "md" },
    teleportDisabled: { type: [Boolean, String], default: false },
    teleportTo: { default: "body" },
    title: { default: void 0 },
    titleClass: { default: void 0 },
    titleSrOnly: { type: [Boolean, String], default: false },
    titleTag: { default: "h5" },
    transProps: { default: void 0 }
  },
  emits: ["cancel", "close", "hidden", "hide", "hide-prevented", "ok", "show", "show-prevented", "shown", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = useSlots(), r = Pe(() => a.id, "modal"), s = _e(a, "modelValue", l, { passive: true }), i = d(() => a.busy), u = d(() => a.lazy), c = d(() => a.cancelDisabled), f = d(() => a.centered), b = d(() => a.hideBackdrop), m = d(() => a.hideFooter), h2 = d(() => a.hideHeader), $ = d(() => a.hideHeaderClose), B = d(s), v = d(() => a.noCloseOnBackdrop), S = d(() => a.noCloseOnEsc), y = d(() => a.noFade), _ = d(() => a.autoFocus), C = d(() => a.okDisabled), T = d(() => a.okOnly), k = d(() => a.scrollable), N = d(() => a.titleSrOnly), V = d(() => a.teleportDisabled), A = d(() => a.bodyScrolling), E = d(() => a.fullscreen), K = ref(null), oe = ref(null), F = ref(null), z = ref(null), D = ref(B.value), J = ref(false);
    Ge(
      "Escape",
      () => {
        U("esc");
      },
      { target: K }
    ), nn(B, A);
    const { focused: ie } = De(K, {
      initialValue: B.value && a.autoFocusButton === void 0
    }), { focused: te } = De(oe, {
      initialValue: B.value && a.autoFocusButton === "ok"
    }), { focused: he } = De(F, {
      initialValue: B.value && a.autoFocusButton === "cancel"
    }), { focused: Oe } = De(z, {
      initialValue: B.value && a.autoFocusButton === "close"
    }), ve = computed(() => [
      a.modalClass,
      {
        fade: !y.value,
        show: D.value
      }
    ]), ge = toRef(
      () => u.value === false || u.value === true && J.value === true || u.value === true && B.value === true
    ), ke = toRef(
      () => a.backdropVariant !== void 0 ? a.backdropVariant : b.value ? "transparent" : "dark"
    ), Ce = toRef(() => !He(n["header-close"])), M = computed(() => [
      a.dialogClass,
      {
        "modal-fullscreen": E.value === true,
        [`modal-fullscreen-${E.value}-down`]: typeof E.value == "string",
        [`modal-${a.size}`]: a.size !== "md",
        "modal-dialog-centered": f.value,
        "modal-dialog-scrollable": k.value
      }
    ]), X = it(() => ({
      bgVariant: a.bodyBgVariant,
      textVariant: a.bodyTextVariant,
      variant: a.bodyVariant
    })), L = computed(() => [a.bodyClass, X.value]), j = it(() => ({
      bgVariant: a.headerBgVariant,
      textVariant: a.headerTextVariant,
      variant: a.headerVariant
    })), Q = computed(() => [
      a.headerClass,
      j.value,
      {
        [`border-${a.headerBorderVariant}`]: a.headerBorderVariant !== null
      }
    ]), Z = computed(() => ({
      variant: Ce.value ? a.headerCloseVariant : void 0,
      class: a.headerCloseClass
    })), Y = it(() => ({
      bgVariant: a.footerBgVariant,
      textVariant: a.footerTextVariant,
      variant: a.footerVariant
    })), pe = computed(() => [
      a.footerClass,
      Y.value,
      {
        [`border-${a.footerBorderVariant}`]: a.footerBorderVariant !== null
      }
    ]), ne = computed(() => [
      a.titleClass,
      {
        "visually-hidden": N.value
      }
    ]), Be = toRef(() => c.value || i.value), ue = toRef(() => C.value || i.value), x = (be, Ie = {}) => new Vt(be, {
      cancelable: false,
      target: K.value || null,
      relatedTarget: null,
      trigger: null,
      ...Ie,
      componentId: r.value
    });
    watch(B, (be, Ie) => {
      be !== Ie && (be === true ? re() : U());
    });
    const U = (be = "") => {
      if (be === "backdrop" && v.value || be === "esc" && S.value) {
        l("hide-prevented");
        return;
      }
      const Ie = x("hide", { cancelable: be !== "", trigger: be });
      if (be === "ok" && l(be, Ie), be === "cancel" && l(be, Ie), be === "close" && l(be, Ie), l("hide", Ie), Ie.defaultPrevented) {
        l("hide-prevented"), s.value || (s.value = true);
        return;
      }
      s.value && (s.value = false);
    }, re = () => {
      if (D.value)
        return;
      const be = x("show", { cancelable: true });
      if (l("show", be), be.defaultPrevented) {
        s.value && (s.value = false), l("show-prevented");
        return;
      }
      s.value || (s.value = true);
    }, Te = () => {
      _.value !== false && (a.autoFocusButton === "ok" ? te.value = true : a.autoFocusButton === "close" ? Oe.value = true : a.autoFocusButton === "cancel" ? he.value = true : ie.value = true);
    }, $e = () => {
      re();
    }, Ve = () => {
      D.value = true, Te(), l("shown", x("shown")), u.value === true && (J.value = true);
    }, ot = () => {
      D.value = false;
    }, lt = () => {
      l("hidden", x("hidden")), u.value === true && (J.value = false);
    }, { activePosition: qt, activeModalCount: Ta } = Wr(D), Fn = computed(() => ({
      // Make sure that newly opened modals have a higher z-index than currently active ones.
      // All active modals have a z-index of ('defaultZIndex' - 'stackSize' - 'positionInStack').
      //
      // This means inactive modals will already be higher than active ones when opened.
      "z-index": D.value ? Lo - (((Ta == null ? void 0 : Ta.value) ?? 0) - ((qt == null ? void 0 : qt.value) ?? 0)) : Lo
    }));
    Ne(K, "bv-toggle", () => {
      B.value ? U() : re();
    });
    const Et = computed(() => ({
      cancel: () => {
        U("cancel");
      },
      close: () => {
        U("close");
      },
      hide: U,
      ok: () => {
        U("ok");
      },
      visible: B.value
    }));
    return t({
      hide: U,
      id: r,
      show: re
    }), (be, Ie) => {
      var bo;
      return openBlock(), createBlock(Teleport, {
        to: be.teleportTo,
        disabled: unref(V)
      }, [
        createVNode(Dt, mergeProps({ "no-fade": true }, be.transProps, {
          "trans-props": { enterToClass: "show", ...(bo = be.transProps) == null ? void 0 : bo.transProps },
          onBeforeEnter: $e,
          onAfterEnter: Ve,
          onLeave: ot,
          onAfterLeave: lt
        }), {
          default: withCtx(() => [
            withDirectives(createBaseVNode("div", mergeProps({
              id: unref(r),
              ref_key: "element",
              ref: K,
              class: ["modal", ve.value],
              role: "dialog",
              "aria-labelledby": unref(h2) ? void 0 : `${unref(r)}-label`,
              "aria-describedby": `${unref(r)}-body`,
              tabindex: "-1"
            }, be.$attrs, { style: Fn.value }), [
              createBaseVNode("div", {
                class: normalizeClass(["modal-dialog", M.value])
              }, [
                ge.value ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(["modal-content", be.contentClass])
                }, [
                  unref(h2) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(["modal-header", Q.value])
                  }, [
                    renderSlot(be.$slots, "header", normalizeProps(guardReactiveProps(Et.value)), () => [
                      (openBlock(), createBlock(resolveDynamicComponent(be.titleTag), {
                        id: `${unref(r)}-label`,
                        class: normalizeClass(["modal-title", ne.value])
                      }, {
                        default: withCtx(() => [
                          renderSlot(be.$slots, "title", normalizeProps(guardReactiveProps(Et.value)), () => [
                            createTextVNode(toDisplayString(be.title), 1)
                          ], true)
                        ]),
                        _: 3
                      }, 8, ["id", "class"])),
                      unref($) ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                        Ce.value ? (openBlock(), createBlock(Bt, mergeProps({ key: 0 }, Z.value, {
                          onClick: Ie[0] || (Ie[0] = (ea) => U("close"))
                        }), {
                          default: withCtx(() => [
                            renderSlot(be.$slots, "header-close", {}, void 0, true)
                          ]),
                          _: 3
                        }, 16)) : (openBlock(), createBlock(jt, mergeProps({
                          key: 1,
                          "aria-label": be.headerCloseLabel
                        }, Z.value, {
                          onClick: Ie[1] || (Ie[1] = (ea) => U("close"))
                        }), null, 16, ["aria-label"]))
                      ], 64))
                    ], true)
                  ], 2)),
                  createBaseVNode("div", {
                    id: `${unref(r)}-body`,
                    class: normalizeClass(["modal-body", L.value])
                  }, [
                    renderSlot(be.$slots, "default", normalizeProps(guardReactiveProps(Et.value)), () => [
                      createTextVNode(toDisplayString(be.body), 1)
                    ], true)
                  ], 10, oi),
                  unref(m) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(["modal-footer", pe.value])
                  }, [
                    renderSlot(be.$slots, "footer", normalizeProps(guardReactiveProps(Et.value)), () => [
                      renderSlot(be.$slots, "cancel", normalizeProps(guardReactiveProps(Et.value)), () => [
                        unref(T) ? createCommentVNode("", true) : (openBlock(), createBlock(Bt, {
                          key: 0,
                          ref_key: "cancelButton",
                          ref: F,
                          disabled: Be.value,
                          size: be.buttonSize,
                          variant: be.cancelVariant,
                          onClick: Ie[2] || (Ie[2] = (ea) => U("cancel"))
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(be.cancelTitle), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled", "size", "variant"]))
                      ], true),
                      renderSlot(be.$slots, "ok", normalizeProps(guardReactiveProps(Et.value)), () => [
                        createVNode(Bt, {
                          ref_key: "okButton",
                          ref: oe,
                          disabled: ue.value,
                          size: be.buttonSize,
                          variant: be.okVariant,
                          onClick: Ie[3] || (Ie[3] = (ea) => U("ok"))
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(be.okTitle), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled", "size", "variant"])
                      ], true)
                    ], true)
                  ], 2))
                ], 2)) : createCommentVNode("", true)
              ], 2),
              renderSlot(be.$slots, "backdrop", {}, () => [
                createVNode(ka, {
                  variant: ke.value,
                  show: unref(B),
                  "no-spinner": "",
                  fixed: "",
                  "no-wrap": "",
                  blur: null,
                  onClick: Ie[4] || (Ie[4] = (ea) => U("backdrop"))
                }, null, 8, ["variant", "show"])
              ], true)
            ], 16, ai), [
              [vShow, unref(B)]
            ])
          ]),
          _: 3
        }, 16, ["trans-props"])
      ], 8, ["to", "disabled"]);
    };
  }
});
var $a = (e, t) => {
  const o = e.__vccOpts || e;
  for (const [a, l] of t)
    o[a] = l;
  return o;
};
var Ra = $a(li, [["__scopeId", "data-v-e2619669"]]);
var ni = {
  install(e) {
    const t = shallowRef([]), o = () => {
      let r = () => {
      };
      return {
        value: new Promise((i) => {
          r = i;
        }),
        resolve: r
      };
    }, a = (r) => {
      const s = o(), i = Symbol();
      return t.value = [
        ...t.value,
        computed(() => ({
          component: toValue(r.component) ?? Ra,
          props: { ...toValue(r.props), _isConfirm: false, _promise: s, _self: i, _modelValue: true }
        }))
      ], s.value;
    }, l = (r) => {
      const s = o(), i = Symbol();
      return t.value = [
        ...t.value,
        computed(() => ({
          component: toValue(r.component) ?? Ra,
          props: { ...toValue(r.props), _isConfirm: true, _promise: s, _self: i, _modelValue: true }
        }))
      ], s.value;
    }, n = (r) => {
      t.value = t.value.filter((s) => s.value.props._self !== r);
    };
    e.provide(Ul, {
      modals: t,
      remove: n,
      show: a,
      confirm: l
    });
  }
};
var si = {
  install(e) {
    const t = shallowRef([]), o = toRef(() => t.value.length), a = toRef(() => t.value[t.value.length - 1]), l = (u) => {
      t.value = [...t.value, u];
    }, n = (u) => {
      t.value = t.value.filter((c) => c.uid !== u.uid);
    }, r = shallowRef([]), s = (u) => {
      r.value = [...r.value, u];
    }, i = (u) => {
      r.value = r.value.filter((c) => c.uid !== u.uid);
    };
    e.provide(Xl, {
      stack: t,
      countStack: o,
      lastStack: a,
      registry: r,
      pushStack: l,
      removeStack: n,
      pushRegistry: s,
      removeRegistry: i
    });
  }
};
var ri = {
  install(e, t) {
    var i, u;
    const l = typeof (t == null ? void 0 : t.rtl) == "boolean" ? false : ((i = t == null ? void 0 : t.rtl) == null ? void 0 : i.rtlInitial) ?? false, n = typeof (t == null ? void 0 : t.rtl) == "boolean" ? void 0 : ((u = t == null ? void 0 : t.rtl) == null ? void 0 : u.localeInitial) ?? void 0, r = ref(l), s = ref(n);
    e.provide(Wl, { isRtl: r, locale: s });
  }
};
var ii = ["id"];
var ui = defineComponent({
  __name: "BAccordion",
  props: {
    flush: { type: [Boolean, String], default: false },
    free: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    modelValue: { default: void 0 }
  },
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const o = e, l = _e(o, "modelValue", t, { passive: true }), n = Pe(() => o.id, "accordion"), r = d(() => o.flush), s = d(() => o.free), i = computed(() => ({
      "accordion-flush": r.value
    }));
    return provide(xl, {
      openItem: readonly(l),
      free: s,
      setOpenItem: (u) => {
        l.value = u;
      }
    }), (u, c) => (openBlock(), createElementBlock("div", {
      id: unref(n),
      class: normalizeClass(["accordion", i.value])
    }, [
      renderSlot(u.$slots, "default")
    ], 10, ii));
  }
});
var fn = defineComponent({
  inheritAttrs: false,
  __name: "BCollapse",
  props: {
    horizontal: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    isNav: { type: [Boolean, String], default: false },
    modelValue: { type: [Boolean, String], default: false },
    skipAnimation: { type: [Boolean, String], default: false },
    tag: { default: "div" },
    toggle: { type: [Boolean, String], default: false },
    visible: { type: [Boolean, String], default: false }
  },
  emits: ["hidden", "hide", "hide-prevented", "show", "show-prevented", "shown", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = (E, K = {}) => new Vt(E, {
      cancelable: false,
      target: h2.value || null,
      relatedTarget: null,
      trigger: null,
      ...K,
      componentId: m.value
    }), r = _e(a, "modelValue", l, { passive: true }), s = d(r), i = d(() => a.toggle), u = d(() => a.horizontal), c = d(() => a.isNav), f = d(() => a.visible), b = d(() => a.skipAnimation), m = Pe(() => a.id, "collapse"), h2 = ref(null), $ = ref(false), B = ref(s.value), v = computed(() => ({
      show: B.value,
      "navbar-collapse": c.value,
      collapsing: $.value,
      closing: B.value && !s.value,
      "collapse-horizontal": u.value
    })), S = () => {
      r.value = false;
    }, y = () => {
      r.value = true;
    }, _ = () => {
      r.value = !s.value;
    }, C = computed(() => ({
      toggle: _,
      open: y,
      close: S,
      id: m.value,
      visible: s.value
    }));
    let T, k, N = b.value;
    const V = () => {
      const E = n("show", { cancelable: true });
      if (l("show", E), E.defaultPrevented) {
        l("show-prevented");
        return;
      }
      clearTimeout(k), clearTimeout(T), B.value = true, !N && ($.value = true, nextTick(() => {
        h2.value !== null && (u.value ? h2.value.style.width = `${h2.value.scrollWidth}px` : h2.value.style.height = `${h2.value.scrollHeight}px`, T = setTimeout(() => {
          $.value = false, l("shown"), h2.value !== null && (h2.value.style.height = "", h2.value.style.width = "");
        }, Na(h2.value)));
      }));
    }, A = () => {
      const E = n("hide", { cancelable: true });
      if (l("hide", E), E.defaultPrevented) {
        l("hide-prevented");
        return;
      }
      if (clearTimeout(T), clearTimeout(k), h2.value !== null) {
        if (N) {
          B.value = false;
          return;
        }
        $.value ? (h2.value.style.height = "", h2.value.style.width = "") : u.value ? h2.value.style.width = `${h2.value.scrollWidth}px` : h2.value.style.height = `${h2.value.scrollHeight}px`, h2.value.offsetHeight, $.value = true, nextTick(() => {
          h2.value !== null && (h2.value.style.height = "", h2.value.style.width = "", k = setTimeout(() => {
            B.value = false, $.value = false, l("hidden");
          }, Na(h2.value)));
        });
      }
    };
    return watch(r, () => {
      s.value ? V() : A();
    }), onMounted(() => {
      h2.value !== null && !s.value && i.value && nextTick(() => {
        r.value = true;
      });
    }), watch(b, (E) => {
      N = E;
    }), f.value && (N = true, r.value = true, nextTick(() => {
      N = b.value;
    })), watch(f, (E) => {
      N = true, E ? y() : S(), nextTick(() => {
        N = b.value;
      });
    }), Ne(h2, "bv-toggle", () => {
      r.value = !s.value;
    }), t({
      close: S,
      isNav: c,
      open: y,
      toggle: _,
      visible: readonly(B)
    }), provide(so, {
      id: m,
      close: S,
      open: y,
      toggle: _,
      visible: readonly(B),
      isNav: c
    }), (E, K) => (openBlock(), createElementBlock(Fragment, null, [
      renderSlot(E.$slots, "header", normalizeProps(guardReactiveProps(C.value))),
      (openBlock(), createBlock(resolveDynamicComponent(E.tag), mergeProps({
        id: unref(m),
        ref_key: "element",
        ref: h2,
        class: ["collapse", v.value],
        "is-nav": unref(c)
      }, E.$attrs), {
        default: withCtx(() => [
          renderSlot(E.$slots, "default", normalizeProps(guardReactiveProps(C.value)))
        ]),
        _: 3
      }, 16, ["id", "class", "is-nav"])),
      renderSlot(E.$slots, "footer", normalizeProps(guardReactiveProps(C.value)))
    ], 64));
  }
});
var di = ["aria-expanded", "aria-controls", "onClick"];
var ci = defineComponent({
  inheritAttrs: false,
  __name: "BAccordionItem",
  props: {
    bodyAttrs: { default: void 0 },
    bodyClass: { default: void 0 },
    buttonAttrs: { default: void 0 },
    buttonClass: { default: void 0 },
    collapseClass: { default: void 0 },
    headerAttrs: { default: void 0 },
    headerClass: { default: void 0 },
    headerTag: { default: "h2" },
    horizontal: { type: [Boolean, String], default: void 0 },
    id: { default: void 0 },
    isNav: { type: [Boolean, String], default: void 0 },
    modelValue: { type: Boolean, default: false },
    tag: { default: void 0 },
    title: { default: void 0 },
    toggle: { type: [Boolean, String], default: void 0 },
    visible: { type: [Boolean, String], default: false },
    wrapperAttrs: { default: void 0 }
  },
  emits: ["hidden", "hide", "hide-prevented", "show", "show-prevented", "shown", "update:modelValue"],
  setup(e, { emit: t }) {
    const { class: o, ...a } = useAttrs(), l = e, n = t, r = _e(l, "modelValue", n, { passive: true }), s = inject(xl, null), i = Pe(() => l.id, "accordion_item");
    return onMounted(() => {
      r.value && !(s != null && s.free.value) && (s == null || s.setOpenItem(i.value)), !r.value && (s == null ? void 0 : s.openItem.value) === i.value && (r.value = true);
    }), watch(
      () => s == null ? void 0 : s.openItem.value,
      () => r.value = (s == null ? void 0 : s.openItem.value) === i.value && !(s != null && s.free.value)
    ), watch(r, () => {
      r.value && !(s != null && s.free.value) && (s == null || s.setOpenItem(i.value));
    }), (u, c) => (openBlock(), createElementBlock("div", mergeProps({ class: "accordion-item" }, u.wrapperAttrs, { class: unref(o) }), [
      createVNode(fn, mergeProps({
        id: unref(i),
        modelValue: unref(r),
        "onUpdate:modelValue": c[0] || (c[0] = (f) => isRef(r) ? r.value = f : null),
        class: ["accordion-collapse", u.collapseClass],
        "aria-labelledby": `${unref(i)}-heading`
      }, a, {
        tag: u.tag,
        toggle: u.toggle,
        horizontal: u.horizontal,
        visible: u.visible,
        "is-nav": u.isNav,
        onShow: c[1] || (c[1] = (f) => n("show", f)),
        onShown: c[2] || (c[2] = (f) => n("shown")),
        onHide: c[3] || (c[3] = (f) => n("hide", f)),
        onHidden: c[4] || (c[4] = (f) => n("hidden")),
        onHidePrevented: c[5] || (c[5] = (f) => n("hide-prevented")),
        onShowPrevented: c[6] || (c[6] = (f) => n("show-prevented"))
      }), {
        header: withCtx(({ visible: f, toggle: b }) => [
          (openBlock(), createBlock(resolveDynamicComponent(u.headerTag), mergeProps({
            id: `${unref(i)}-heading`,
            class: ["accordion-header", u.headerClass]
          }, u.headerAttrs), {
            default: withCtx(() => [
              createBaseVNode("button", mergeProps({ class: "accordion-button" }, u.buttonAttrs, {
                class: [{ collapsed: !f }, u.buttonClass],
                type: "button",
                "aria-expanded": f ? "true" : "false",
                "aria-controls": unref(i),
                onClick: b
              }), [
                renderSlot(u.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString(u.title), 1)
                ])
              ], 16, di)
            ]),
            _: 2
          }, 1040, ["id", "class"]))
        ]),
        default: withCtx(() => [
          createBaseVNode("div", mergeProps({ class: "accordion-body" }, u.bodyAttrs, { class: u.bodyClass }), [
            renderSlot(u.$slots, "default")
          ], 16)
        ]),
        _: 3
      }, 16, ["id", "modelValue", "class", "aria-labelledby", "tag", "toggle", "horizontal", "visible", "is-nav"])
    ], 16));
  }
});
var fi = defineComponent({
  __name: "BAlert",
  props: {
    closeClass: { default: void 0 },
    closeContent: { default: void 0 },
    closeLabel: { default: "Close" },
    closeVariant: { default: "secondary" },
    dismissible: { type: [Boolean, String], default: false },
    fade: { type: [Boolean, String], default: false },
    immediate: { type: [Boolean, String], default: true },
    interval: { default: 1e3 },
    modelValue: { type: [Boolean, Number], default: false },
    noHoverPause: { type: [Boolean, String], default: false },
    showOnPause: { type: [Boolean, String], default: true },
    variant: { default: "info" }
  },
  emits: ["close", "close-countdown", "closed", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = useSlots(), r = ref(null), s = _e(a, "modelValue", l), i = lo(r), u = d(() => a.dismissible), c = d(() => a.fade), f = d(() => a.immediate), b = d(() => a.showOnPause), m = d(() => a.noHoverPause), h2 = Se(() => a.interval), $ = toRef(() => !He(n.close)), B = toRef(() => typeof s.value == "boolean" ? 0 : s.value), v = computed(() => ({
      [`alert-${a.variant}`]: a.variant !== null,
      "alert-dismissible": u.value
    })), S = computed(() => [a.closeClass, { "btn-close-custom": $.value }]), {
      isActive: y,
      pause: _,
      restart: C,
      resume: T,
      stop: k,
      isPaused: N,
      value: V
    } = Yl(B, h2, {
      immediate: typeof s.value == "number" && f.value
    }), A = toRef(
      () => typeof s.value == "boolean" ? s.value : y.value || b.value && N.value
    ), E = computed(() => ({
      variant: $.value ? a.closeVariant : void 0,
      class: S.value
    }));
    watchEffect(() => {
      l("close-countdown", V.value);
    });
    const K = () => {
      l("close"), typeof s.value == "boolean" ? s.value = false : (s.value = 0, k()), l("closed");
    }, oe = () => {
      m.value || _();
    };
    return watch(i, (F) => {
      if (F) {
        oe();
        return;
      }
      T();
    }), onBeforeUnmount(k), t({
      pause: _,
      restart: C,
      resume: T,
      stop: k
    }), (F, z) => (openBlock(), createBlock(Dt, {
      "no-fade": !unref(c),
      "trans-props": { enterToClass: "show" }
    }, {
      default: withCtx(() => [
        A.value ? (openBlock(), createElementBlock("div", {
          key: 0,
          ref_key: "element",
          ref: r,
          class: normalizeClass(["alert", v.value]),
          role: "alert",
          "aria-live": "polite",
          "aria-atomic": "true"
        }, [
          renderSlot(F.$slots, "default", {}, void 0, true),
          unref(u) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            $.value || F.closeContent ? (openBlock(), createBlock(Bt, mergeProps({ key: 0 }, E.value, { onClick: K }), {
              default: withCtx(() => [
                renderSlot(F.$slots, "close", {}, () => [
                  createTextVNode(toDisplayString(F.closeContent), 1)
                ], true)
              ]),
              _: 3
            }, 16)) : (openBlock(), createBlock(jt, mergeProps({
              key: 1,
              "aria-label": F.closeLabel
            }, E.value, { onClick: K }), null, 16, ["aria-label"]))
          ], 64)) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["no-fade"]));
  }
});
var vi = $a(fi, [["__scopeId", "data-v-80abc89a"]]);
var pi = {
  key: 0,
  class: "b-avatar-custom"
};
var mi = {
  key: 1,
  class: "b-avatar-img"
};
var gi = ["src", "alt"];
var zo = 0.4;
var bi = defineComponent({
  __name: "BAvatar",
  props: {
    alt: { default: "avatar" },
    badge: { type: [Boolean, String], default: false },
    badgeBgVariant: { default: null },
    badgeOffset: { default: void 0 },
    badgeStart: { type: [Boolean, String], default: false },
    badgeTextVariant: { default: null },
    badgeTop: { type: [Boolean, String], default: false },
    badgeVariant: { default: "primary" },
    button: { type: [Boolean, String], default: false },
    buttonType: { default: "button" },
    icon: { type: [String, Boolean], default: void 0 },
    size: { default: void 0 },
    square: { type: [Boolean, String], default: false },
    src: { default: void 0 },
    text: { default: void 0 },
    active: { type: [Boolean, String], default: void 0 },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    variant: { default: "secondary" },
    bgVariant: { default: null },
    textVariant: { default: null },
    rounded: { type: [String, Number, Boolean], default: false },
    roundedTop: { type: [String, Number, Boolean], default: void 0 },
    roundedBottom: { type: [String, Number, Boolean], default: void 0 },
    roundedStart: { type: [String, Number, Boolean], default: void 0 },
    roundedEnd: { type: [String, Number, Boolean], default: void 0 }
  },
  emits: ["click", "img-error"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = useSlots(), { computedLink: n, computedLinkProps: r } = At(o), s = inject(Rl, null), i = ["sm", null, "lg"], u = zo * 0.7, c = d(() => o.badgeStart), f = d(() => o.badgeTop), b = d(() => o.button), m = d(() => o.disabled), h2 = d(() => o.square), $ = d(() => o.rounded), B = d(() => o.roundedTop), v = d(() => o.roundedBottom), S = d(() => o.roundedStart), y = d(() => o.roundedEnd), _ = toRef(() => !He(l.default)), C = toRef(() => !He(l.badge)), T = toRef(() => !!o.badge || o.badge === "" || C.value), k = toRef(() => (s == null ? void 0 : s.size.value) ?? h2.value), N = Pa(() => o.size), V = Pa(() => s == null ? void 0 : s.size.value), A = computed(() => V.value ?? N.value), E = toRef(() => (s == null ? void 0 : s.variant.value) ?? o.variant), K = toRef(() => (s == null ? void 0 : s.rounded.value) ?? $.value), oe = toRef(() => (s == null ? void 0 : s.roundedTop.value) ?? B.value), F = toRef(
      () => (s == null ? void 0 : s.roundedBottom.value) ?? v.value
    ), z = toRef(
      () => (s == null ? void 0 : s.roundedStart.value) ?? S.value
    ), D = toRef(() => (s == null ? void 0 : s.roundedEnd.value) ?? y.value), J = co(() => ({
      rounded: K.value,
      roundedTop: oe.value,
      roundedBottom: F.value,
      roundedStart: z.value,
      roundedEnd: D.value
    })), ie = it(() => ({
      variant: o.badgeVariant,
      bgVariant: o.badgeBgVariant,
      textVariant: o.badgeTextVariant
    })), te = toRef(() => o.badge === true ? "" : o.badge), he = toRef(() => (s == null ? void 0 : s.textVariant.value) ?? o.textVariant), Oe = toRef(() => (s == null ? void 0 : s.bgVariant.value) ?? o.bgVariant), ve = it(() => ({
      bgVariant: Oe.value,
      textVariant: he.value,
      variant: E.value
    })), ge = computed(() => [
      ve.value,
      // Square overwrites all else
      k.value === true ? void 0 : J.value,
      {
        [`b-avatar-${o.size}`]: !!o.size && i.indexOf(N.value) !== -1,
        [`btn-${E.value}`]: b.value ? E.value !== null : false,
        badge: !b.value && E.value !== null && _.value,
        btn: b.value,
        // Square is the same as rounded-0 class
        "rounded-0": k.value === true
      }
    ]), ke = computed(() => {
      const Z = o.badgeOffset || "0px";
      return {
        fontSize: (i.indexOf(A.value || null) === -1 ? `calc(${A.value} * ${u})` : "") || "",
        top: f.value ? Z : "",
        bottom: f.value ? "" : Z,
        left: c.value ? Z : "",
        right: c.value ? "" : Z
      };
    }), Ce = computed(() => {
      const Z = i.indexOf(A.value || null) === -1 ? `calc(${A.value} * ${zo})` : null;
      return Z ? { fontSize: Z } : {};
    }), M = computed(() => {
      var pe;
      const Z = ((pe = s == null ? void 0 : s.overlapScale) == null ? void 0 : pe.value) || 0, Y = A.value && Z ? `calc(${A.value} * -${Z})` : null;
      return Y ? { marginLeft: Y, marginRight: Y } : {};
    }), X = toRef(
      () => n.value ? ft : b.value ? "button" : "span"
    ), L = computed(() => ({
      ...M.value,
      width: A.value ?? void 0,
      height: A.value ?? void 0
    })), j = (Z) => {
      !m.value && (n.value || b.value) && a("click", Z);
    }, Q = (Z) => {
      a("img-error", Z);
    };
    return (Z, Y) => (openBlock(), createBlock(resolveDynamicComponent(X.value), mergeProps({
      class: ["b-avatar", ge.value],
      style: L.value
    }, unref(r), {
      type: unref(b) && !unref(n) ? o.buttonType : void 0,
      disabled: unref(m) || null,
      onClick: j
    }), {
      default: withCtx(() => [
        _.value ? (openBlock(), createElementBlock("span", pi, [
          renderSlot(Z.$slots, "default")
        ])) : Z.src ? (openBlock(), createElementBlock("span", mi, [
          createBaseVNode("img", {
            src: Z.src,
            alt: Z.alt,
            onError: Q
          }, null, 40, gi)
        ])) : Z.text ? (openBlock(), createElementBlock("span", {
          key: 2,
          class: "b-avatar-text",
          style: normalizeStyle(Ce.value)
        }, toDisplayString(Z.text), 5)) : createCommentVNode("", true),
        T.value ? (openBlock(), createElementBlock("span", {
          key: 3,
          class: normalizeClass(["b-avatar-badge", unref(ie)]),
          style: normalizeStyle(ke.value)
        }, [
          renderSlot(Z.$slots, "badge", {}, () => [
            createTextVNode(toDisplayString(te.value), 1)
          ])
        ], 6)) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16, ["class", "style", "type", "disabled"]));
  }
});
var yi = defineComponent({
  __name: "BAvatarGroup",
  props: {
    overlap: { default: 0.3 },
    size: { default: void 0 },
    square: { type: [Boolean, String], default: false },
    tag: { default: "div" },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null },
    rounded: { type: [String, Number, Boolean], default: false },
    roundedTop: { type: [String, Number, Boolean], default: void 0 },
    roundedBottom: { type: [String, Number, Boolean], default: void 0 },
    roundedStart: { type: [String, Number, Boolean], default: void 0 },
    roundedEnd: { type: [String, Number, Boolean], default: void 0 }
  },
  setup(e) {
    const t = e, o = d(() => t.square), a = d(() => t.rounded), l = d(() => t.roundedTop), n = d(() => t.roundedBottom), r = d(() => t.roundedStart), s = d(() => t.roundedEnd), i = Se(() => t.overlap), u = Pa(() => t.size), c = toRef(() => Math.min(Math.max(i.value, 0), 1) / 2), f = computed(() => {
      const b = u.value ? `calc(${u.value} * ${c.value})` : null;
      return b ? { paddingLeft: b, paddingRight: b } : {};
    });
    return provide(Rl, {
      overlapScale: c,
      size: toRef(() => t.size),
      square: o,
      rounded: a,
      roundedTop: l,
      roundedBottom: n,
      roundedStart: r,
      roundedEnd: s,
      variant: toRef(() => t.variant),
      bgVariant: toRef(() => t.bgVariant),
      textVariant: toRef(() => t.textVariant)
    }), (b, m) => (openBlock(), createBlock(resolveDynamicComponent(b.tag), {
      class: "b-avatar-group",
      role: "group"
    }, {
      default: withCtx(() => [
        createBaseVNode("div", {
          class: "b-avatar-group-inner",
          style: normalizeStyle(f.value)
        }, [
          renderSlot(b.$slots, "default")
        ], 4)
      ]),
      _: 3
    }));
  }
});
var hi = defineComponent({
  __name: "BBadge",
  props: {
    dotIndicator: { type: [Boolean, String], default: false },
    pill: { type: [Boolean, String], default: false },
    tag: { default: "span" },
    textIndicator: { type: [Boolean, String], default: false },
    active: { type: [Boolean, String], default: void 0 },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    variant: { default: "secondary" },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(e) {
    const t = e, o = d(() => t.pill), a = d(() => t.textIndicator), l = d(() => t.dotIndicator), n = d(() => t.active), r = d(() => t.disabled), s = it(t), { computedLink: i, computedLinkProps: u } = At(t, [
      "active",
      "activeClass",
      "append",
      "disabled",
      "href",
      "rel",
      "replace",
      "routerComponentName",
      "target",
      "to",
      "opacity",
      "opacityHover",
      "underlineVariant",
      "underlineOffset",
      "underlineOffsetHover",
      "underlineOpacity",
      "underlineOpacityHover",
      "icon"
    ]), c = toRef(() => i.value ? ft : t.tag), f = computed(() => [
      s.value,
      {
        active: n.value,
        disabled: r.value,
        "rounded-pill": o.value,
        "position-absolute top-0 start-100 translate-middle": a.value || l.value,
        "p-2 border border-light rounded-circle": l.value,
        "text-decoration-none": i.value
      }
    ]);
    return (b, m) => (openBlock(), createBlock(resolveDynamicComponent(c.value), mergeProps({
      class: ["badge", f.value]
    }, unref(u)), {
      default: withCtx(() => [
        renderSlot(b.$slots, "default")
      ]),
      _: 3
    }, 16, ["class"]));
  }
});
var vn = defineComponent({
  __name: "BBreadcrumbItem",
  props: {
    ariaCurrent: { default: "location" },
    text: { default: void 0 },
    active: { type: [Boolean, String], default: false },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    variant: { default: void 0 }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = d(() => o.active), n = d(() => o.disabled), r = computed(() => ({
      active: l.value
    })), s = toRef(() => l.value ? "span" : ft), i = toRef(() => l.value ? o.ariaCurrent : void 0), u = computed(
      () => s.value !== "span" ? io(o, [
        "active",
        "activeClass",
        "append",
        "disabled",
        "href",
        "rel",
        "replace",
        "routerComponentName",
        "target",
        "to",
        "variant",
        "opacity",
        "opacityHover",
        "underlineVariant",
        "underlineOffset",
        "underlineOffsetHover",
        "underlineOpacity",
        "underlineOpacityHover",
        "icon"
      ]) : {}
    ), c = (f) => {
      if (n.value || l.value) {
        f.preventDefault(), f.stopImmediatePropagation();
        return;
      }
      n.value || a("click", f);
    };
    return (f, b) => (openBlock(), createElementBlock("li", {
      class: normalizeClass(["breadcrumb-item", r.value])
    }, [
      (openBlock(), createBlock(resolveDynamicComponent(s.value), mergeProps({ "aria-current": i.value }, u.value, { onClick: c }), {
        default: withCtx(() => [
          renderSlot(f.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(f.text), 1)
          ])
        ]),
        _: 3
      }, 16, ["aria-current"]))
    ], 2));
  }
});
var Bi = { "aria-label": "breadcrumb" };
var Si = { class: "breadcrumb" };
var wi = defineComponent({
  __name: "BBreadcrumb",
  props: {
    items: { default: void 0 }
  },
  setup(e) {
    const t = e, o = Kl(), a = computed(() => {
      var s;
      const l = t.items || ((s = o.items) == null ? void 0 : s.value) || [];
      let n = false;
      return l.map((i, u) => (typeof i == "string" && (i = { text: i }, u < l.length - 1 && (i.href = "#")), i.active && (n = true), !i.active && !n && (i.active = u + 1 === l.length), i));
    });
    return (l, n) => (openBlock(), createElementBlock("nav", Bi, [
      createBaseVNode("ol", Si, [
        renderSlot(l.$slots, "prepend"),
        (openBlock(true), createElementBlock(Fragment, null, renderList(a.value, (r, s) => (openBlock(), createBlock(vn, mergeProps({ key: s }, r), {
          default: withCtx(() => [
            createTextVNode(toDisplayString(r.text), 1)
          ]),
          _: 2
        }, 1040))), 128)),
        renderSlot(l.$slots, "default"),
        renderSlot(l.$slots, "append")
      ])
    ]));
  }
});
var Ci = defineComponent({
  __name: "BButtonGroup",
  props: {
    ariaLabel: { default: "Group" },
    size: { default: "md" },
    tag: { default: "div" },
    vertical: { type: [Boolean, String], default: false }
  },
  setup(e) {
    const t = e, o = d(() => t.vertical), a = computed(() => ({
      "btn-group": !o.value,
      [`btn-group-${t.size}`]: t.size !== "md",
      "btn-group-vertical": o.value
    }));
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(l.tag), {
      class: normalizeClass(a.value),
      role: "group",
      "aria-label": l.ariaLabel
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "aria-label"]));
  }
});
var ki = ["role", "aria-label"];
var $i = defineComponent({
  __name: "BButtonToolbar",
  props: {
    ariaLabel: { default: "Group" },
    justify: { type: [Boolean, String], default: false },
    role: { default: "toolbar" }
  },
  setup(e) {
    const t = e, o = d(() => t.justify), a = computed(() => ({
      "justify-content-between": o.value
    }));
    return (l, n) => (openBlock(), createElementBlock("div", {
      class: normalizeClass([a.value, "btn-toolbar"]),
      role: l.role,
      "aria-label": l.ariaLabel
    }, [
      renderSlot(l.$slots, "default")
    ], 10, ki));
  }
});
var Ti = ["src", "width", "height", "srcset", "sizes", "loading"];
var fo = defineComponent({
  __name: "BImg",
  props: {
    blank: { type: [Boolean, String], default: false },
    blankColor: { default: "transparent" },
    block: { type: [Boolean, String], default: false },
    center: { type: [Boolean, String], default: false },
    end: { type: [Boolean, String], default: false },
    fluid: { type: [Boolean, String], default: false },
    fluidGrow: { type: [Boolean, String], default: false },
    height: { default: void 0 },
    lazy: { type: [Boolean, String], default: false },
    sizes: { default: void 0 },
    src: { default: void 0 },
    srcset: { default: void 0 },
    start: { type: [Boolean, String], default: false },
    thumbnail: { type: [Boolean, String], default: false },
    width: { default: void 0 },
    rounded: { type: [String, Number, Boolean], default: false },
    roundedTop: { type: [String, Number, Boolean], default: void 0 },
    roundedBottom: { type: [String, Number, Boolean], default: void 0 },
    roundedStart: { type: [String, Number, Boolean], default: void 0 },
    roundedEnd: { type: [String, Number, Boolean], default: void 0 }
  },
  setup(e) {
    const t = e, o = d(() => t.lazy), a = d(() => t.blank), l = d(() => t.block), n = d(() => t.center), r = d(() => t.fluid), s = d(() => t.fluidGrow), i = d(() => t.start), u = d(() => t.end), c = d(() => t.thumbnail), f = Se(() => t.height ?? NaN), b = Se(() => t.width ?? NaN), m = d(() => t.rounded), h2 = d(() => t.roundedTop), $ = d(() => t.roundedBottom), B = d(() => t.roundedStart), v = d(() => t.roundedEnd), S = co(() => ({
      rounded: m.value,
      roundedTop: h2.value,
      roundedBottom: $.value,
      roundedStart: B.value,
      roundedEnd: v.value
    })), y = computed(
      () => typeof t.srcset == "string" ? t.srcset.split(",").filter((A) => A).join(",") : Array.isArray(t.srcset) ? t.srcset.filter((A) => A).join(",") : void 0
    ), _ = computed(
      () => typeof t.sizes == "string" ? t.sizes.split(",").filter((A) => A).join(",") : Array.isArray(t.sizes) ? t.sizes.filter((A) => A).join(",") : void 0
    ), C = computed(() => {
      const A = Number.isNaN(b.value) ? void 0 : b.value, E = Number.isNaN(f.value) ? void 0 : f.value;
      return a.value ? A !== void 0 && E === void 0 ? { height: A, width: A } : A === void 0 && E !== void 0 ? { height: E, width: E } : { height: 1, width: 1 } : {
        width: A,
        height: E
      };
    }), T = toRef(
      () => V(C.value.width, C.value.height, t.blankColor)
    ), k = toRef(
      () => i.value ? "float-start" : u.value ? "float-end" : n.value ? "mx-auto" : void 0
    ), N = computed(() => [
      S.value,
      {
        "img-thumbnail": c.value,
        "img-fluid": r.value || s.value,
        "w-100": s.value,
        [`${k.value}`]: k.value !== void 0,
        "d-block": l.value || n.value
      }
    ]), V = (A, E, K) => `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`<svg width="${A}" height="${E}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${A} ${E}" preserveAspectRatio="none">
    <rect width="100%" height="100%" style="fill:${K};"></rect>
    </svg>`)}`;
    return (A, E) => (openBlock(), createElementBlock("img", {
      class: normalizeClass(N.value),
      src: unref(a) ? T.value : A.src,
      width: C.value.width || void 0,
      height: C.value.height || void 0,
      srcset: unref(a) ? void 0 : y.value,
      sizes: unref(a) ? void 0 : _.value,
      loading: unref(o) ? "lazy" : "eager"
    }, null, 10, Ti));
  }
});
var vo = defineComponent({
  __name: "BCardImg",
  props: {
    bottom: { type: [Boolean, String], default: false },
    top: { type: [Boolean, String], default: false },
    blank: { type: [Boolean, String], default: void 0 },
    blankColor: { default: void 0 },
    block: { type: [Boolean, String], default: void 0 },
    center: { type: [Boolean, String], default: void 0 },
    end: { type: [Boolean, String], default: void 0 },
    fluid: { type: [Boolean, String], default: void 0 },
    fluidGrow: { type: [Boolean, String], default: void 0 },
    height: { default: void 0 },
    lazy: { type: [Boolean, String], default: void 0 },
    sizes: { default: void 0 },
    src: { default: void 0 },
    srcset: { default: void 0 },
    start: { type: [Boolean, String], default: void 0 },
    thumbnail: { type: [Boolean, String], default: void 0 },
    width: { default: void 0 },
    rounded: { type: [String, Number, Boolean], default: void 0 },
    roundedTop: { type: [String, Number, Boolean], default: void 0 },
    roundedBottom: { type: [String, Number, Boolean], default: void 0 },
    roundedStart: { type: [String, Number, Boolean], default: void 0 },
    roundedEnd: { type: [String, Number, Boolean], default: void 0 }
  },
  setup(e) {
    const t = e, o = d(() => t.bottom), a = d(() => t.end), l = d(() => t.start), n = d(() => t.top), r = toRef(
      () => n.value ? "card-img-top" : a.value ? "card-img-right" : o.value ? "card-img-bottom" : l.value ? "card-img-left" : "card-img"
    ), s = computed(() => wa(t, ["bottom", "top", "end", "start"]));
    return (i, u) => (openBlock(), createBlock(fo, mergeProps(s.value, { class: r.value }), null, 16, ["class"]));
  }
});
var _i = ["innerHTML"];
var pn = defineComponent({
  __name: "BCardHeadFoot",
  props: {
    borderVariant: { default: null },
    html: { default: void 0 },
    tag: { default: "div" },
    text: { default: void 0 },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(e) {
    const t = e, o = it(t), a = computed(() => [
      o.value,
      {
        [`border-${t.borderVariant}`]: t.borderVariant !== null
      }
    ]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(l.tag), {
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        l.html ? (openBlock(), createElementBlock("div", {
          key: 0,
          innerHTML: l.html
        }, null, 8, _i)) : renderSlot(l.$slots, "default", { key: 1 }, () => [
          createTextVNode(toDisplayString(l.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var mn = defineComponent({
  __name: "BCardHeader",
  props: {
    borderVariant: { default: void 0 },
    html: { default: void 0 },
    tag: { default: "div" },
    text: { default: void 0 },
    variant: { default: void 0 },
    bgVariant: { default: void 0 },
    textVariant: { default: void 0 }
  },
  setup(e) {
    const t = e;
    return (o, a) => (openBlock(), createBlock(pn, mergeProps({ class: "card-header" }, t), {
      default: withCtx(() => [
        renderSlot(o.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var gn = defineComponent({
  __name: "BCardTitle",
  props: {
    tag: { default: "h4" },
    text: { default: void 0 }
  },
  setup(e) {
    return (t, o) => (openBlock(), createBlock(resolveDynamicComponent(t.tag), { class: "card-title" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(t.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var bn = defineComponent({
  __name: "BCardSubtitle",
  props: {
    text: { default: void 0 },
    tag: { default: "h6" },
    textVariant: { default: "body-secondary" }
  },
  setup(e) {
    const t = e, o = computed(() => ({
      [`text-${t.textVariant}`]: t.textVariant !== null
    }));
    return (a, l) => (openBlock(), createBlock(resolveDynamicComponent(a.tag), {
      class: normalizeClass(["card-subtitle mb-2", o.value])
    }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(a.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var yn = defineComponent({
  __name: "BCardBody",
  props: {
    overlay: { type: [Boolean, String], default: false },
    subtitle: { default: void 0 },
    subtitleTag: { default: "h4" },
    subtitleTextVariant: { default: void 0 },
    tag: { default: "div" },
    text: { default: void 0 },
    title: { default: void 0 },
    titleTag: { default: "h4" },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(e) {
    const t = e, o = useSlots(), a = d(() => t.overlay), l = it(t), n = toRef(() => !He(o.title)), r = toRef(() => !He(o.subtitle)), s = computed(() => [
      l.value,
      {
        "card-img-overlay": a.value
      }
    ]);
    return (i, u) => (openBlock(), createBlock(resolveDynamicComponent(i.tag), {
      class: normalizeClass(["card-body", s.value])
    }, {
      default: withCtx(() => [
        i.title || n.value ? (openBlock(), createBlock(gn, {
          key: 0,
          tag: i.titleTag
        }, {
          default: withCtx(() => [
            renderSlot(i.$slots, "title", {}, () => [
              createTextVNode(toDisplayString(i.title), 1)
            ])
          ]),
          _: 3
        }, 8, ["tag"])) : createCommentVNode("", true),
        i.subtitle || r.value ? (openBlock(), createBlock(bn, {
          key: 1,
          tag: i.subtitleTag,
          "text-variant": i.subtitleTextVariant
        }, {
          default: withCtx(() => [
            renderSlot(i.$slots, "subtitle", {}, () => [
              createTextVNode(toDisplayString(i.subtitle), 1)
            ])
          ]),
          _: 3
        }, 8, ["tag", "text-variant"])) : createCommentVNode("", true),
        renderSlot(i.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(i.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var hn = defineComponent({
  __name: "BCardFooter",
  props: {
    borderVariant: { default: void 0 },
    html: { default: void 0 },
    tag: { default: "div" },
    text: { default: void 0 },
    variant: { default: void 0 },
    bgVariant: { default: void 0 },
    textVariant: { default: void 0 }
  },
  setup(e) {
    const t = e;
    return (o, a) => (openBlock(), createBlock(pn, mergeProps({ class: "card-footer" }, t), {
      default: withCtx(() => [
        renderSlot(o.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(o.text), 1)
        ])
      ]),
      _: 3
    }, 16));
  }
});
var Bn = defineComponent({
  __name: "BCard",
  props: {
    align: { default: void 0 },
    bodyBgVariant: { default: void 0 },
    bodyClass: { default: void 0 },
    bodyTag: { default: "div" },
    bodyText: { default: "" },
    bodyTextVariant: { default: void 0 },
    borderVariant: { default: null },
    footer: { default: void 0 },
    footerBgVariant: { default: void 0 },
    footerBorderVariant: { default: void 0 },
    footerClass: { default: void 0 },
    footerHtml: { default: "" },
    footerTag: { default: "div" },
    footerTextVariant: { default: void 0 },
    footerVariant: { default: null },
    header: { default: void 0 },
    headerBgVariant: { default: void 0 },
    headerBorderVariant: { default: void 0 },
    headerClass: { default: void 0 },
    headerHtml: { default: "" },
    headerTag: { default: "div" },
    headerTextVariant: { default: void 0 },
    headerVariant: { default: null },
    imgAlt: { default: void 0 },
    imgBottom: { type: [Boolean, String], default: false },
    imgEnd: { type: [Boolean, String], default: false },
    imgHeight: { default: void 0 },
    imgSrc: { default: void 0 },
    imgStart: { type: [Boolean, String], default: false },
    imgTop: { type: [Boolean, String], default: false },
    imgWidth: { default: void 0 },
    noBody: { type: [Boolean, String], default: false },
    overlay: { type: [Boolean, String], default: false },
    subtitle: { default: void 0 },
    subtitleTag: { default: "h6" },
    subtitleTextVariant: { default: "body-secondary" },
    tag: { default: "div" },
    title: { default: void 0 },
    titleTag: { default: "h4" },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(e) {
    const t = e, o = useSlots(), a = d(() => t.imgBottom), l = d(() => t.imgEnd), n = d(() => t.imgStart), r = d(() => t.noBody), s = toRef(() => !He(o.header)), i = toRef(() => !He(o.footer)), u = it(t), c = computed(() => [
      u.value,
      {
        [`text-${t.align}`]: t.align !== void 0,
        [`border-${t.borderVariant}`]: t.borderVariant !== null,
        "flex-row": n.value,
        "flex-row-reverse": l.value
      }
    ]), f = computed(() => ({
      src: t.imgSrc,
      alt: t.imgAlt,
      height: t.imgHeight,
      width: t.imgWidth,
      bottom: t.imgBottom,
      end: t.imgEnd,
      start: t.imgStart,
      top: t.imgTop
    })), b = pa();
    return (m, h2) => (openBlock(), createBlock(resolveDynamicComponent(m.tag), {
      class: normalizeClass(["card", c.value])
    }, {
      default: withCtx(() => [
        createVNode(unref(b).define, null, {
          default: withCtx(() => [
            renderSlot(m.$slots, "img", {}, () => [
              m.imgSrc ? (openBlock(), createBlock(vo, normalizeProps(mergeProps({ key: 0 }, f.value)), null, 16)) : createCommentVNode("", true)
            ])
          ]),
          _: 3
        }),
        unref(a) ? createCommentVNode("", true) : (openBlock(), createBlock(unref(b).reuse, { key: 0 })),
        m.header || s.value || m.headerHtml ? (openBlock(), createBlock(mn, {
          key: 1,
          "bg-variant": m.headerBgVariant,
          variant: m.headerVariant,
          "border-variant": m.headerBorderVariant,
          html: m.headerHtml,
          tag: m.headerTag,
          "text-variant": m.headerTextVariant,
          class: normalizeClass(m.headerClass)
        }, {
          default: withCtx(() => [
            renderSlot(m.$slots, "header", {}, () => [
              createTextVNode(toDisplayString(m.header), 1)
            ])
          ]),
          _: 3
        }, 8, ["bg-variant", "variant", "border-variant", "html", "tag", "text-variant", "class"])) : createCommentVNode("", true),
        unref(r) ? renderSlot(m.$slots, "default", { key: 3 }, () => [
          createTextVNode(toDisplayString(m.bodyText), 1)
        ]) : (openBlock(), createBlock(yn, {
          key: 2,
          overlay: m.overlay,
          "bg-variant": m.bodyBgVariant,
          tag: m.bodyTag,
          "text-variant": m.bodyTextVariant,
          subtitle: m.subtitle,
          "subtitle-tag": m.subtitleTag,
          "subtitle-text-variant": m.subtitleTextVariant,
          title: m.title,
          "title-tag": m.titleTag,
          class: normalizeClass(m.bodyClass)
        }, {
          default: withCtx(() => [
            renderSlot(m.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(m.bodyText), 1)
            ])
          ]),
          _: 3
        }, 8, ["overlay", "bg-variant", "tag", "text-variant", "subtitle", "subtitle-tag", "subtitle-text-variant", "title", "title-tag", "class"])),
        m.footer || i.value || m.footerHtml ? (openBlock(), createBlock(hn, {
          key: 4,
          "bg-variant": m.footerBgVariant,
          "border-variant": m.footerBorderVariant,
          variant: m.footerVariant,
          html: m.footerHtml,
          tag: m.footerTag,
          "text-variant": m.footerTextVariant,
          class: normalizeClass(m.footerClass)
        }, {
          default: withCtx(() => [
            renderSlot(m.$slots, "footer", {}, () => [
              createTextVNode(toDisplayString(m.footer), 1)
            ])
          ]),
          _: 3
        }, 8, ["bg-variant", "border-variant", "variant", "html", "tag", "text-variant", "class"])) : createCommentVNode("", true),
        unref(a) ? (openBlock(), createBlock(unref(b).reuse, { key: 5 })) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Vi = defineComponent({
  __name: "BCardGroup",
  props: {
    columns: { type: [Boolean, String], default: false },
    deck: { type: [Boolean, String], default: false },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, o = d(() => t.columns), a = d(() => t.deck), l = toRef(
      () => a.value ? "card-deck" : o.value ? "card-columns" : "card-group"
    );
    return (n, r) => (openBlock(), createBlock(resolveDynamicComponent(n.tag), {
      class: normalizeClass(l.value)
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Ai = defineComponent({
  __name: "BCardText",
  props: {
    tag: { default: "p" },
    text: { default: void 0 }
  },
  setup(e) {
    return (t, o) => (openBlock(), createBlock(resolveDynamicComponent(t.tag), { class: "card-text" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(t.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var Oi = ["id"];
var Ei = {
  key: 0,
  class: "carousel-indicators"
};
var Pi = ["aria-current", "aria-label", "onClick"];
var Ni = createBaseVNode("span", {
  class: "carousel-control-prev-icon",
  "aria-hidden": "true"
}, null, -1);
var Ii = { class: "visually-hidden" };
var Fi = createBaseVNode("span", {
  class: "carousel-control-next-icon",
  "aria-hidden": "true"
}, null, -1);
var Li = { class: "visually-hidden" };
var zi = defineComponent({
  __name: "BCarousel",
  props: {
    background: { default: void 0 },
    controls: { type: [Boolean, String], default: false },
    controlsNextText: { default: "Next" },
    controlsPrevText: { default: "Previous" },
    fade: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    imgHeight: { default: void 0 },
    imgWidth: { default: void 0 },
    indicators: { type: [Boolean, String], default: false },
    indicatorsButtonLabel: { default: "Slide" },
    interval: { default: 5e3 },
    keyboard: { type: [Boolean, String], default: true },
    modelValue: { default: 0 },
    noHoverPause: { type: [Boolean, String], default: false },
    noTouch: { type: [Boolean, String], default: false },
    noWrap: { type: [Boolean, String], default: false },
    ride: { type: [Boolean, String], default: false },
    rideReverse: { type: [Boolean, String], default: false },
    touchThreshold: { default: 50 }
  },
  emits: ["slide", "slid", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = useSlots(), r = Pe(() => a.id, "carousel"), s = _e(a, "modelValue", l, { passive: true }), i = d(() => a.keyboard), u = d(() => a.rideReverse), c = d(() => a.noHoverPause), f = d(() => a.fade), b = d(() => a.controls), m = d(() => a.indicators), h2 = d(() => a.noTouch), $ = d(() => a.noWrap), B = Se(() => a.touchThreshold), v = Se(() => a.interval), S = d(() => a.ride), y = ref(false), _ = ref(false), C = ref(true), T = ref(null), k = ref(null), N = ref(s.value), V = lo(k), A = toRef(
      () => `carousel-item carousel-item-${C.value ? "prev" : "next"} carousel-item-${C.value ? "end" : "start"}`
    ), E = toRef(
      () => `carousel-item active carousel-item-${C.value ? "start" : "end"}`
    ), { pause: K, resume: oe } = Al(
      () => {
        u.value ? te() : he();
      },
      v,
      { immediate: S.value === "carousel" }
    ), F = toRef(
      () => S.value === true && _.value === true || S.value === "carousel"
    ), z = computed(() => Hr(n.default, "BCarouselSlide")), D = computed(() => ({ "carousel-fade": f.value })), J = (L) => {
      var j;
      return new nl(L, {
        componentId: r.value,
        cancelable: false,
        target: k.value,
        direction: C.value ? "right" : "left",
        from: N.value,
        to: s.value,
        relatedTarget: ((j = T.value) == null ? void 0 : j.children[s.value]) ?? null
      });
    }, ie = (L) => {
      if (y.value !== true) {
        if (S.value === true && (_.value = true), F.value === true && oe(), C.value = !(L < s.value), L >= z.value.length) {
          if ($.value)
            return;
          s.value = 0;
          return;
        }
        if (L < 0) {
          if ($.value)
            return;
          s.value = z.value.length - 1;
          return;
        }
        N.value = s.value, s.value = L;
      }
    }, te = () => {
      ie(s.value - 1);
    }, he = () => {
      ie(s.value + 1);
    }, Oe = (L) => {
      i.value !== false && L();
    }, ve = () => {
      c.value || K();
    }, ge = () => {
      F.value && oe();
    }, { lengthX: ke } = Er(k, {
      passive: true,
      onSwipeStart() {
        h2.value !== true && K();
      },
      onSwipeEnd() {
        if (h2.value === true)
          return;
        const L = () => {
          F.value !== false && oe();
        };
        if (ke.value >= B.value) {
          he(), L();
          return;
        }
        ke.value <= -B.value && (te(), L());
      }
    }), Ce = () => {
      l("slide", J("slide")), y.value = true;
    }, M = () => {
      l("slid", J("slid")), y.value = false;
    }, X = (L) => {
      s.value !== 0 && L.classList.add("carousel-item");
    };
    return Ge(
      "ArrowLeft",
      () => {
        Oe(te);
      },
      { target: k }
    ), Ge(
      "ArrowRight",
      () => {
        Oe(he);
      },
      { target: k }
    ), watch(S, () => {
      _.value = false;
    }), watch(V, (L) => {
      if (L) {
        ve();
        return;
      }
      ge();
    }), t({
      next: he,
      pause: K,
      prev: te,
      resume: oe
    }), provide(Fl, {
      background: toRef(() => a.background),
      width: toRef(() => a.imgWidth),
      height: toRef(() => a.imgHeight)
    }), (L, j) => (openBlock(), createElementBlock("div", {
      id: unref(r),
      ref_key: "element",
      ref: k,
      class: normalizeClass(["carousel slide pointer-event", D.value])
    }, [
      unref(m) ? (openBlock(), createElementBlock("div", Ei, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(z.value.length, (Q, Z) => (openBlock(), createElementBlock("button", {
          key: Z,
          type: "button",
          "data-bs-target": "",
          class: normalizeClass(Z === unref(s) ? "active" : ""),
          "aria-current": Z === unref(s) ? true : void 0,
          "aria-label": `${L.indicatorsButtonLabel} ${Z}`,
          onClick: (Y) => ie(Z)
        }, null, 10, Pi))), 128))
      ])) : createCommentVNode("", true),
      createBaseVNode("div", {
        ref_key: "relatedTarget",
        ref: T,
        class: "carousel-inner"
      }, [
        createVNode(TransitionGroup, {
          "enter-from-class": A.value,
          "enter-active-class": A.value,
          "enter-to-class": A.value,
          "leave-from-class": E.value,
          "leave-active-class": E.value,
          "leave-to-class": E.value,
          onBeforeLeave: Ce,
          onAfterLeave: M,
          onAfterEnter: X
        }, {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(z.value, (Q, Z) => withDirectives((openBlock(), createBlock(resolveDynamicComponent(Q), {
              key: Z,
              class: normalizeClass({ active: Z === unref(s) && y.value === false })
            }, null, 8, ["class"])), [
              [vShow, Z === unref(s)]
            ])), 128))
          ]),
          _: 1
        }, 8, ["enter-from-class", "enter-active-class", "enter-to-class", "leave-from-class", "leave-active-class", "leave-to-class"])
      ], 512),
      unref(b) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        createBaseVNode("button", {
          class: "carousel-control-prev",
          type: "button",
          onClick: te
        }, [
          Ni,
          createBaseVNode("span", Ii, toDisplayString(L.controlsPrevText), 1)
        ]),
        createBaseVNode("button", {
          class: "carousel-control-next",
          type: "button",
          onClick: he
        }, [
          Fi,
          createBaseVNode("span", Li, toDisplayString(L.controlsNextText), 1)
        ])
      ], 64)) : createCommentVNode("", true)
    ], 10, Oi));
  }
});
var Hi = ["innerHTML"];
var Ri = { key: 1 };
var xi = ["innerHTML"];
var Mi = { key: 1 };
var Di = defineComponent({
  __name: "BCarouselSlide",
  props: {
    background: { default: void 0 },
    caption: { default: void 0 },
    captionHtml: { default: void 0 },
    captionTag: { default: "h3" },
    contentTag: { default: "div" },
    contentVisibleUp: { default: void 0 },
    id: { default: void 0 },
    imgAlt: { default: void 0 },
    imgBlank: { type: [Boolean, String], default: false },
    imgBlankColor: { default: "transparent" },
    imgHeight: { default: void 0 },
    imgSrc: { default: void 0 },
    imgSrcset: { default: void 0 },
    imgWidth: { default: void 0 },
    interval: { default: void 0 },
    text: { default: void 0 },
    textHtml: { default: void 0 },
    textTag: { default: "p" }
  },
  setup(e) {
    const t = e, o = useSlots(), a = inject(Fl, null), l = toRef(() => t.text || t.textHtml || !He(o.text)), n = toRef(() => t.caption || t.captionHtml || !He(o.caption)), r = toRef(() => l.value || n.value || !He(o.default)), s = computed(() => ({
      background: `${t.background || (a == null ? void 0 : a.background.value) || "rgb(171, 171, 171)"} none repeat scroll 0% 0%`
    })), i = computed(() => ({
      "d-none": t.contentVisibleUp !== void 0,
      [`d-${t.contentVisibleUp}-block`]: t.contentVisibleUp !== void 0
    }));
    return (u, c) => (openBlock(), createElementBlock("div", {
      class: "carousel-item",
      style: normalizeStyle(s.value)
    }, [
      renderSlot(u.$slots, "img", {}, () => {
        var f, b;
        return [
          createVNode(fo, {
            class: "d-block w-100",
            alt: u.imgAlt,
            srcset: u.imgSrcset,
            src: u.imgSrc,
            width: u.imgWidth || ((f = unref(a)) == null ? void 0 : f.width.value),
            height: u.imgHeight || ((b = unref(a)) == null ? void 0 : b.height.value),
            blank: u.imgBlank,
            "blank-color": u.imgBlankColor
          }, null, 8, ["alt", "srcset", "src", "width", "height", "blank", "blank-color"])
        ];
      }),
      r.value ? (openBlock(), createBlock(resolveDynamicComponent(u.contentTag), {
        key: 0,
        class: normalizeClass(["carousel-caption", i.value])
      }, {
        default: withCtx(() => [
          n.value ? (openBlock(), createBlock(resolveDynamicComponent(u.captionTag), { key: 0 }, {
            default: withCtx(() => [
              renderSlot(u.$slots, "caption", {}, () => [
                u.captionHtml ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: u.captionHtml
                }, null, 8, Hi)) : (openBlock(), createElementBlock("span", Ri, toDisplayString(u.caption), 1))
              ])
            ]),
            _: 3
          })) : createCommentVNode("", true),
          l.value ? (openBlock(), createBlock(resolveDynamicComponent(u.textTag), { key: 1 }, {
            default: withCtx(() => [
              renderSlot(u.$slots, "text", {}, () => [
                u.textHtml ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: u.textHtml
                }, null, 8, xi)) : (openBlock(), createElementBlock("span", Mi, toDisplayString(u.text), 1))
              ])
            ]),
            _: 3
          })) : createCommentVNode("", true),
          renderSlot(u.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"])) : createCommentVNode("", true)
    ], 4));
  }
});
var Ho = Sa("", [], { type: [Boolean, String, Number], default: false });
var Ro = Sa("offset", [""], { type: [String, Number], default: null });
var xo = Sa("order", [""], { type: [String, Number], default: null });
var ji = defineComponent({
  name: "BCol",
  slots: Object,
  props: {
    col: { type: [Boolean, String], default: false },
    // Generic flexbox .col (xs)
    cols: { type: [String, Number], default: null },
    // .col-[1-12]|auto (xs)
    ...Ho,
    offset: { type: [String, Number], default: null },
    ...Ro,
    order: { type: [String, Number], default: null },
    ...xo,
    alignSelf: { type: String, default: null },
    tag: { type: String, default: "div" }
  },
  setup(e) {
    const t = [
      { content: Ho, propPrefix: "cols", classPrefix: "col" },
      { content: Ro, propPrefix: "offset" },
      { content: xo, propPrefix: "order" }
    ], o = d(() => e.col), a = computed(
      () => t.flatMap((n) => Il(e, n.content, n.propPrefix, n.classPrefix))
    );
    return {
      computedClasses: computed(() => [
        a.value,
        {
          col: o.value || !a.value.some((n) => /^col-/.test(n)) && !e.cols,
          [`col-${e.cols}`]: !!e.cols,
          [`offset-${e.offset}`]: !!e.offset,
          [`order-${e.order}`]: !!e.order,
          [`align-self-${e.alignSelf}`]: !!e.alignSelf
        }
      ])
    };
  }
});
function qi(e, t, o, a, l, n) {
  return openBlock(), createBlock(resolveDynamicComponent(e.tag), {
    class: normalizeClass(e.computedClasses)
  }, {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var Ut = $a(ji, [["render", qi]]);
var Wi = defineComponent({
  __name: "BContainer",
  props: {
    fluid: { type: [Boolean, String], default: false },
    gutterX: { default: void 0 },
    gutterY: { default: void 0 },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, o = Se(() => t.gutterX ?? NaN, { method: "parseInt" }), a = Se(() => t.gutterY ?? NaN, { method: "parseInt" }), l = d(() => t.fluid), n = computed(() => ({
      container: l.value === false,
      "container-fluid": l.value === true,
      [`container-${l.value}`]: typeof l.value == "string",
      [`gx-${o.value}`]: !Number.isNaN(o.value),
      [`gy-${a.value}`]: !Number.isNaN(a.value)
    }));
    return (r, s) => (openBlock(), createBlock(resolveDynamicComponent(r.tag), {
      class: normalizeClass(n.value)
    }, {
      default: withCtx(() => [
        renderSlot(r.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Gi = { class: "visually-hidden" };
var Ui = ["aria-labelledby", "role"];
var Sn = defineComponent({
  __name: "BDropdown",
  props: {
    ariaLabel: { default: void 0 },
    autoClose: { type: [Boolean, String], default: true },
    boundary: { default: "clippingAncestors" },
    boundaryPadding: { default: void 0 },
    center: { type: [Boolean, String], default: false },
    container: { default: void 0 },
    disabled: { type: [Boolean, String], default: false },
    dropend: { type: [Boolean, String], default: false },
    dropstart: { type: [Boolean, String], default: false },
    dropup: { type: [Boolean, String], default: false },
    end: { type: [Boolean, String], default: false },
    floatingMiddleware: { default: void 0 },
    id: { default: void 0 },
    isNav: { type: [Boolean, String], default: false },
    lazy: { type: [Boolean, String], default: false },
    menuClass: { default: void 0 },
    modelValue: { type: [Boolean, String], default: false },
    noCaret: { type: [Boolean, String], default: false },
    noFlip: { type: [Boolean, String], default: false },
    noShift: { type: [Boolean, String], default: false },
    noSize: { type: [Boolean, String], default: false },
    offset: { default: 0 },
    role: { default: "menu" },
    size: { default: "md" },
    split: { type: [Boolean, String], default: false },
    splitButtonType: { default: "button" },
    splitClass: { default: void 0 },
    splitDisabled: { type: [Boolean, String], default: void 0 },
    splitHref: { default: void 0 },
    splitTo: { default: void 0 },
    splitVariant: { default: void 0 },
    strategy: { default: "absolute" },
    text: { default: void 0 },
    toggleClass: { default: void 0 },
    toggleText: { default: "Toggle dropdown" },
    variant: { default: "secondary" }
  },
  emits: ["click", "hidden", "hide", "hide-prevented", "show", "show-prevented", "shown", "toggle", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = Pe(() => a.id, "dropdown"), r = _e(a, "modelValue", l, { passive: true }), s = d(r), i = d(() => a.dropup), u = d(() => a.dropend), c = d(() => a.isNav), f = d(() => a.dropstart), b = d(() => a.center), m = d(() => a.end), h2 = d(() => a.split), $ = d(() => a.noCaret), B = d(() => a.noFlip), v = d(() => a.noShift), S = d(() => a.noSize), y = d(() => a.lazy), _ = d(() => a.splitDisabled), C = toRef(
      () => typeof a.offset == "string" || typeof a.offset == "number" ? a.offset : NaN
    ), T = Se(C), k = ref(null), N = ref(null), V = ref(null), A = ref(null), E = computed(
      () => a.boundary === "document" || a.boundary === "viewport" ? void 0 : a.boundary
    ), K = computed(
      () => a.boundary === "document" || a.boundary === "viewport" ? a.boundary : void 0
    ), oe = toRef(() => h2.value ? N.value : V.value);
    Ge(
      "Escape",
      () => {
        r.value = !s;
      },
      { target: oe }
    ), Ge(
      "Escape",
      () => {
        r.value = !s;
      },
      { target: k }
    );
    const F = (L, j) => {
      var Z, Y, pe, ne;
      if (L.preventDefault(), !s.value) {
        M(), nextTick(() => F(L, j));
        return;
      }
      const Q = (Z = k.value) == null ? void 0 : Z.querySelectorAll(".dropdown-item:not(.disabled):not(:disabled)");
      if (Q)
        if ((Y = k.value) != null && Y.contains(document.activeElement)) {
          const Be = k.value.querySelector(".dropdown-item:focus"), ue = Array.prototype.indexOf.call(Q, Be) + j;
          ue >= 0 && ue < (Q == null ? void 0 : Q.length) && ((pe = Q[ue]) == null || pe.focus());
        } else
          (ne = Q[j === -1 ? Q.length - 1 : 0]) == null || ne.focus();
    };
    Ge("ArrowUp", (L) => F(L, -1), { target: oe }), Ge("ArrowDown", (L) => F(L, 1), { target: oe }), Ge("ArrowUp", (L) => F(L, -1), { target: k }), Ge("ArrowDown", (L) => F(L, 1), { target: k });
    const z = computed(
      () => Lr({
        top: i.value,
        start: f.value,
        end: u.value,
        alignCenter: b.value,
        alignEnd: m.value
      })
    ), D = ref({}), J = computed(() => {
      if (a.floatingMiddleware !== void 0)
        return a.floatingMiddleware;
      const L = typeof a.offset == "string" || typeof a.offset == "number" ? T.value : a.offset, j = [dl(L)];
      return B.value === false && j.push(
        Sl({
          boundary: E.value,
          rootBoundary: K.value,
          padding: a.boundaryPadding
        })
      ), v.value === false && j.push(
        Bl({
          boundary: E.value,
          rootBoundary: K.value,
          padding: a.boundaryPadding
        })
      ), S.value === false && j.push(
        wl({
          boundary: E.value,
          rootBoundary: K.value,
          padding: a.boundaryPadding,
          apply({ availableWidth: Q, availableHeight: Z }) {
            D.value = {
              maxHeight: Z && s.value ? `${Z}px` : void 0,
              maxWidth: Q && s.value ? `${Q}px` : void 0
            };
          }
        })
      ), j;
    }), { update: ie, floatingStyles: te } = kl(oe, k, {
      placement: z,
      middleware: J,
      strategy: toRef(() => a.strategy),
      whileElementsMounted: hl
    }), he = computed(() => ({
      dropup: i.value,
      dropend: u.value,
      dropstart: f.value,
      "position-static": a.boundary !== "clippingAncestors" && !c.value
    })), Oe = computed(() => [
      h2.value ? a.splitClass : a.toggleClass,
      {
        "nav-link": c.value,
        "dropdown-toggle": !h2.value,
        "dropdown-toggle-no-caret": $.value && !h2.value,
        show: h2.value ? void 0 : s.value
      }
    ]), ve = () => {
      X();
    }, ge = (L) => {
      h2.value ? l("click", L) : ve();
    };
    Ol(
      k,
      () => {
        s.value && (a.autoClose === true || a.autoClose === "outside") && X();
      },
      { ignore: [N, V] }
    );
    const ke = () => {
      s.value && (a.autoClose === true || a.autoClose === "inside") && X();
    }, Ce = () => {
      r.value && X();
    }, M = () => {
      r.value || X();
    }, X = () => {
      var Q;
      l("toggle");
      const L = s.value, j = new Vt(L ? "hide" : "show");
      if (l(L ? "hide" : "show", j), j.defaultPrevented) {
        l(L ? "hide-prevented" : "show-prevented");
        return;
      }
      r.value = !L, l(L ? "hidden" : "shown"), (Q = A.value) == null || Q.dispatchEvent(new Event("forceHide"));
    };
    return watch(s, () => {
      ie();
    }), t({
      close: Ce,
      open: M,
      toggle: X
    }), provide(jl, {
      id: n,
      open: M,
      close: Ce,
      toggle: X,
      visible: s,
      isNav: c
    }), (L, j) => (openBlock(), createElementBlock("div", {
      ref_key: "wrapper",
      ref: A,
      class: normalizeClass([he.value, "btn-group"])
    }, [
      createVNode(Bt, {
        id: unref(n),
        ref_key: "splitButton",
        ref: V,
        variant: L.splitVariant || L.variant,
        size: L.size,
        class: normalizeClass(Oe.value),
        disabled: unref(_) || L.disabled,
        type: L.splitButtonType,
        "aria-label": L.ariaLabel,
        "aria-expanded": unref(h2) ? void 0 : unref(s),
        "aria-haspopup": unref(h2) ? void 0 : "menu",
        href: unref(h2) ? L.splitHref : void 0,
        to: unref(h2) && L.splitTo ? L.splitTo : void 0,
        onClick: ge
      }, {
        default: withCtx(() => [
          renderSlot(L.$slots, "button-content", {}, () => [
            createTextVNode(toDisplayString(L.text), 1)
          ])
        ]),
        _: 3
      }, 8, ["id", "variant", "size", "class", "disabled", "type", "aria-label", "aria-expanded", "aria-haspopup", "href", "to"]),
      unref(h2) ? (openBlock(), createBlock(Bt, {
        key: 0,
        ref_key: "button",
        ref: N,
        variant: L.variant,
        size: L.size,
        disabled: L.disabled,
        class: normalizeClass([[L.toggleClass, { show: unref(s) }], "dropdown-toggle-split dropdown-toggle"]),
        "aria-expanded": unref(s),
        "aria-haspopup": "menu",
        onClick: ve
      }, {
        default: withCtx(() => [
          createBaseVNode("span", Gi, [
            renderSlot(L.$slots, "toggle-text", {}, () => [
              createTextVNode(toDisplayString(L.toggleText), 1)
            ])
          ])
        ]),
        _: 3
      }, 8, ["variant", "size", "disabled", "class", "aria-expanded"])) : createCommentVNode("", true),
      (openBlock(), createBlock(Teleport, {
        to: L.container || "body",
        disabled: !L.container
      }, [
        !unref(y) || unref(s) ? withDirectives((openBlock(), createElementBlock("ul", {
          key: 0,
          ref_key: "floating",
          ref: k,
          style: normalizeStyle([unref(te), D.value]),
          class: normalizeClass(["dropdown-menu overflow-auto", [L.menuClass, { show: unref(s) }]]),
          "aria-labelledby": unref(n),
          role: L.role,
          onClick: ke
        }, [
          renderSlot(L.$slots, "default", {
            hide: Ce,
            show: M
          })
        ], 14, Ui)), [
          [vShow, unref(y) || unref(s)]
        ]) : createCommentVNode("", true)
      ], 8, ["to", "disabled"]))
    ], 2));
  }
});
var Xi = { role: "presentation" };
var Ki = defineComponent({
  __name: "BDropdownDivider",
  props: {
    tag: { default: "hr" }
  },
  setup(e) {
    return (t, o) => (openBlock(), createElementBlock("li", Xi, [
      (openBlock(), createBlock(resolveDynamicComponent(t.tag), {
        class: "dropdown-divider",
        role: "separator",
        "aria-orientation": "horizontal"
      }))
    ]));
  }
});
var Yi = { role: "presentation" };
var Zi = defineComponent({
  __name: "BDropdownForm",
  setup(e) {
    return (t, o) => (openBlock(), createElementBlock("li", Yi, [
      createBaseVNode("form", mergeProps({ class: "dropdown-item-text" }, t.$attrs), [
        renderSlot(t.$slots, "default")
      ], 16)
    ]));
  }
});
var Ji = { role: "presentation" };
var Qi = ["id", "aria-describedby"];
var eu = defineComponent({
  inheritAttrs: false,
  __name: "BDropdownGroup",
  props: {
    ariaDescribedby: { default: void 0 },
    header: { default: void 0 },
    headerClass: { default: void 0 },
    headerTag: { default: "header" },
    headerVariant: { default: null },
    id: { default: void 0 }
  },
  setup(e) {
    const t = e, o = toRef(() => t.id ? `${t.id}_group_dd_header` : void 0), a = toRef(() => t.headerTag === "header" ? void 0 : "heading"), l = computed(() => [
      t.headerClass,
      {
        [`text-${t.headerVariant}`]: t.headerVariant !== null
      }
    ]);
    return (n, r) => (openBlock(), createElementBlock("li", Ji, [
      (openBlock(), createBlock(resolveDynamicComponent(n.headerTag), {
        id: o.value,
        class: normalizeClass(["dropdown-header", l.value]),
        role: a.value
      }, {
        default: withCtx(() => [
          renderSlot(n.$slots, "header", {}, () => [
            createTextVNode(toDisplayString(n.header), 1)
          ])
        ]),
        _: 3
      }, 8, ["id", "class", "role"])),
      createBaseVNode("ul", mergeProps({
        id: n.id,
        role: "group",
        class: "list-unstyled"
      }, n.$attrs, {
        "aria-describedby": n.ariaDescribedby || o.value
      }), [
        renderSlot(n.$slots, "default")
      ], 16, Qi)
    ]));
  }
});
var tu = { class: "dropdown-header" };
var au = defineComponent({
  __name: "BDropdownHeader",
  setup(e) {
    return (t, o) => (openBlock(), createElementBlock("li", null, [
      createBaseVNode("h6", tu, [
        renderSlot(t.$slots, "default")
      ])
    ]));
  }
});
var ou = defineComponent({
  inheritAttrs: false,
  __name: "BDropdownItem",
  props: {
    linkClass: { default: void 0 },
    wrapperAttrs: { default: void 0 },
    active: { type: [Boolean, String], default: void 0 },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    variant: { default: null }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const o = e, a = t, { class: l, ...n } = useAttrs(), r = d(() => o.active), s = d(() => o.disabled), { computedLink: i, computedLinkProps: u } = At(o), c = computed(() => [
      o.linkClass,
      {
        active: r.value,
        disabled: s.value,
        [`text-${o.variant}`]: o.variant !== null
      }
    ]), f = toRef(() => i.value ? ft : o.href ? "a" : "button"), b = inject(so, null), m = inject(jl, null), h2 = inject(ro, null), $ = (B) => {
      var v, S, y;
      a("click", B), h2 !== null && ((v = h2 == null ? void 0 : h2.autoClose) == null ? void 0 : v.value) === true && ((S = b == null ? void 0 : b.close) == null || S.call(b)), (y = m == null ? void 0 : m.close) == null || y.call(m);
    };
    return (B, v) => (openBlock(), createElementBlock("li", mergeProps({
      role: "presentation",
      class: unref(l)
    }, B.wrapperAttrs), [
      (openBlock(), createBlock(resolveDynamicComponent(f.value), mergeProps({
        class: ["dropdown-item", c.value],
        disabled: unref(s),
        "aria-disabled": unref(s) ? true : null,
        "aria-current": unref(r) ? true : null,
        href: f.value === "a" ? B.href : null,
        rel: B.rel,
        role: "menuitem",
        type: f.value === "button" ? "button" : null,
        target: B.target
      }, { ...unref(u), ...n }, { onClick: $ }), {
        default: withCtx(() => [
          renderSlot(B.$slots, "default")
        ]),
        _: 3
      }, 16, ["class", "disabled", "aria-disabled", "aria-current", "href", "rel", "type", "target"]))
    ], 16));
  }
});
var lu = { role: "presentation" };
var nu = ["disabled"];
var su = defineComponent({
  inheritAttrs: false,
  __name: "BDropdownItemButton",
  props: {
    active: { type: [Boolean, String], default: false },
    activeClass: { default: "active" },
    buttonClass: { default: void 0 },
    disabled: { type: [Boolean, String], default: false },
    variant: { default: null }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = d(() => o.active), n = d(() => o.disabled), r = computed(() => [
      o.buttonClass,
      {
        [o.activeClass]: l.value,
        disabled: n.value,
        [`text-${o.variant}`]: o.variant !== null
      }
    ]), s = (i) => {
      a("click", i);
    };
    return (i, u) => (openBlock(), createElementBlock("li", lu, [
      createBaseVNode("button", {
        role: "menu",
        type: "button",
        class: normalizeClass(["dropdown-item", r.value]),
        disabled: unref(n),
        onClick: s
      }, [
        renderSlot(i.$slots, "default")
      ], 10, nu)
    ]));
  }
});
var ru = { role: "presentation" };
var iu = defineComponent({
  __name: "BDropdownText",
  props: {
    text: { default: "" }
  },
  setup(e) {
    return (t, o) => (openBlock(), createElementBlock("li", ru, [
      createBaseVNode("span", mergeProps({ class: "dropdown-item-text" }, t.$attrs), [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(t.text), 1)
        ])
      ], 16)
    ]));
  }
});
var uu = ["id", "novalidate"];
var wn = defineComponent({
  __name: "BForm",
  props: {
    floating: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    novalidate: { type: [Boolean, String], default: false },
    validated: { type: [Boolean, String], default: false }
  },
  emits: ["submit"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = ref(null), r = d(() => a.floating), s = d(() => a.novalidate), i = d(() => a.validated), u = computed(() => ({
      "form-floating": r.value,
      "was-validated": i.value
    })), c = (f) => {
      l("submit", f);
    };
    return t({
      element: n
    }), (f, b) => (openBlock(), createElementBlock("form", {
      id: f.id,
      ref_key: "element",
      ref: n,
      novalidate: unref(s),
      class: normalizeClass(u.value),
      onSubmit: withModifiers(c, ["prevent"])
    }, [
      renderSlot(f.$slots, "default")
    ], 42, uu));
  }
});
var du = { class: "form-floating" };
var cu = ["for"];
var fu = defineComponent({
  __name: "BFormFloatingLabel",
  props: {
    label: { default: void 0 },
    labelFor: { default: void 0 },
    text: { default: void 0 }
  },
  setup(e) {
    return (t, o) => (openBlock(), createElementBlock("div", du, [
      renderSlot(t.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(t.text), 1)
      ]),
      createBaseVNode("label", { for: t.labelFor }, [
        renderSlot(t.$slots, "label", {}, () => [
          createTextVNode(toDisplayString(t.label), 1)
        ])
      ], 8, cu)
    ]));
  }
});
var xa = defineComponent({
  __name: "BFormInvalidFeedback",
  props: {
    ariaLive: { default: void 0 },
    forceShow: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    role: { default: void 0 },
    state: { type: [Boolean, String, null], default: null },
    tag: { default: "div" },
    text: { default: void 0 },
    tooltip: { type: [Boolean, String], default: false }
  },
  setup(e) {
    const t = e, o = d(() => t.forceShow), a = d(() => t.state), l = d(() => t.tooltip), n = toRef(() => o.value === true || a.value === false), r = computed(() => ({
      "d-block": n.value,
      "invalid-feedback": !l.value,
      "invalid-tooltip": l.value
    }));
    return (s, i) => (openBlock(), createBlock(resolveDynamicComponent(s.tag), {
      id: s.id,
      role: s.role,
      "aria-live": s.ariaLive,
      "aria-atomic": s.ariaLive ? true : void 0,
      class: normalizeClass(r.value)
    }, {
      default: withCtx(() => [
        renderSlot(s.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(s.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["id", "role", "aria-live", "aria-atomic", "class"]));
  }
});
var ua = defineComponent({
  __name: "BFormRow",
  props: {
    tag: { default: "div" }
  },
  setup(e) {
    return (t, o) => (openBlock(), createBlock(resolveDynamicComponent(t.tag), { class: "row d-flex flex-wrap" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }));
  }
});
var Ma = defineComponent({
  __name: "BFormText",
  props: {
    id: { default: void 0 },
    inline: { type: [Boolean, String], default: false },
    tag: { default: "small" },
    text: { default: void 0 },
    textVariant: { default: "body-secondary" }
  },
  setup(e) {
    const t = e, o = d(() => t.inline), a = computed(() => ({
      [`text-${t.textVariant}`]: t.textVariant !== null,
      "form-text": !o.value
    }));
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(l.tag), {
      id: l.id,
      class: normalizeClass(a.value)
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(l.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var Da = defineComponent({
  __name: "BFormValidFeedback",
  props: {
    ariaLive: { default: void 0 },
    forceShow: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    role: { default: void 0 },
    state: { type: [Boolean, String, null], default: null },
    tag: { default: "div" },
    text: { default: void 0 },
    tooltip: { type: [Boolean, String], default: false }
  },
  setup(e) {
    const t = e, o = d(() => t.forceShow), a = d(() => t.state), l = d(() => t.tooltip), n = toRef(() => o.value === true || a.value === true), r = computed(() => ({
      "d-block": n.value,
      "valid-feedback": !l.value,
      "valid-tooltip": l.value
    }));
    return (s, i) => (openBlock(), createBlock(resolveDynamicComponent(s.tag), {
      id: s.id,
      role: s.role,
      "aria-live": s.ariaLive,
      "aria-atomic": s.ariaLive ? true : void 0,
      class: normalizeClass(r.value)
    }, {
      default: withCtx(() => [
        renderSlot(s.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(s.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["id", "role", "aria-live", "aria-atomic", "class"]));
  }
});
var Cn = defineComponent({
  name: "ComponentOrEmpty",
  slots: Object,
  props: {
    tag: {
      type: String,
      default: "div"
    },
    to: {
      type: [String, Object],
      default: null
    },
    skip: {
      type: Boolean,
      default: false
    }
  },
  setup(e, { slots: t, attrs: o }) {
    return () => {
      var a, l, n;
      return e.skip ? (a = t.default) == null ? void 0 : a.call(t) : e.tag === "Teleport" ? h(Teleport, { to: e.to }, [(l = t.default) == null ? void 0 : l.call(t)]) : h(e.tag, { ...o }, [(n = t.default) == null ? void 0 : n.call(t)]);
    };
  }
});
var vu = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "aria-required", "value", "true-value", "false-value", "indeterminate"];
var pu = ["for"];
var kn = defineComponent({
  inheritAttrs: false,
  __name: "BFormCheckbox",
  props: {
    ariaLabel: { default: void 0 },
    ariaLabelledby: { default: void 0 },
    autofocus: { type: [Boolean, String], default: false },
    button: { type: [Boolean, String], default: false },
    buttonGroup: { type: [Boolean, String], default: false },
    buttonVariant: { default: null },
    disabled: { type: [Boolean, String], default: false },
    form: { default: void 0 },
    id: { default: void 0 },
    indeterminate: { type: [Boolean, String], default: false },
    inline: { type: [Boolean, String], default: false },
    modelValue: { type: [Boolean, String, Object, Number, null], default: void 0 },
    name: { default: void 0 },
    plain: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: void 0 },
    size: { default: void 0 },
    state: { type: [Boolean, String, null], default: null },
    switch: { type: [Boolean, String], default: false },
    uncheckedValue: { type: [Boolean, String, Object, Number, null], default: false },
    value: { type: [Boolean, String, Object, Number, null], default: true }
  },
  emits: ["update:modelValue", "update:indeterminate"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = useSlots(), r = _e(a, "modelValue", l, { passive: true }), s = _e(a, "indeterminate", l), i = Pe(() => a.id, "form-check"), u = d(() => a.indeterminate), c = d(() => a.autofocus), f = d(() => a.plain), b = d(() => a.button), m = d(() => a.buttonGroup), h2 = d(() => a.switch), $ = d(() => a.disabled), B = d(() => a.inline), v = d(() => a.required), S = d(() => a.state), y = inject(Ml, null), _ = ref(null), { focused: C } = De(_, {
      initialValue: c.value
    }), T = toRef(() => !He(n.default)), k = computed({
      get: () => (y == null ? void 0 : y.modelValue.value) ?? r.value,
      set: (F) => {
        if (F !== void 0) {
          if (s.value = false, y !== null && Array.isArray(F)) {
            y.modelValue.value = F;
            return;
          }
          r.value = F;
        }
      }
    }), N = toRef(
      () => !!(a.name ?? (y == null ? void 0 : y.name.value)) && (v.value || (y == null ? void 0 : y.required.value))
    ), V = toRef(() => m.value || ((y == null ? void 0 : y.buttons.value) ?? false)), A = computed(() => ({
      plain: f.value || ((y == null ? void 0 : y.plain.value) ?? false),
      button: b.value || ((y == null ? void 0 : y.buttons.value) ?? false),
      inline: B.value || ((y == null ? void 0 : y.inline.value) ?? false),
      switch: h2.value || ((y == null ? void 0 : y.switch.value) ?? false),
      state: S.value || (y == null ? void 0 : y.state.value),
      size: a.size ?? (y == null ? void 0 : y.size.value) ?? "md",
      // This is where the true default is made
      buttonVariant: a.buttonVariant ?? (y == null ? void 0 : y.buttonVariant.value) ?? "secondary"
      // This is where the true default is made
    })), E = Zl(A), K = Jl(A), oe = Ql(A);
    return t({
      blur: () => {
        C.value = false;
      },
      element: _,
      focus: () => {
        C.value = true;
      }
    }), (F, z) => (openBlock(), createBlock(Cn, {
      skip: V.value,
      class: normalizeClass(unref(E))
    }, {
      default: withCtx(() => {
        var D, J, ie;
        return [
          withDirectives(createBaseVNode("input", mergeProps({ id: unref(i) }, F.$attrs, {
            ref_key: "input",
            ref: _,
            "onUpdate:modelValue": z[0] || (z[0] = (te) => k.value = te),
            class: unref(K),
            type: "checkbox",
            disabled: unref($) || ((D = unref(y)) == null ? void 0 : D.disabled.value),
            required: N.value || void 0,
            name: F.name || ((J = unref(y)) == null ? void 0 : J.name.value),
            form: F.form || ((ie = unref(y)) == null ? void 0 : ie.form.value),
            "aria-label": F.ariaLabel,
            "aria-labelledby": F.ariaLabelledby,
            "aria-required": N.value || void 0,
            value: F.value,
            "true-value": F.value,
            "false-value": F.uncheckedValue,
            indeterminate: unref(u)
          }), null, 16, vu), [
            [vModelCheckbox, k.value]
          ]),
          T.value || unref(f) === false ? (openBlock(), createElementBlock("label", {
            key: 0,
            for: unref(i),
            class: normalizeClass(unref(oe))
          }, [
            renderSlot(F.$slots, "default")
          ], 10, pu)) : createCommentVNode("", true)
        ];
      }),
      _: 3
    }, 8, ["skip", "class"]));
  }
});
var mu = ["id"];
var gu = ["innerHTML"];
var bu = defineComponent({
  __name: "BFormCheckboxGroup",
  props: {
    ariaInvalid: { type: [Boolean, String], default: void 0 },
    autofocus: { type: [Boolean, String], default: false },
    buttonVariant: { default: "secondary" },
    buttons: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    disabledField: { default: "disabled" },
    form: { default: void 0 },
    htmlField: { default: "html" },
    id: { default: void 0 },
    modelValue: { default: () => [] },
    name: { default: void 0 },
    options: { default: () => [] },
    plain: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    size: { default: "md" },
    stacked: { type: [Boolean, String], default: false },
    state: { type: [Boolean, String, null], default: null },
    switches: { type: [Boolean, String], default: false },
    textField: { default: "text" },
    validated: { type: [Boolean, String], default: false },
    valueField: { default: "value" }
  },
  emits: ["change", "input", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = _e(a, "modelValue", l, { passive: true }), r = Pe(() => a.id, "checkbox"), s = Pe(() => a.name, "checkbox"), i = d(() => a.autofocus), u = d(() => a.buttons), c = d(() => a.disabled), f = d(() => a.plain), b = d(() => a.required), m = d(() => a.stacked), h2 = d(() => a.state), $ = d(() => a.switches), B = d(() => a.validated), v = ref(null), { focused: S } = De(v, {
      initialValue: i.value
    });
    provide(Ml, {
      modelValue: n,
      switch: $,
      buttonVariant: toRef(() => a.buttonVariant),
      form: toRef(() => a.form),
      name: s,
      state: h2,
      plain: f,
      size: toRef(() => a.size),
      inline: toRef(() => !m.value),
      required: b,
      buttons: u,
      disabled: c
    }), watch(n, (k) => {
      l("input", [...k]), nextTick(() => {
        l("change", [...k]);
      });
    });
    const y = computed(
      () => a.options.map(
        (k, N) => typeof k == "string" || typeof k == "number" ? {
          props: {
            value: k,
            disabled: c.value
          },
          text: k.toString(),
          html: void 0,
          self: Symbol(`checkboxGroupOptionItem${N}`)
        } : {
          props: {
            value: k[a.valueField],
            disabled: k[a.disabledField],
            ...k.props ? k.props : {}
          },
          text: k[a.textField],
          html: k[a.htmlField],
          self: Symbol(`checkboxGroupOptionItem${N}`)
        }
      )
    ), _ = computed(() => ({
      required: b.value,
      ariaInvalid: a.ariaInvalid,
      state: h2.value,
      validated: B.value,
      buttons: u.value,
      stacked: m.value,
      size: a.size
    })), C = en(_), T = tn(_);
    return t({
      blur: () => {
        S.value = false;
      },
      focus: () => {
        S.value = true;
      }
    }), (k, N) => (openBlock(), createElementBlock("div", mergeProps(unref(C), {
      id: unref(r),
      ref_key: "element",
      ref: v,
      role: "group",
      class: [unref(T), "bv-no-focus-ring"],
      tabindex: "-1"
    }), [
      renderSlot(k.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(y.value, (V) => (openBlock(), createBlock(kn, mergeProps({
        key: V.self
      }, V.props), {
        default: withCtx(() => [
          V.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: V.html
          }, null, 8, gu)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(V.text), 1)
          ], 64))
        ]),
        _: 2
      }, 1040))), 128)),
      renderSlot(k.$slots, "default")
    ], 16, mu));
  }
});
var yu = ["for"];
var hu = ["id", "form", "name", "multiple", "disabled", "capture", "accept", "required", "aria-required", "directory", "webkitdirectory"];
var Bu = defineComponent({
  inheritAttrs: false,
  __name: "BFormFile",
  props: {
    accept: { default: "" },
    autofocus: { type: [Boolean, String], default: false },
    capture: { type: [Boolean, String], default: false },
    directory: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    form: { default: void 0 },
    id: { default: void 0 },
    label: { default: "" },
    labelClass: { default: void 0 },
    modelValue: { default: null },
    multiple: { type: [Boolean, String], default: false },
    name: { default: void 0 },
    noDrop: { type: [Boolean, String], default: false },
    noTraverse: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    size: { default: void 0 },
    state: { type: [Boolean, String, null], default: null }
  },
  emits: ["update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = useSlots(), l = e, r = _e(l, "modelValue", o, { passive: true }), s = Pe(() => l.id), i = d(() => l.autofocus), u = d(() => l.directory), c = d(() => l.disabled), f = d(() => l.multiple), b = d(() => l.noDrop);
    d(() => l.noTraverse);
    const m = d(() => l.required), h2 = d(() => l.state), $ = d(() => l.capture), B = Ot(h2), v = ref(null), { focused: S } = De(v, { initialValue: i.value }), y = toRef(() => !He(a.label)), _ = toRef(
      () => typeof l.accept == "string" ? l.accept : l.accept.join(",")
    ), C = computed(() => [
      B.value,
      {
        [`form-control-${l.size}`]: l.size !== void 0
      }
    ]), T = () => {
      var A, E;
      const V = ((A = v.value) == null ? void 0 : A.files) === null || ((E = v.value) == null ? void 0 : E.files) === void 0 ? null : [...v.value.files];
      r.value = V === null ? null : f.value === true ? V : V[0];
    }, k = (V) => {
      b.value === true && V.preventDefault();
    }, N = () => {
      r.value = null;
    };
    return watch(r, (V) => {
      V === null && v.value !== null && (v.value.value = "");
    }), t({
      blur: () => {
        S.value = false;
      },
      element: v,
      focus: () => {
        S.value = true;
      },
      reset: N
    }), (V, A) => (openBlock(), createElementBlock(Fragment, null, [
      y.value || V.label ? (openBlock(), createElementBlock("label", {
        key: 0,
        for: unref(s),
        class: normalizeClass(["form-label", V.labelClass])
      }, [
        renderSlot(V.$slots, "label", {}, () => [
          createTextVNode(toDisplayString(V.label), 1)
        ])
      ], 10, yu)) : createCommentVNode("", true),
      createBaseVNode("input", mergeProps({ id: unref(s) }, V.$attrs, {
        ref_key: "input",
        ref: v,
        type: "file",
        class: ["form-control", C.value],
        form: V.form,
        name: V.name,
        multiple: unref(f),
        disabled: unref(c),
        capture: unref($),
        accept: _.value || void 0,
        required: unref(m) || void 0,
        "aria-required": unref(m) || void 0,
        directory: unref(u),
        webkitdirectory: unref(u),
        onChange: T,
        onDrop: k
      }), null, 16, hu)
    ], 64));
  }
});
var $n = ["input", "select", "textarea"];
var Su = $n.map((e) => `${e}:not([disabled])`).join();
var wu = [...$n, "a", "button", "label"];
var Cu = "label";
var ku = "invalid-feedback";
var $u = "valid-feedback";
var Tu = "description";
var _u = "default";
var Vu = defineComponent({
  components: { BCol: Ut, BFormInvalidFeedback: xa, BFormRow: ua, BFormText: Ma, BFormValidFeedback: Da },
  props: {
    ariaInvalid: { type: [Boolean, String], default: void 0 },
    contentCols: { type: [Boolean, String, Number], default: void 0 },
    contentColsLg: { type: [Boolean, String, Number], default: void 0 },
    contentColsMd: { type: [Boolean, String, Number], default: void 0 },
    contentColsSm: { type: [Boolean, String, Number], default: void 0 },
    contentColsXl: { type: [Boolean, String, Number], default: void 0 },
    description: { type: [String], default: void 0 },
    disabled: { type: [Boolean, String], default: false },
    feedbackAriaLive: { type: String, default: "assertive" },
    id: { type: String, default: void 0 },
    invalidFeedback: { type: String, default: void 0 },
    label: { type: String, default: void 0 },
    labelAlign: { type: [Boolean, String, Number], default: void 0 },
    labelAlignLg: { type: [Boolean, String, Number], default: void 0 },
    labelAlignMd: { type: [Boolean, String, Number], default: void 0 },
    labelAlignSm: { type: [Boolean, String, Number], default: void 0 },
    labelAlignXl: { type: [Boolean, String, Number], default: void 0 },
    labelClass: { type: [Array, Object, String], default: void 0 },
    labelCols: { type: [Boolean, String, Number], default: void 0 },
    labelColsLg: { type: [Boolean, String, Number], default: void 0 },
    labelColsMd: { type: [Boolean, String, Number], default: void 0 },
    labelColsSm: { type: [Boolean, String, Number], default: void 0 },
    labelColsXl: { type: [Boolean, String, Number], default: void 0 },
    labelFor: { type: String, default: void 0 },
    labelSize: { type: String, default: void 0 },
    labelSrOnly: { type: [Boolean, String], default: false },
    state: { type: [Boolean, String], default: null },
    tooltip: { type: [Boolean, String], default: false },
    validFeedback: { type: String, default: void 0 },
    validated: { type: [Boolean, String], default: false },
    floating: { type: [Boolean, String], default: false }
  },
  setup(e) {
    const t = d(() => e.disabled), o = d(() => e.labelSrOnly), a = d(() => e.state), l = d(() => e.tooltip), n = d(() => e.validated), r = d(() => e.floating), s = null, i = ["xs", "sm", "md", "lg", "xl"], u = (_, C) => i.reduce((T, k) => {
      const N = Io(k === "xs" ? "" : k, `${C}Align`), V = _[N] || null;
      return V && (k === "xs" ? T.push(`text-${V}`) : T.push(`text-${k}-${V}`)), T;
    }, []), c = (_, C) => (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      i.reduce((T, k) => {
        const N = Io(k === "xs" ? "" : k, `${C}Cols`);
        let V = _[N];
        if (V = V === "" ? true : V || false, typeof V != "boolean" && V !== "auto") {
          const A = Number.parseInt(V);
          V = Number.isNaN(A) ? 0 : A, V = V > 0 ? V : false;
        }
        return V && (k === "xs" ? T[typeof V == "boolean" ? "col" : "cols"] = V : T[k || (typeof V == "boolean" ? "col" : "cols")] = V), T;
      }, {})
    ), f = ref(null), b = (_, C = null) => {
      if (Xa && e.labelFor && f.value !== null) {
        const T = f.value.querySelector(`#${CSS.escape(e.labelFor)}`);
        if (T) {
          const k = "aria-describedby", N = (_ || "").split(ra), V = (C || "").split(ra), A = (T.getAttribute(k) || "").split(ra).filter((E) => !V.includes(E)).concat(N).filter((E, K, oe) => oe.indexOf(E) === K).filter((E) => E).join(" ").trim();
          A ? T.setAttribute(k, A) : T.removeAttribute(k);
        }
      }
    }, m = computed(() => c(e, "content")), h2 = computed(() => u(e, "label")), $ = computed(() => c(e, "label")), B = computed(
      () => (
        // Determine if the form group will be rendered horizontal
        // based on the existence of 'content-col' or 'label-col' props
        Object.keys(m.value).length > 0 || Object.keys($.value).length > 0
      )
    ), v = Ot(a), S = ya(() => e.ariaInvalid, a);
    return watch(
      () => s,
      (_, C) => {
        _ !== C && b(_, C);
      }
    ), onMounted(() => {
      nextTick(() => {
        b(s);
      });
    }), {
      disabledBoolean: t,
      labelSrOnlyBoolean: o,
      stateBoolean: a,
      tooltipBoolean: l,
      validatedBoolean: n,
      floatingBoolean: r,
      ariaDescribedby: s,
      computedAriaInvalid: S,
      contentColProps: m,
      isHorizontal: B,
      labelAlignClasses: h2,
      labelColProps: $,
      onLegendClick: (_) => {
        if (e.labelFor || f.value === null)
          return;
        const { target: C } = _, T = C ? C.tagName : "";
        if (wu.indexOf(T) !== -1)
          return;
        const k = [...f.value.querySelectorAll(Su)].filter(ts), [N] = k;
        k.length === 1 && N instanceof HTMLElement && es(N);
      },
      stateClass: v
    };
  },
  render() {
    const e = this.$props, t = this.$slots, o = Pe(), a = !e.labelFor;
    let l = null;
    const n = Wt(Cu, {}, t) || e.label, r = n ? Gt("_BV_label_") : null;
    if (n || this.isHorizontal) {
      const _ = a ? "legend" : "label";
      if (this.labelSrOnlyBoolean)
        n && (l = h(
          _,
          {
            class: "visually-hidden",
            id: r,
            for: e.labelFor || null
          },
          n
        )), this.isHorizontal ? l = h(Ut, this.labelColProps, { default: () => l }) : l = h("div", {}, [l]);
      else {
        const C = {
          onClick: a ? this.onLegendClick : null,
          ...this.isHorizontal ? this.labelColProps : {},
          tag: this.isHorizontal ? _ : null,
          id: r,
          for: e.labelFor || null,
          tabIndex: a ? "-1" : null,
          class: [
            this.isHorizontal ? "col-form-label" : "form-label",
            {
              "bv-no-focus-ring": a,
              "col-form-label": this.isHorizontal || a,
              "pt-0": !this.isHorizontal && a,
              "d-block": !this.isHorizontal && !a,
              [`col-form-label-${e.labelSize}`]: !!e.labelSize
            },
            this.labelAlignClasses,
            e.labelClass
          ]
        };
        this.isHorizontal ? l = h(Ut, C, { default: () => n }) : l = h(_, C, n);
      }
    }
    let s = null;
    const i = Wt(ku, {}, t) || this.invalidFeedback, u = i ? Gt("_BV_feedback_invalid_") : void 0;
    i && (s = h(
      xa,
      {
        ariaLive: e.feedbackAriaLive,
        id: u,
        state: this.stateBoolean,
        tooltip: this.tooltipBoolean
      },
      { default: () => i }
    ));
    let c = null;
    const f = Wt($u, {}, t) || this.validFeedback, b = f ? Gt("_BV_feedback_valid_") : void 0;
    f && (c = h(
      Da,
      {
        ariaLive: e.feedbackAriaLive,
        id: b,
        state: this.stateBoolean,
        tooltip: this.tooltipBoolean
      },
      { default: () => f }
      // validFeedbackContent
    ));
    let m = null;
    const h2 = Wt(Tu, {}, t) || this.description, $ = h2 ? Gt("_BV_description_") : void 0;
    h2 && (m = h(
      Ma,
      {
        id: $
      },
      { default: () => h2 }
    ));
    const B = this.ariaDescribedby = [
      $,
      this.stateBoolean === false ? u : null,
      this.stateBoolean === true ? b : null
    ].filter((_) => _).join(" ") || null, v = [
      Wt(_u, { ariaDescribedby: B, descriptionId: $, id: o, labelId: r }, t) || "",
      s,
      c,
      m
    ];
    !this.isHorizontal && this.floatingBoolean && v.push(l);
    let S = h(
      "div",
      {
        ref: "content",
        class: [
          {
            "form-floating": !this.isHorizontal && this.floatingBoolean
          }
        ]
      },
      v
    );
    this.isHorizontal && (S = h(Ut, { ref: "content", ...this.contentColProps }, { default: () => v }));
    const y = {
      class: [
        this.stateClass,
        {
          "was-validated": this.validatedBoolean
        }
      ],
      id: Pe(() => e.id).value,
      disabled: a ? this.disabledBoolean : null,
      role: a ? null : "group",
      "aria-invalid": this.computedAriaInvalid,
      // Only apply `aria-labelledby` if we are a horizontal fieldset
      // as the legend is no longer a direct child of fieldset
      "aria-labelledby": a && this.isHorizontal ? r : null
    };
    return this.isHorizontal && !a ? h(ua, y, { default: () => [l, S] }) : h(
      a ? "fieldset" : "div",
      y,
      this.isHorizontal && a ? [h(ua, null, { default: () => [l, S] })] : this.isHorizontal || !this.floatingBoolean ? [l, S] : [S]
    );
  }
});
var Au = ["id", "value", "name", "form", "type", "disabled", "placeholder", "required", "autocomplete", "readonly", "min", "max", "step", "list", "aria-required", "aria-invalid"];
var Ou = defineComponent({
  __name: "BFormInput",
  props: {
    max: { default: void 0 },
    min: { default: void 0 },
    step: { default: void 0 },
    type: { default: "text" },
    ariaInvalid: { type: [Boolean, String], default: void 0 },
    autocomplete: { default: void 0 },
    autofocus: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    form: { default: void 0 },
    formatter: { type: Function, default: void 0 },
    id: { default: void 0 },
    lazy: { type: [Boolean, String], default: false },
    lazyFormatter: { type: [Boolean, String], default: false },
    list: { default: void 0 },
    modelValue: { default: "" },
    name: { default: void 0 },
    number: { type: [Boolean, String], default: false },
    placeholder: { default: void 0 },
    plaintext: { type: [Boolean, String], default: false },
    readonly: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    size: { default: void 0 },
    state: { type: [Boolean, String, null], default: null },
    trim: { type: [Boolean, String], default: false },
    debounce: { default: 0 },
    debounceMaxWait: { default: NaN }
  },
  emits: ["update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, { input: n, computedId: r, computedAriaInvalid: s, onInput: i, onChange: u, onBlur: c, focus: f, blur: b } = an(a, l), m = d(() => a.disabled), h2 = d(() => a.required), $ = d(() => a.readonly), B = d(() => a.plaintext), v = d(() => a.state), S = Ot(v), y = ref(false), _ = computed(() => {
      const C = a.type === "range", T = a.type === "color";
      return [
        S.value,
        {
          "form-control-highlighted": y.value,
          "form-range": C,
          "form-control": T || !B.value && !C,
          "form-control-color": T,
          "form-control-plaintext": B.value && !C && !T,
          [`form-control-${a.size}`]: !!a.size
        }
      ];
    });
    return t({
      blur: b,
      element: n,
      focus: f
    }), (C, T) => (openBlock(), createElementBlock("input", {
      id: unref(r),
      ref_key: "input",
      ref: n,
      value: C.modelValue,
      class: normalizeClass(_.value),
      name: C.name || void 0,
      form: C.form || void 0,
      type: C.type,
      disabled: unref(m),
      placeholder: C.placeholder,
      required: unref(h2) || void 0,
      autocomplete: C.autocomplete || void 0,
      readonly: unref($) || unref(B),
      min: C.min,
      max: C.max,
      step: C.step,
      list: C.type !== "password" ? C.list : void 0,
      "aria-required": unref(h2) || void 0,
      "aria-invalid": unref(s),
      onInput: T[0] || (T[0] = (k) => unref(i)(k)),
      onChange: T[1] || (T[1] = (k) => unref(u)(k)),
      onBlur: T[2] || (T[2] = (k) => unref(c)(k))
    }, null, 42, Au));
  }
});
var Eu = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "value", "aria-required"];
var Pu = ["for"];
var Tn = defineComponent({
  inheritAttrs: false,
  __name: "BFormRadio",
  props: {
    ariaLabel: { default: void 0 },
    ariaLabelledby: { default: void 0 },
    autofocus: { type: [Boolean, String], default: false },
    button: { type: [Boolean, String], default: false },
    buttonGroup: { type: [Boolean, String], default: false },
    buttonVariant: { default: null },
    disabled: { type: [Boolean, String], default: false },
    form: { default: void 0 },
    id: { default: void 0 },
    inline: { type: [Boolean, String], default: false },
    modelValue: { type: [String, Boolean, Object, Number, null], default: void 0 },
    name: { default: void 0 },
    plain: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    size: { default: void 0 },
    state: { type: [Boolean, String, null], default: null },
    value: { type: [String, Boolean, Object, Number, null], default: true }
  },
  emits: ["update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = useSlots(), r = _e(a, "modelValue", l, { passive: true }), s = Pe(() => a.id, "form-check"), i = d(() => a.autofocus), u = d(() => a.plain), c = d(() => a.button), f = d(() => a.buttonGroup), b = d(() => a.disabled), m = d(() => a.inline), h2 = d(() => a.required), $ = d(() => a.state), B = inject(Dl, null), v = ref(null), { focused: S } = De(v, {
      initialValue: i.value
    }), y = toRef(() => !He(n.default)), _ = computed({
      get: () => (B == null ? void 0 : B.modelValue.value) ?? r.value,
      set: (E) => {
        if (E !== void 0) {
          if (B !== null) {
            B.modelValue.value = E;
            return;
          }
          r.value = E;
        }
      }
    }), C = toRef(
      () => !!(a.name ?? (B == null ? void 0 : B.name.value)) && (h2.value || (B == null ? void 0 : B.required.value))
    ), T = toRef(() => f.value || ((B == null ? void 0 : B.buttons.value) ?? false)), k = computed(() => ({
      plain: u.value || ((B == null ? void 0 : B.plain.value) ?? false),
      button: c.value || ((B == null ? void 0 : B.buttons.value) ?? false),
      inline: m.value || ((B == null ? void 0 : B.inline.value) ?? false),
      state: $.value || (B == null ? void 0 : B.state.value),
      size: a.size ?? (B == null ? void 0 : B.size.value) ?? "md",
      // This is where the true default is made
      buttonVariant: a.buttonVariant ?? (B == null ? void 0 : B.buttonVariant.value) ?? "secondary"
      // This is where the true default is made
    })), N = Zl(k), V = Jl(k), A = Ql(k);
    return t({
      blur: () => {
        S.value = false;
      },
      element: v,
      focus: () => {
        S.value = true;
      }
    }), (E, K) => (openBlock(), createBlock(Cn, {
      skip: T.value,
      class: normalizeClass(unref(N))
    }, {
      default: withCtx(() => {
        var oe, F, z;
        return [
          withDirectives(createBaseVNode("input", mergeProps({ id: unref(s) }, E.$attrs, {
            ref_key: "input",
            ref: v,
            "onUpdate:modelValue": K[0] || (K[0] = (D) => _.value = D),
            class: unref(V),
            type: "radio",
            disabled: unref(b) || ((oe = unref(B)) == null ? void 0 : oe.disabled.value),
            required: C.value || void 0,
            name: E.name || ((F = unref(B)) == null ? void 0 : F.name.value),
            form: E.form || ((z = unref(B)) == null ? void 0 : z.form.value),
            "aria-label": E.ariaLabel,
            "aria-labelledby": E.ariaLabelledby,
            value: E.value,
            "aria-required": C.value || void 0
          }), null, 16, Eu), [
            [vModelRadio, _.value]
          ]),
          y.value || unref(u) === false ? (openBlock(), createElementBlock("label", {
            key: 0,
            for: unref(s),
            class: normalizeClass(unref(A))
          }, [
            renderSlot(E.$slots, "default")
          ], 10, Pu)) : createCommentVNode("", true)
        ];
      }),
      _: 3
    }, 8, ["skip", "class"]));
  }
});
var Nu = ["id"];
var Iu = ["innerHTML"];
var Fu = defineComponent({
  __name: "BFormRadioGroup",
  props: {
    ariaInvalid: { type: [Boolean, String], default: void 0 },
    autofocus: { type: [Boolean, String], default: false },
    buttonVariant: { default: "secondary" },
    buttons: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    disabledField: { default: "disabled" },
    form: { default: void 0 },
    htmlField: { default: "html" },
    id: { default: void 0 },
    modelValue: { type: [String, Boolean, Object, Number, null], default: null },
    name: { default: void 0 },
    options: { default: () => [] },
    plain: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    size: { default: "md" },
    stacked: { type: [Boolean, String], default: false },
    state: { type: [Boolean, String, null], default: null },
    textField: { default: "text" },
    validated: { type: [Boolean, String], default: false },
    valueField: { default: "value" }
  },
  emits: ["change", "input", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = _e(a, "modelValue", l, { passive: true }), r = Pe(() => a.id, "radio"), s = Pe(() => a.name, "checkbox"), i = d(() => a.autofocus), u = d(() => a.buttons), c = d(() => a.disabled), f = d(() => a.plain), b = d(() => a.required), m = d(() => a.stacked), h2 = d(() => a.state), $ = d(() => a.validated), B = ref(null), { focused: v } = De(B, {
      initialValue: i.value
    });
    provide(Dl, {
      modelValue: n,
      buttonVariant: toRef(() => a.buttonVariant),
      form: toRef(() => a.form),
      name: s,
      buttons: u,
      state: h2,
      plain: f,
      size: toRef(() => a.size),
      inline: toRef(() => !m.value),
      required: b,
      disabled: c
    }), watch(n, (T) => {
      l("input", T), nextTick(() => {
        l("change", T);
      });
    });
    const S = computed(
      () => a.options.map(
        (T, k) => typeof T == "string" || typeof T == "number" ? {
          value: T,
          disabled: c.value,
          text: T.toString(),
          html: void 0,
          self: Symbol(`radioGroupOptionItem${k}`)
        } : {
          value: T[a.valueField],
          disabled: T[a.disabledField],
          ...T.props ? T.props : {},
          text: T[a.textField],
          html: T[a.htmlField],
          self: Symbol(`radioGroupOptionItem${k}`)
        }
      )
    ), y = computed(() => ({
      required: b.value,
      ariaInvalid: a.ariaInvalid,
      state: h2.value,
      validated: $.value,
      buttons: u.value,
      stacked: m.value,
      size: a.size
    })), _ = en(y), C = tn(y);
    return t({
      blur: () => {
        v.value = false;
      },
      focus: () => {
        v.value = true;
      }
    }), (T, k) => (openBlock(), createElementBlock("div", mergeProps(unref(_), {
      id: unref(r),
      ref_key: "element",
      ref: B,
      role: "radiogroup",
      class: [unref(C), "bv-no-focus-ring"],
      tabindex: "-1"
    }), [
      renderSlot(T.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(S.value, (N) => (openBlock(), createBlock(Tn, {
        key: N.self,
        disabled: N.disabled,
        value: N.value
      }, {
        default: withCtx(() => [
          N.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: N.html
          }, null, 8, Iu)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(N.text), 1)
          ], 64))
        ]),
        _: 2
      }, 1032, ["disabled", "value"]))), 128)),
      renderSlot(T.$slots, "default")
    ], 16, Nu));
  }
});
var Lu = ["value", "disabled"];
var po = defineComponent({
  __name: "BFormSelectOption",
  props: {
    disabled: { type: [Boolean, String], default: false },
    value: { default: void 0 }
  },
  setup(e) {
    const t = e, o = d(() => t.disabled);
    return (a, l) => (openBlock(), createElementBlock("option", {
      value: a.value,
      disabled: unref(o)
    }, [
      renderSlot(a.$slots, "default")
    ], 8, Lu));
  }
});
var zu = ["label"];
var Hu = ["innerHTML"];
var _n = defineComponent({
  __name: "BFormSelectOptionGroup",
  props: {
    disabledField: { default: "disabled" },
    htmlField: { default: "html" },
    label: { default: void 0 },
    options: { default: () => [] },
    textField: { default: "text" },
    valueField: { default: "value" }
  },
  setup(e) {
    const t = e, { normalizedOptions: o } = on(() => t.options, t), a = computed(() => o.value);
    return (l, n) => (openBlock(), createElementBlock("optgroup", { label: l.label }, [
      renderSlot(l.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(a.value, (r, s) => (openBlock(), createBlock(po, mergeProps({
        key: s,
        disabled: r.disabled,
        value: r.value
      }, l.$attrs), {
        default: withCtx(() => [
          r.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: r.html
          }, null, 8, Hu)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(r.text), 1)
          ], 64))
        ]),
        _: 2
      }, 1040, ["disabled", "value"]))), 128)),
      renderSlot(l.$slots, "default")
    ], 8, zu));
  }
});
var Ru = ["id", "name", "form", "multiple", "size", "disabled", "required", "aria-required", "aria-invalid"];
var xu = ["innerHTML"];
var Mu = defineComponent({
  __name: "BFormSelect",
  props: {
    ariaInvalid: { type: [Boolean, String], default: void 0 },
    autofocus: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    disabledField: { default: "disabled" },
    form: { default: void 0 },
    htmlField: { default: "html" },
    id: { default: void 0 },
    labelField: { default: "label" },
    modelValue: { type: [String, Object, Number, Boolean, null], default: "" },
    multiple: { type: [Boolean, String], default: false },
    name: { default: void 0 },
    options: { default: () => [] },
    optionsField: { default: "options" },
    plain: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    selectSize: { default: 0 },
    size: { default: "md" },
    state: { type: [Boolean, String, null], default: null },
    textField: { default: "text" },
    valueField: { default: "value" }
  },
  emits: ["update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, n = _e(a, "modelValue", o, { passive: true }), r = Pe(() => a.id, "input"), s = d(() => a.autofocus), i = d(() => a.disabled), u = d(() => a.multiple), c = d(() => a.plain), f = d(() => a.required), b = d(() => a.state), m = Se(() => a.selectSize), h2 = Ot(b), $ = ref(null), { focused: B } = De($, {
      initialValue: s.value
    }), v = computed(() => [
      h2.value,
      {
        "form-control": c.value,
        [`form-control-${a.size}`]: a.size !== "md" && c.value,
        "form-select": !c.value,
        [`form-select-${a.size}`]: a.size !== "md" && !c.value
      }
    ]), S = toRef(
      () => m.value || c.value ? m.value : void 0
    ), y = ya(() => a.ariaInvalid, b), { normalizedOptions: _, isComplex: C } = on(() => a.options, a), T = computed(
      () => _.value
    ), k = computed({
      get: () => n.value,
      set: (N) => {
        n.value = N;
      }
    });
    return t({
      blur: () => {
        B.value = false;
      },
      element: $,
      focus: () => {
        B.value = true;
      }
    }), (N, V) => withDirectives((openBlock(), createElementBlock("select", {
      id: unref(r),
      ref_key: "input",
      ref: $,
      "onUpdate:modelValue": V[0] || (V[0] = (A) => k.value = A),
      class: normalizeClass(v.value),
      name: N.name,
      form: N.form || void 0,
      multiple: unref(u) || void 0,
      size: S.value,
      disabled: unref(i),
      required: unref(f) || void 0,
      "aria-required": unref(f) || void 0,
      "aria-invalid": unref(y)
    }, [
      renderSlot(N.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(T.value, (A, E) => (openBlock(), createElementBlock(Fragment, { key: E }, [
        unref(C)(A) ? (openBlock(), createBlock(_n, {
          key: 0,
          label: A.label,
          options: A.options,
          "value-field": N.valueField,
          "text-field": N.textField,
          "html-field": N.htmlField,
          "disabled-field": N.disabledField
        }, null, 8, ["label", "options", "value-field", "text-field", "html-field", "disabled-field"])) : (openBlock(), createBlock(po, {
          key: 1,
          value: A.value,
          disabled: A.disabled
        }, {
          default: withCtx(() => [
            A.html ? (openBlock(), createElementBlock("span", {
              key: 0,
              innerHTML: A.html
            }, null, 8, xu)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(A.text), 1)
            ], 64))
          ]),
          _: 2
        }, 1032, ["value", "disabled"]))
      ], 64))), 128)),
      renderSlot(N.$slots, "default")
    ], 10, Ru)), [
      [vModelSelect, k.value]
    ]);
  }
});
var Oa = "ArrowDown";
var Mo = "End";
var Do = "Home";
var jo = "PageDown";
var qo = "PageUp";
var Ea = "ArrowUp";
var Du = ["lang", "tabindex", "title"];
var ju = ["name", "form", "value"];
var qu = ["id", "dir", "tabindex", "aria-label", "aria-invalid", "aria-required", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext"];
var We = {
  min: 1,
  max: 100,
  step: 1,
  repeatDelay: 500,
  repeatInterval: 100,
  repeatThreshold: 10,
  repeatMultiplier: 4
};
var Wu = defineComponent({
  __name: "BFormSpinbutton",
  props: {
    ariaControls: { default: void 0 },
    ariaLabel: { default: void 0 },
    disabled: { type: [Boolean, String], default: false },
    form: { default: void 0 },
    formatterFn: { type: Function, default: void 0 },
    id: { default: void 0 },
    inline: { type: [Boolean, String], default: false },
    labelDecrement: { default: "Decrement" },
    labelIncrement: { default: "Increment" },
    locale: { default: void 0 },
    max: { default: We.max },
    min: { default: We.min },
    modelValue: { default: null },
    name: { default: void 0 },
    placeholder: { default: void 0 },
    readonly: { type: [Boolean, String], default: false },
    repeatDelay: { default: We.repeatDelay },
    repeatInterval: { default: We.repeatInterval },
    repeatStepMultiplier: { default: We.repeatMultiplier },
    repeatThreshold: { default: We.repeatThreshold },
    required: { type: [Boolean, String], default: false },
    size: { default: void 0 },
    state: { type: [Boolean, String, null], default: null },
    step: { default: We.step },
    vertical: { type: [Boolean, String], default: false },
    wrap: { type: [Boolean, String], default: false }
  },
  emits: ["change", "update:modelValue"],
  setup(e, { emit: t }) {
    const o = [Ea, Oa, Do, Mo, qo, jo], a = e, l = t, n = _e(a, "modelValue", l, { passive: true }), r = ref(null), { focused: s } = De(r), i = Pe(() => a.id, "spinbutton"), u = d(() => a.disabled), c = d(() => a.inline), f = d(() => a.readonly), b = d(() => a.vertical), m = d(() => a.required), h2 = d(() => a.wrap), $ = d(() => a.state), B = computed(() => ({
      disabled: u.value,
      readonly: f.value,
      focus: s.value,
      "d-inline-flex": c.value || b.value,
      "d-flex": !c.value && !b.value,
      "align-items-stretch": !b.value,
      "flex-column": b.value,
      [`form-control-${a.size}`]: a.size !== void 0
    })), v = computed(() => ({
      "d-flex": b.value,
      "align-self-center": !b.value,
      "align-items-center": b.value,
      "border-top": b.value,
      "border-bottom": b.value,
      "border-start": !b.value,
      "border-end": !b.value
    }));
    let S, y, _ = false;
    const C = Se(() => a.step), T = toRef(
      () => Number.isNaN(C.value) ? We.step : C.value
    ), k = Se(() => a.min), N = toRef(
      () => Number.isNaN(k.value) ? We.min : k.value
    ), V = Se(() => a.max), A = toRef(() => {
      const x = T.value, U = N.value;
      return Math.floor((V.value - U) / x) * x + U;
    }), E = Se(() => a.repeatDelay, {
      nanToZero: true,
      method: "parseInt"
    }), K = toRef(
      () => E.value > 0 ? E.value : We.repeatDelay
    ), oe = Se(() => a.repeatInterval, {
      nanToZero: true,
      method: "parseInt"
    }), F = toRef(
      () => oe.value > 0 ? oe.value : We.repeatInterval
    ), z = Se(() => a.repeatThreshold, {
      nanToZero: true,
      method: "parseInt"
    }), D = toRef(
      () => Math.max(
        Number.isNaN(z.value) ? We.repeatThreshold : z.value,
        1
      )
    ), J = Se(() => a.repeatStepMultiplier, {
      nanToZero: true,
      method: "parseInt"
    }), ie = toRef(
      () => Math.max(
        Number.isNaN(J.value) ? We.repeatMultiplier : J.value,
        1
      )
    ), te = toRef(() => {
      const x = T.value;
      return Math.floor(x) === x ? 0 : (x.toString().split(".")[1] || "").length;
    }), he = toRef(() => Math.pow(10, te.value || 0)), Oe = toRef(
      () => n.value === null ? "" : n.value.toFixed(te.value)
    ), { isRtl: ve, locale: ge } = Ur(), ke = computed(() => {
      const U = [(a.locale ?? (ge == null ? void 0 : ge.value)) || "locale"];
      return new Intl.NumberFormat(U).resolvedOptions().locale;
    }), Ce = () => new Intl.NumberFormat(ke.value, {
      style: "decimal",
      useGrouping: false,
      minimumIntegerDigits: 1,
      minimumFractionDigits: te.value,
      maximumFractionDigits: te.value,
      notation: "standard"
    }).format, M = toRef(() => a.formatterFn ?? Ce()), X = (x) => {
      let { value: U } = n;
      if (!u.value && U !== null) {
        const re = T.value * x, Te = N.value, $e = A.value, Ve = he.value, { wrap: ot } = a;
        U = Math.round((U - Te) / re) * re + Te + re, U = Math.round(U * Ve) / Ve, n.value = U > $e ? ot ? Te : $e : U < Te ? ot ? $e : Te : U;
      }
    }, L = (x = 1) => {
      if (n.value === null) {
        n.value = N.value;
        return;
      }
      X(1 * x);
    }, j = (x = 1) => {
      if (n.value === null) {
        n.value = h2.value ? A.value : N.value;
        return;
      }
      X(-1 * x);
    }, Q = (x) => {
      x.preventDefault(), x.stopImmediatePropagation();
    };
    Ge(
      o,
      (x) => {
        const { code: U, altKey: re, ctrlKey: Te, metaKey: $e } = x;
        if (!(u.value || f.value || re || Te || $e) && (Q(x), !_)) {
          if (Be(), [Ea, Oa].includes(U)) {
            if (_ = true, U === Ea) {
              Z(x, L);
              return;
            }
            U === Oa && Z(x, j);
            return;
          }
          if (U === qo) {
            L(ie.value);
            return;
          }
          if (U === jo) {
            j(ie.value);
            return;
          }
          if (U === Do) {
            n.value = N.value;
            return;
          }
          U === Mo && (n.value = A.value);
        }
      },
      { target: r, eventName: "keydown" }
    ), Ge(
      o,
      (x) => {
        const { altKey: U, ctrlKey: re, metaKey: Te } = x;
        u.value || f.value || U || re || Te || (Q(x), Be(), _ = false, l("change", n.value));
      },
      { target: r, eventName: "keyup" }
    );
    const Z = (x, U) => {
      const { type: re } = x || {};
      if (!u.value && !f.value) {
        if (Y(x) && re === "mousedown" && x.button)
          return;
        Be(), U(1);
        const Te = D.value, $e = ie.value, Ve = K.value, ot = F.value;
        S = setTimeout(() => {
          let lt = 0;
          y = setInterval(() => {
            U(lt < Te ? 1 : $e), lt++;
          }, ot);
        }, Ve);
      }
    }, Y = (x) => x.type === "mouseup" || x.type === "mousedown", pe = (x) => {
      Y(x) && x.type === "mouseup" && x.button || (Q(x), Be(), ne(false), l("change", n.value));
    }, ne = (x) => {
      try {
        ho(x, [document.body, "mouseup", pe, false]), ho(x, [document.body, "touchend", pe, false]);
      } catch {
      }
    }, Be = () => {
      clearTimeout(S), clearInterval(y), S = void 0, y = void 0;
    }, ue = computed(() => {
      const x = {
        svg: {
          xmlns: "http://www.w3.org/2000/svg",
          width: "16",
          height: "16",
          fill: "currentColor",
          class: "bi bi-plus",
          viewBox: "0 0 16 16"
        },
        path: {
          d: "M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"
        }
      }, U = {
        svg: {
          xmlns: "http://www.w3.org/2000/svg",
          width: "16",
          height: "16",
          fill: "currentColor",
          class: "bi bi-dash",
          viewBox: "0 0 16 16"
        },
        path: { d: "M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z" }
      }, re = {
        class: [{ "py-0": !b.value }, "btn", "btn-sm", "border-0", "rounded-0"],
        tabindex: "-1",
        type: "button",
        disabled: u.value || f.value,
        "aria-disabled": u.value || f.value ? true : void 0,
        "aria-controls": i.value
      }, Te = {
        "aria-hidden": true,
        scale: s.value ? 1.5 : 1.25
      }, $e = (lt, qt) => {
        !u.value && !f.value && (Q(lt), ne(true), s.value = true, Z(lt, qt));
      }, Ve = {
        button: {
          ...re,
          "aria-label": a.labelIncrement || void 0,
          "aria-keyshortcuts": "ArrowUp"
        },
        svg: {
          ...Te,
          ...x.svg
        },
        path: {
          ...x.path
        },
        slot: {
          name: "increment"
        },
        handler: (lt) => $e(lt, L)
      }, ot = {
        button: {
          ...re,
          "aria-label": a.labelDecrement || void 0,
          "aria-keyshortcuts": "ArrowDown"
        },
        svg: {
          ...Te,
          ...U.svg
        },
        path: {
          ...U.path
        },
        slot: {
          name: "decrement"
        },
        handler: (lt) => $e(lt, j)
      };
      return {
        top: {
          ...b.value ? Ve : ot
        },
        bottom: {
          ...b.value ? ot : Ve
        }
      };
    });
    return (x, U) => (openBlock(), createElementBlock("div", {
      ref_key: "element",
      ref: r,
      class: normalizeClass(["b-form-spinbutton form-control", B.value]),
      role: "group",
      lang: ke.value,
      tabindex: unref(u) ? void 0 : "-1",
      title: x.ariaLabel,
      onClick: U[4] || (U[4] = (re) => s.value = true)
    }, [
      renderSlot(x.$slots, ue.value.top.slot.name, { hasFocus: unref(s) }, () => [
        createBaseVNode("button", mergeProps(ue.value.top.button, {
          onMousedown: U[0] || (U[0] = //@ts-ignore
          (...re) => ue.value.top.handler && ue.value.top.handler(...re)),
          onTouchstart: U[1] || (U[1] = //@ts-ignore
          (...re) => ue.value.top.handler && ue.value.top.handler(...re))
        }), [
          (openBlock(), createElementBlock("svg", normalizeProps(guardReactiveProps(ue.value.top.svg)), [
            createBaseVNode("path", normalizeProps(guardReactiveProps(ue.value.top.path)), null, 16)
          ], 16))
        ], 16)
      ]),
      x.name && !unref(u) ? (openBlock(), createElementBlock("input", {
        key: "hidden",
        type: "hidden",
        name: x.name,
        form: x.form,
        value: Oe.value
      }, null, 8, ju)) : createCommentVNode("", true),
      createBaseVNode("output", {
        id: unref(i),
        key: "output",
        class: normalizeClass(["flex-grow-1", v.value]),
        dir: unref(ve) ?? false ? "rtl" : "ltr",
        tabindex: unref(u) ? void 0 : "0",
        role: "spinbutton",
        "aria-live": "off",
        "aria-label": x.ariaLabel || void 0,
        "aria-invalid": unref($) === false || !unref(n) !== null && unref(m) ? true : void 0,
        "aria-required": unref(m) ? true : void 0,
        "aria-valuemin": N.value,
        "aria-valuemax": A.value,
        "aria-valuenow": unref(n) !== null ? unref(n) : void 0,
        "aria-valuetext": unref(n) !== null ? M.value(unref(n)) : void 0
      }, [
        createBaseVNode("bdi", null, toDisplayString((unref(n) !== null ? M.value(unref(n)) : x.placeholder) || ""), 1)
      ], 10, qu),
      renderSlot(x.$slots, ue.value.bottom.slot.name, { hasFocus: unref(s) }, () => [
        createBaseVNode("button", mergeProps(ue.value.bottom.button, {
          onMousedown: U[2] || (U[2] = //@ts-ignore
          (...re) => ue.value.bottom.handler && ue.value.bottom.handler(...re)),
          onTouchstart: U[3] || (U[3] = //@ts-ignore
          (...re) => ue.value.bottom.handler && ue.value.bottom.handler(...re))
        }), [
          (openBlock(), createElementBlock("svg", normalizeProps(guardReactiveProps(ue.value.bottom.svg)), [
            createBaseVNode("path", normalizeProps(guardReactiveProps(ue.value.bottom.path)), null, 16)
          ], 16))
        ], 16)
      ])
    ], 10, Du));
  }
});
var Gu = ["id"];
var Vn = defineComponent({
  __name: "BFormTag",
  props: {
    disabled: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    noRemove: { type: [Boolean, String], default: false },
    pill: { type: [Boolean, String], default: false },
    removeLabel: { default: "Remove tag" },
    tag: { default: "span" },
    title: { default: void 0 },
    variant: { default: "secondary" }
  },
  emits: ["remove"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = useSlots(), n = Pe(() => o.id), r = d(() => o.disabled), s = d(() => o.noRemove), i = d(() => o.pill), u = computed(
      () => {
        var b;
        return ((((b = l.default) == null ? void 0 : b.call(l, {})[0].children) ?? "").toString() || o.title) ?? "";
      }
    ), c = toRef(() => `${n.value}taglabel__`), f = computed(() => ({
      [`text-bg-${o.variant}`]: o.variant !== null,
      "rounded-pill": i.value,
      disabled: r.value
    }));
    return (b, m) => (openBlock(), createBlock(resolveDynamicComponent(b.tag), {
      id: unref(n),
      title: u.value,
      class: normalizeClass(["badge b-form-tag d-inline-flex align-items-center mw-100", f.value]),
      "aria-labelledby": c.value
    }, {
      default: withCtx(() => [
        createBaseVNode("span", {
          id: c.value,
          class: "b-form-tag-content flex-grow-1 text-truncate"
        }, [
          renderSlot(b.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(u.value), 1)
          ])
        ], 8, Gu),
        !unref(r) && !unref(s) ? (openBlock(), createBlock(jt, {
          key: 0,
          "aria-keyshortcuts": "Delete",
          "aria-label": b.removeLabel,
          class: "b-form-tag-remove",
          "aria-describedby": c.value,
          "aria-controls": b.id,
          onClick: m[0] || (m[0] = (h2) => a("remove", u.value))
        }, null, 8, ["aria-label", "aria-describedby", "aria-controls"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["id", "title", "class", "aria-labelledby"]));
  }
});
var Uu = ["id"];
var Xu = ["id", "for", "aria-live"];
var Ku = ["id", "aria-live"];
var Yu = ["id"];
var Zu = ["aria-controls"];
var Ju = {
  role: "group",
  class: "d-flex"
};
var Qu = ["id", "disabled", "value", "type", "placeholder", "form", "required", "aria-required"];
var ed = ["disabled"];
var td = {
  "aria-live": "polite",
  "aria-atomic": "true"
};
var ad = {
  key: 0,
  class: "d-block invalid-feedback"
};
var od = {
  key: 1,
  class: "form-text text-body-secondary"
};
var ld = {
  key: 2,
  class: "form-text text-body-secondary"
};
var nd = ["name", "value"];
var sd = defineComponent({
  __name: "BFormTags",
  props: {
    addButtonText: { default: "Add" },
    addButtonVariant: { default: "outline-secondary" },
    addOnChange: { type: [Boolean, String], default: false },
    autofocus: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    duplicateTagText: { default: "Duplicate tag(s)" },
    form: { default: void 0 },
    inputAttrs: { default: void 0 },
    inputClass: { default: void 0 },
    inputId: { default: void 0 },
    inputType: { default: "text" },
    invalidTagText: { default: "Invalid tag(s)" },
    limit: { default: void 0 },
    limitTagsText: { default: "Tag limit reached" },
    modelValue: { default: () => [] },
    name: { default: void 0 },
    noAddOnEnter: { type: [Boolean, String], default: false },
    noOuterFocus: { type: [Boolean, String], default: false },
    noTagRemove: { type: [Boolean, String], default: false },
    placeholder: { default: "Add tag..." },
    removeOnDelete: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    separator: { default: void 0 },
    size: { default: "md" },
    state: { type: [Boolean, String, null], default: null },
    tagClass: { default: void 0 },
    tagPills: { type: [Boolean, String], default: false },
    tagRemoveLabel: { default: void 0 },
    tagRemovedLabel: { default: "Tag removed" },
    tagValidator: { type: Function, default: () => true },
    tagVariant: { default: "secondary" }
  },
  emits: ["blur", "focus", "focusin", "focusout", "input", "tag-state", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = _e(a, "modelValue", l), r = Pe(), s = d(() => a.addOnChange), i = d(() => a.autofocus), u = d(() => a.disabled), c = d(() => a.noAddOnEnter), f = d(() => a.noOuterFocus), b = d(() => a.noTagRemove), m = d(() => a.removeOnDelete), h2 = d(() => a.required), $ = d(() => a.state), B = d(() => a.tagPills), v = Se(() => a.limit ?? NaN), S = Ot($), y = ref(null), { focused: _ } = De(y, {
      initialValue: i.value
    }), C = toRef(() => a.inputId || `${r.value}input__`), T = ref([...n.value]), k = ref(""), N = ref(n.value.length > 0), V = ref(""), A = ref([]), E = ref([]), K = ref([]);
    Ha(n, T, {
      direction: "ltr",
      transform: {
        ltr: (j) => [...j]
      }
    });
    const oe = computed(() => [
      S.value,
      {
        [`form-control-${a.size}`]: a.size !== "md",
        disabled: u.value,
        focus: _.value
      }
    ]), F = computed(() => T.value.includes(k.value)), z = computed(
      () => k.value === "" ? false : !a.tagValidator(k.value)
    ), D = toRef(() => T.value.length === v.value), J = toRef(() => !z.value && !F.value), ie = computed(() => ({
      addButtonText: a.addButtonText,
      addButtonVariant: a.addButtonVariant,
      addTag: X,
      disableAddButton: J.value,
      disabled: u.value,
      duplicateTagText: a.duplicateTagText,
      duplicateTags: K.value,
      form: a.form,
      inputAttrs: {
        ...a.inputAttrs,
        disabled: u.value,
        form: a.form,
        id: C,
        value: k
      },
      inputHandlers: {
        input: ve,
        keydown: ke,
        change: ge
      },
      inputId: C,
      inputType: a.inputType,
      invalidTagText: a.invalidTagText,
      invalidTags: E.value,
      isDuplicate: F.value,
      isInvalid: z.value,
      isLimitReached: D.value,
      limitTagsText: a.limitTagsText,
      limit: v.value,
      noTagRemove: b.value,
      placeholder: a.placeholder,
      removeTag: L,
      required: h2.value,
      separator: a.separator,
      size: a.size,
      state: $.value,
      tagClass: a.tagClass,
      tagPills: B.value,
      tagRemoveLabel: a.tagRemoveLabel,
      tagVariant: a.tagVariant,
      tags: T.value
    })), te = (j) => {
      if (u.value) {
        j.target.blur();
        return;
      }
      l("focusin", j);
    }, he = (j) => {
      u.value || f.value || (_.value = true, l("focus", j));
    }, Oe = (j) => {
      _.value = false, l("blur", j);
    }, ve = (j) => {
      var Z, Y;
      const Q = typeof j == "string" ? j : j.target.value;
      if (N.value = false, (Z = a.separator) != null && Z.includes(Q.charAt(0)) && Q.length > 0) {
        y.value && (y.value.value = "");
        return;
      }
      if (k.value = Q, (Y = a.separator) != null && Y.includes(Q.charAt(Q.length - 1))) {
        X(Q.slice(0, Q.length - 1));
        return;
      }
      A.value = a.tagValidator(Q) && !F.value ? [Q] : [], E.value = a.tagValidator(Q) ? [] : [Q], K.value = F.value ? [Q] : [], l("tag-state", A.value, E.value, K.value);
    }, ge = (j) => {
      s.value && (ve(j), F.value || X(k.value));
    }, ke = (j) => {
      if (j.key === "Enter" && !c.value) {
        X(k.value);
        return;
      }
      (j.key === "Backspace" || j.key === "Delete") && m.value && k.value === "" && N.value && T.value.length > 0 ? L(T.value[T.value.length - 1]) : N.value = true;
    };
    Ge(ke, { target: y });
    const Ce = computed(() => {
      if (a.separator)
        return typeof a.separator == "string" ? a.separator : a.separator.join("");
    }), M = computed(() => {
      if (Ce.value)
        return new RegExp(`[${Mr(Ce.value)}]+`);
    }), X = (j) => {
      j = (j ?? k.value).trim();
      const Q = M.value ? j.split(M.value).map((pe) => pe.trim()) : [j], Z = [];
      for (const pe of Q)
        if (!(pe === "" || F.value || !a.tagValidator(pe))) {
          if (v.value && D.value)
            break;
          Z.push(pe);
        }
      const Y = [...n.value, ...Z];
      k.value = "", N.value = true, n.value = Y, l("input", Y), _.value = true;
    }, L = (j) => {
      const Q = T.value.indexOf((j == null ? void 0 : j.toString()) ?? "");
      Q !== -1 && (V.value = T.value.splice(Q, 1).toString(), n.value = T.value);
    };
    return t({
      blur: () => {
        _.value = false;
      },
      element: y,
      focus: () => {
        _.value = true;
      }
    }), (j, Q) => (openBlock(), createElementBlock("div", {
      id: unref(r),
      class: normalizeClass(["b-form-tags form-control h-auto", oe.value]),
      role: "group",
      tabindex: "-1",
      onFocusin: te,
      onFocusout: Q[1] || (Q[1] = (Z) => l("focusout", Z))
    }, [
      createBaseVNode("output", {
        id: `${unref(r)}selected_tags__`,
        class: "visually-hidden",
        for: C.value,
        "aria-live": unref(_) ? "polite" : "off",
        "aria-atomic": "true",
        "aria-relevant": "additions text"
      }, toDisplayString(T.value.join(", ")), 9, Xu),
      createBaseVNode("div", {
        id: `${unref(r)}removed_tags__`,
        role: "status",
        "aria-live": unref(_) ? "assertive" : "off",
        "aria-atomic": "true",
        class: "visually-hidden"
      }, " (" + toDisplayString(j.tagRemovedLabel) + ") " + toDisplayString(V.value), 9, Ku),
      renderSlot(j.$slots, "default", normalizeProps(guardReactiveProps(ie.value)), () => [
        createBaseVNode("ul", {
          id: `${unref(r)}tag_list__`,
          class: "b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(T.value, (Z, Y) => renderSlot(j.$slots, "tag", {
            key: Y,
            tag: Z,
            tagClass: j.tagClass,
            tagVariant: j.tagVariant,
            tagPills: unref(B),
            removeTag: L
          }, () => [
            (openBlock(), createBlock(Vn, {
              key: Z,
              class: normalizeClass(j.tagClass),
              tag: "li",
              variant: j.tagVariant,
              pill: j.tagPills,
              onRemove: L
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(Z), 1)
              ]),
              _: 2
            }, 1032, ["class", "variant", "pill"]))
          ])), 128)),
          createBaseVNode("li", {
            role: "none",
            "aria-live": "off",
            class: "b-from-tags-field flex-grow-1",
            "aria-controls": `${unref(r)}tag_list__`
          }, [
            createBaseVNode("div", Ju, [
              createBaseVNode("input", mergeProps({
                id: C.value,
                ref_key: "input",
                ref: y,
                disabled: unref(u),
                value: k.value,
                type: j.inputType,
                placeholder: j.placeholder,
                class: "b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0",
                style: { outline: "currentcolor none 0px", "min-width": "5rem" }
              }, j.inputAttrs, {
                form: j.form,
                required: unref(h2) || void 0,
                "aria-required": unref(h2) || void 0,
                onInput: ve,
                onChange: ge,
                onFocus: he,
                onBlur: Oe
              }), null, 16, Qu),
              J.value ? (openBlock(), createElementBlock("button", {
                key: 0,
                type: "button",
                class: normalizeClass(["btn b-form-tags-button py-0", [
                  j.inputClass,
                  {
                    [`btn-${j.addButtonVariant}`]: j.addButtonVariant !== null,
                    "disabled invisible": k.value.length === 0
                  }
                ]]),
                style: { "font-size": "90%" },
                disabled: unref(u) || k.value.length === 0 || D.value,
                onClick: Q[0] || (Q[0] = (Z) => X(k.value))
              }, [
                renderSlot(j.$slots, "add-button-text", {}, () => [
                  createTextVNode(toDisplayString(j.addButtonText), 1)
                ])
              ], 10, ed)) : createCommentVNode("", true)
            ])
          ], 8, Zu)
        ], 8, Yu),
        createBaseVNode("div", td, [
          z.value ? (openBlock(), createElementBlock("div", ad, toDisplayString(j.invalidTagText) + ": " + toDisplayString(k.value), 1)) : createCommentVNode("", true),
          F.value ? (openBlock(), createElementBlock("small", od, toDisplayString(j.duplicateTagText) + ": " + toDisplayString(k.value), 1)) : createCommentVNode("", true),
          T.value.length === j.limit ? (openBlock(), createElementBlock("small", ld, "Tag limit reached")) : createCommentVNode("", true)
        ])
      ]),
      j.name ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(T.value, (Z, Y) => (openBlock(), createElementBlock("input", {
        key: Y,
        type: "hidden",
        name: j.name,
        value: Z
      }, null, 8, nd))), 128)) : createCommentVNode("", true)
    ], 42, Uu));
  }
});
var rd = ["id", "name", "form", "value", "disabled", "placeholder", "required", "autocomplete", "readonly", "aria-required", "aria-invalid", "rows", "wrap"];
var id = defineComponent({
  __name: "BFormTextarea",
  props: {
    noResize: { type: [Boolean, String], default: false },
    rows: { default: 2 },
    wrap: { default: "soft" },
    ariaInvalid: { type: [Boolean, String], default: void 0 },
    autocomplete: { default: void 0 },
    autofocus: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    form: { default: void 0 },
    formatter: { type: Function, default: void 0 },
    id: { default: void 0 },
    lazy: { type: [Boolean, String], default: false },
    lazyFormatter: { type: [Boolean, String], default: false },
    list: { default: void 0 },
    modelValue: { default: "" },
    name: { default: void 0 },
    number: { type: [Boolean, String], default: false },
    placeholder: { default: void 0 },
    plaintext: { type: [Boolean, String], default: false },
    readonly: { type: [Boolean, String], default: false },
    required: { type: [Boolean, String], default: false },
    size: { default: void 0 },
    state: { type: [Boolean, String, null], default: null },
    trim: { type: [Boolean, String], default: false },
    debounce: { default: 0 },
    debounceMaxWait: { default: NaN }
  },
  emits: ["update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, { input: n, computedId: r, computedAriaInvalid: s, onInput: i, onChange: u, onBlur: c, focus: f, blur: b } = an(a, l), m = d(() => a.disabled), h2 = d(() => a.required), $ = d(() => a.readonly), B = d(() => a.plaintext), v = d(() => a.noResize), S = d(() => a.state), y = Ot(S), _ = computed(() => [
      y.value,
      B.value ? "form-control-plaintext" : "form-control",
      {
        [`form-control-${a.size}`]: !!a.size
      }
    ]), C = computed(() => ({
      resize: v.value ? "none" : void 0
    }));
    return t({
      blur: b,
      element: n,
      focus: f
    }), (T, k) => (openBlock(), createElementBlock("textarea", {
      id: unref(r),
      ref_key: "input",
      ref: n,
      class: normalizeClass(_.value),
      name: T.name || void 0,
      form: T.form || void 0,
      value: T.modelValue ?? void 0,
      disabled: unref(m),
      placeholder: T.placeholder,
      required: unref(h2) || void 0,
      autocomplete: T.autocomplete || void 0,
      readonly: unref($) || unref(B),
      "aria-required": T.required || void 0,
      "aria-invalid": unref(s),
      rows: T.rows,
      style: normalizeStyle(C.value),
      wrap: T.wrap || void 0,
      onInput: k[0] || (k[0] = (N) => unref(i)(N)),
      onChange: k[1] || (k[1] = (N) => unref(u)(N)),
      onBlur: k[2] || (k[2] = (N) => unref(c)(N))
    }, null, 46, rd));
  }
});
var ud = {
  key: 0,
  class: "input-group-text"
};
var dd = ["innerHTML"];
var cd = { key: 1 };
var fd = {
  key: 0,
  class: "input-group-text"
};
var vd = ["innerHTML"];
var pd = { key: 1 };
var md = defineComponent({
  __name: "BInputGroup",
  props: {
    append: { default: void 0 },
    appendHtml: { default: void 0 },
    id: { default: void 0 },
    prepend: { default: void 0 },
    prependHtml: { default: void 0 },
    size: { default: "md" },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, o = computed(() => ({
      [`input-group-${t.size}`]: t.size !== "md"
    })), a = toRef(() => !!t.append || !!t.appendHtml), l = toRef(() => !!t.prepend || !!t.prependHtml);
    return (n, r) => (openBlock(), createBlock(resolveDynamicComponent(n.tag), {
      id: n.id,
      class: normalizeClass(["input-group", o.value]),
      role: "group"
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "prepend", {}, () => [
          l.value ? (openBlock(), createElementBlock("span", ud, [
            n.prependHtml ? (openBlock(), createElementBlock("span", {
              key: 0,
              innerHTML: n.prependHtml
            }, null, 8, dd)) : (openBlock(), createElementBlock("span", cd, toDisplayString(n.prepend), 1))
          ])) : createCommentVNode("", true)
        ]),
        renderSlot(n.$slots, "default"),
        renderSlot(n.$slots, "append", {}, () => [
          a.value ? (openBlock(), createElementBlock("span", fd, [
            n.appendHtml ? (openBlock(), createElementBlock("span", {
              key: 0,
              innerHTML: n.appendHtml
            }, null, 8, vd)) : (openBlock(), createElementBlock("span", pd, toDisplayString(n.append), 1))
          ])) : createCommentVNode("", true)
        ])
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var An = defineComponent({
  __name: "BInputGroupText",
  props: {
    tag: { default: "div" },
    text: { default: void 0 }
  },
  setup(e) {
    return (t, o) => (openBlock(), createBlock(resolveDynamicComponent(t.tag), { class: "input-group-text" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(t.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var mo = defineComponent({
  __name: "BInputGroupAddon",
  props: {
    isText: { type: [Boolean, String], default: false }
  },
  setup(e) {
    const t = e, o = d(() => t.isText);
    return (a, l) => unref(o) ? (openBlock(), createBlock(An, { key: 0 }, {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    })) : renderSlot(a.$slots, "default", { key: 1 });
  }
});
var gd = defineComponent({
  __name: "BInputGroupAppend",
  props: {
    isText: { type: [Boolean, String], default: false }
  },
  setup(e) {
    return (t, o) => (openBlock(), createBlock(mo, normalizeProps(guardReactiveProps(t.$props)), {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var bd = defineComponent({
  __name: "BInputGroupPrepend",
  props: {
    isText: { type: [Boolean, String], default: false }
  },
  setup(e) {
    return (t, o) => (openBlock(), createBlock(mo, normalizeProps(guardReactiveProps(t.$props)), {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var yd = defineComponent({
  __name: "BListGroup",
  props: {
    flush: { type: [Boolean, String], default: false },
    horizontal: { type: [Boolean, String], default: false },
    numbered: { type: [Boolean, String], default: false },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, o = d(() => t.flush), a = d(() => t.numbered), l = d(() => t.horizontal), n = computed(() => {
      const s = o.value ? false : l.value;
      return {
        "list-group-flush": o.value,
        "list-group-horizontal": s === true,
        [`list-group-horizontal-${s}`]: typeof s == "string",
        "list-group-numbered": a.value
      };
    }), r = toRef(() => a.value === true ? "ol" : t.tag);
    return provide(Hl, {
      numbered: a
    }), (s, i) => (openBlock(), createBlock(resolveDynamicComponent(r.value), {
      class: normalizeClass(["list-group", n.value])
    }, {
      default: withCtx(() => [
        renderSlot(s.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var hd = defineComponent({
  __name: "BListGroupItem",
  props: {
    action: { type: [Boolean, String], default: false },
    button: { type: [Boolean, String], default: false },
    tag: { default: "div" },
    active: { type: [Boolean, String], default: false },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    variant: { default: void 0 }
  },
  setup(e) {
    const t = e, o = useAttrs(), a = inject(Hl, null), l = d(() => t.action), n = d(() => t.active), r = d(() => t.button), s = d(() => t.disabled), { computedLink: i } = At(t), u = toRef(() => !r.value && i.value), c = toRef(
      () => a != null && a.numbered.value ? "li" : r.value ? "button" : u.value ? ft : t.tag
    ), f = computed(
      () => l.value || u.value || r.value || ["a", "router-link", "button", "b-link"].includes(t.tag)
    ), b = computed(() => ({
      [`list-group-item-${t.variant}`]: t.variant !== null && t.variant !== void 0,
      "list-group-item-action": f.value,
      active: n.value,
      disabled: s.value
    })), m = computed(() => {
      const h2 = {};
      return r.value && ((!o || !o.type) && (h2.type = "button"), s.value && (h2.disabled = true)), h2;
    });
    return (h2, $) => (openBlock(), createBlock(resolveDynamicComponent(c.value), mergeProps({
      class: ["list-group-item", b.value],
      "aria-current": unref(n) ? true : void 0,
      "aria-disabled": unref(s) ? true : void 0,
      target: u.value ? h2.target : void 0,
      href: unref(r) ? void 0 : h2.href,
      to: unref(r) ? void 0 : h2.to
    }, m.value), {
      default: withCtx(() => [
        renderSlot(h2.$slots, "default")
      ]),
      _: 3
    }, 16, ["class", "aria-current", "aria-disabled", "target", "href", "to"]));
  }
});
var Bd = { id: "__BVID__modal-container" };
var Sd = defineComponent({
  __name: "BModalOrchestrator",
  props: {
    teleportDisabled: { type: [Boolean, String], default: false },
    teleportTo: { default: "body" }
  },
  setup(e, { expose: t }) {
    const o = e, a = d(() => o.teleportDisabled), { modals: l, remove: n, show: r, confirm: s } = ln(), i = (u) => wa(u, ["_promise", "_self", "_isConfirm", "_modelValue"]);
    return t({
      modals: l,
      show: r,
      confirm: s
    }), (u, c) => (openBlock(), createBlock(Teleport, {
      to: u.teleportTo,
      disabled: unref(a)
    }, [
      createBaseVNode("div", Bd, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l), (f, b) => (openBlock(), createBlock(resolveDynamicComponent(f.value.component), mergeProps({
          key: b,
          modelValue: f.value.props._modelValue,
          "onUpdate:modelValue": (m) => f.value.props._modelValue = m
        }, i(f.value.props), {
          "teleport-disabled": true,
          onHide: (m) => {
            if (f.value.props._isConfirm === true) {
              if (m.trigger === "ok") {
                f.value.props._promise.resolve(true);
                return;
              }
              if (m.trigger === "cancel") {
                f.value.props._promise.resolve(false);
                return;
              }
              f.value.props._promise.resolve(null);
            }
            f.value.props._promise.resolve(true);
          },
          onHidden: (m) => {
            var h2;
            return (h2 = unref(n)) == null ? void 0 : h2(f.value.props._self);
          }
        }), null, 16, ["modelValue", "onUpdate:modelValue", "onHide", "onHidden"]))), 128))
      ])
    ], 8, ["to", "disabled"]));
  }
});
var wd = defineComponent({
  __name: "BNav",
  props: {
    align: { default: void 0 },
    cardHeader: { type: [Boolean, String], default: false },
    fill: { type: [Boolean, String], default: false },
    justified: { type: [Boolean, String], default: false },
    pills: { type: [Boolean, String], default: false },
    small: { type: [Boolean, String], default: false },
    tabs: { type: [Boolean, String], default: false },
    tag: { default: "ul" },
    underline: { type: [Boolean, String], default: false },
    vertical: { type: [Boolean, String], default: false }
  },
  setup(e) {
    const t = e, o = d(() => t.cardHeader), a = d(() => t.fill), l = d(() => t.justified), n = d(() => t.pills), r = d(() => t.small), s = d(() => t.tabs), i = d(() => t.vertical), u = Jt(() => t.align), c = d(() => t.underline), f = computed(() => ({
      "nav-tabs": s.value,
      "nav-pills": n.value && !s.value,
      "card-header-tabs": !i.value && o.value && s.value,
      "card-header-pills": !i.value && o.value && n.value && !s.value,
      "flex-column": i.value,
      "nav-fill": !i.value && a.value,
      "nav-justified": !i.value && l.value,
      [u.value]: !i.value && t.align !== void 0,
      small: r.value,
      "nav-underline": c.value
    }));
    return (b, m) => (openBlock(), createBlock(resolveDynamicComponent(b.tag), {
      class: normalizeClass(["nav", f.value])
    }, {
      default: withCtx(() => [
        renderSlot(b.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Cd = { class: "d-flex flex-row align-items-center flex-wrap" };
var kd = defineComponent({
  inheritAttrs: false,
  __name: "BNavForm",
  props: {
    role: { default: void 0 },
    floating: { type: [Boolean, String], default: void 0 },
    id: { default: void 0 },
    novalidate: { type: [Boolean, String], default: void 0 },
    validated: { type: [Boolean, String], default: void 0 }
  },
  emits: ["submit"],
  setup(e, { emit: t }) {
    const o = t, a = (l) => {
      o("submit", l);
    };
    return (l, n) => (openBlock(), createElementBlock("li", Cd, [
      createVNode(wn, mergeProps(l.$attrs, {
        id: l.id,
        floating: l.floating,
        role: l.role,
        novalidate: l.novalidate,
        validated: l.validated,
        class: "d-flex",
        onSubmit: withModifiers(a, ["prevent"])
      }), {
        default: withCtx(() => [
          renderSlot(l.$slots, "default")
        ]),
        _: 3
      }, 16, ["id", "floating", "role", "novalidate", "validated"])
    ]));
  }
});
var $d = { class: "nav-item" };
var Td = defineComponent({
  __name: "BNavItem",
  props: {
    linkAttrs: { default: void 0 },
    linkClass: { default: void 0 },
    active: { type: [Boolean, String], default: void 0 },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    variant: { default: void 0 }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = d(() => o.disabled), n = computed(
      () => io(o, [
        "active",
        "activeClass",
        "append",
        "disabled",
        "href",
        "icon",
        "opacity",
        "opacityHover",
        "rel",
        "replace",
        "routerComponentName",
        "target",
        "to",
        "underlineOffset",
        "underlineOffsetHover",
        "underlineOpacity",
        "underlineOpacityHover",
        "underlineVariant",
        "variant"
      ])
    );
    return n.value.activeClass, (r, s) => (openBlock(), createElementBlock("li", $d, [
      createVNode(ft, mergeProps({
        class: ["nav-link", r.linkClass],
        tabindex: unref(l) ? -1 : void 0,
        "aria-disabled": unref(l) ? true : void 0
      }, { ...n.value, ...r.linkAttrs }, {
        onClick: s[0] || (s[0] = (i) => a("click", i))
      }), {
        default: withCtx(() => [
          renderSlot(r.$slots, "default")
        ]),
        _: 3
      }, 16, ["class", "tabindex", "aria-disabled"])
    ]));
  }
});
var _d = { class: "nav-item dropdown" };
var Vd = defineComponent({
  __name: "BNavItemDropdown",
  props: {
    ariaLabel: { default: void 0 },
    autoClose: { type: [Boolean, String], default: true },
    boundary: { default: "clippingAncestors" },
    boundaryPadding: { default: void 0 },
    center: { type: [Boolean, String], default: false },
    container: { default: void 0 },
    disabled: { type: [Boolean, String], default: false },
    dropend: { type: [Boolean, String], default: false },
    dropstart: { type: [Boolean, String], default: false },
    dropup: { type: [Boolean, String], default: false },
    end: { type: [Boolean, String], default: false },
    floatingMiddleware: { default: void 0 },
    id: { default: void 0 },
    isNav: { type: [Boolean, String], default: true },
    lazy: { type: [Boolean, String], default: false },
    menuClass: { default: void 0 },
    modelValue: { type: [Boolean, String], default: false },
    noCaret: { type: [Boolean, String], default: false },
    noFlip: { type: [Boolean, String], default: false },
    noShift: { type: [Boolean, String], default: false },
    noSize: { type: [Boolean, String], default: false },
    offset: { default: 0 },
    role: { default: "menu" },
    size: { default: "md" },
    split: { type: [Boolean, String], default: false },
    splitButtonType: { default: "button" },
    splitClass: { default: void 0 },
    splitDisabled: { type: [Boolean, String], default: void 0 },
    splitHref: { default: void 0 },
    splitTo: { default: void 0 },
    splitVariant: { default: void 0 },
    strategy: { default: "absolute" },
    text: { default: void 0 },
    toggleClass: { default: void 0 },
    toggleText: { default: "Toggle dropdown" },
    variant: { default: "link" }
  },
  emits: ["click", "hidden", "hide", "hide-prevented", "show", "show-prevented", "shown", "toggle", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = ref(null), r = () => {
      var u;
      (u = n.value) == null || u.close();
    }, s = () => {
      var u;
      (u = n.value) == null || u.open();
    };
    return t({
      close: r,
      open: s,
      toggle: () => {
        var u;
        (u = n.value) == null || u.toggle();
      }
    }), (u, c) => (openBlock(), createElementBlock("li", _d, [
      createVNode(Sn, mergeProps({
        ref_key: "dropdown",
        ref: n
      }, a, {
        "is-nav": "",
        onShow: c[0] || (c[0] = (f) => l("show", f)),
        onShown: c[1] || (c[1] = (f) => l("shown")),
        onHide: c[2] || (c[2] = (f) => l("hide", f)),
        onHidden: c[3] || (c[3] = (f) => l("hidden")),
        onHidePrevented: c[4] || (c[4] = (f) => l("hide-prevented")),
        onShowPrevented: c[5] || (c[5] = (f) => l("show-prevented")),
        onClick: c[6] || (c[6] = (f) => l("click", f)),
        onToggle: c[7] || (c[7] = (f) => l("toggle")),
        "onUpdate:modelValue": c[8] || (c[8] = (f) => l("update:modelValue", f))
      }), {
        "button-content": withCtx(() => [
          renderSlot(u.$slots, "button-content")
        ]),
        "toggle-text": withCtx(() => [
          renderSlot(u.$slots, "toggle-text")
        ]),
        default: withCtx(() => [
          renderSlot(u.$slots, "default", {
            hide: r,
            show: s
          })
        ]),
        _: 3
      }, 16)
    ]));
  }
});
var Ad = { class: "navbar-text" };
var Od = defineComponent({
  __name: "BNavText",
  props: {
    text: { default: void 0 }
  },
  setup(e) {
    return (t, o) => (openBlock(), createElementBlock("li", Ad, [
      renderSlot(t.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(t.text), 1)
      ])
    ]));
  }
});
var Ed = defineComponent({
  __name: "BNavbar",
  props: {
    autoClose: { type: [Boolean, String], default: true },
    container: { type: [String, Boolean], default: "fluid" },
    fixed: { default: void 0 },
    print: { type: [Boolean, String], default: false },
    sticky: { default: void 0 },
    tag: { default: "nav" },
    toggleable: { type: [Boolean, String], default: false },
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = d(() => t.container), a = d(() => t.autoClose), l = d(() => t.print), n = d(() => t.toggleable), r = toRef(() => t.tag === "nav" ? void 0 : "navigation"), s = qr(o), i = computed(() => ({
      "d-print": l.value,
      [`sticky-${t.sticky}`]: t.sticky !== void 0,
      [`bg-${t.variant}`]: t.variant !== null,
      [`fixed-${t.fixed}`]: t.fixed !== void 0,
      "navbar-expand": n.value === false,
      [`navbar-expand-${n.value}`]: typeof n.value == "string"
    }));
    return provide(ro, {
      tag: toRef(() => t.tag),
      autoClose: a
    }), (u, c) => (openBlock(), createBlock(resolveDynamicComponent(u.tag), {
      class: normalizeClass(["navbar", i.value]),
      role: r.value
    }, {
      default: withCtx(() => [
        u.container !== false ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(s))
        }, [
          renderSlot(u.$slots, "default")
        ], 2)) : renderSlot(u.$slots, "default", { key: 1 })
      ]),
      _: 3
    }, 8, ["class", "role"]));
  }
});
var Pd = defineComponent({
  __name: "BNavbarBrand",
  props: {
    tag: { default: "div" },
    active: { type: [Boolean, String], default: void 0 },
    activeClass: { default: void 0 },
    append: { type: [Boolean, String], default: void 0 },
    disabled: { type: [Boolean, String], default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: [Boolean, String], default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    rel: { default: void 0 },
    replace: { type: [Boolean, String], default: void 0 },
    routerComponentName: { default: void 0 },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    variant: { default: void 0 }
  },
  setup(e) {
    const t = e, { computedLink: o, computedLinkProps: a } = At(t, [
      "active",
      "activeClass",
      "append",
      "disabled",
      "href",
      "rel",
      "replace",
      "routerComponentName",
      "target",
      "to",
      "variant",
      "opacity",
      "opacityHover",
      "underlineVariant",
      "underlineOffset",
      "underlineOffsetHover",
      "underlineOpacity",
      "underlineOpacityHover",
      "icon"
    ]), l = toRef(() => o.value ? ft : t.tag);
    return (n, r) => (openBlock(), createBlock(resolveDynamicComponent(l.value), mergeProps({ class: "navbar-brand" }, unref(a)), {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var Nd = defineComponent({
  __name: "BNavbarNav",
  props: {
    align: { default: void 0 },
    fill: { type: [Boolean, String], default: false },
    justified: { type: [Boolean, String], default: false },
    small: { type: [Boolean, String], default: false },
    tag: { default: "ul" }
  },
  setup(e) {
    const t = e, o = d(() => t.fill), a = d(() => t.justified), l = d(() => t.small), n = Jt(() => t.align), r = computed(() => ({
      "nav-fill": o.value,
      "nav-justified": a.value,
      [n.value]: t.align !== void 0,
      small: l.value
    }));
    return (s, i) => (openBlock(), createElementBlock("ul", {
      class: normalizeClass(["navbar-nav", r.value])
    }, [
      renderSlot(s.$slots, "default")
    ], 2));
  }
});
var Wo = (e, t) => e.setAttribute("data-bs-theme", t);
var Id = {
  mounted(e, t) {
    Wo(e, t.value);
  },
  updated(e, t) {
    Wo(e, t.value);
  }
};
var Fd = (e, t) => {
  const { modifiers: o, arg: a, value: l } = e, n = Object.keys(o || {}), r = typeof l == "string" ? l.split(ra) : l;
  if (t.tagName.toLowerCase() === "a") {
    const s = t.getAttribute("href") || "";
    Zn.test(s) && n.push(s.replace(Yn, ""));
  }
  return Array.prototype.concat.apply([], [a, r]).forEach((s) => typeof s == "string" && n.push(s)), n.filter((s, i, u) => s && u.indexOf(s) === i);
};
var Ld = (e, t) => {
  e.forEach((o) => {
    const a = document.getElementById(o);
    a !== null && a.dispatchEvent(new Event("bv-toggle"));
  }), setTimeout(() => On(e, t), 50);
};
var On = (e, t) => {
  let o = false;
  e.forEach((a) => {
    const l = document.getElementById(a);
    l != null && l.classList.contains("show") && (o = true), l != null && l.classList.contains("closing") && (o = false);
  }), t.setAttribute("aria-expanded", o ? "true" : "false"), t.classList.remove(o ? "collapsed" : "not-collapsed"), t.classList.add(o ? "not-collapsed" : "collapsed");
};
var Go = (e, t) => {
  const o = Fd(t, e);
  o.length !== 0 && (e.__toggle && e.removeEventListener("click", e.__toggle), e.__toggle = () => Ld(o, e), e.addEventListener("click", e.__toggle), e.setAttribute("aria-controls", o.join(" ")), On(o, e));
};
var ja = {
  mounted: Go,
  updated: Go,
  unmounted(e) {
    e.removeEventListener("click", e.__toggle), e.removeAttribute("aria-controls"), e.removeAttribute("aria-expanded");
  }
};
var zd = {
  mounted(e, t) {
    if (!Kt(t.value))
      return;
    const a = ma(t.value, e);
    !a.content && !a.title || (e.$__state = ref({
      ...zt(t, e),
      ...a
    }), ga(e, t));
  },
  updated(e, t) {
    if (!Kt(t.value))
      return;
    const a = ma(t.value, e);
    if (!(!a.content && !a.title)) {
      if (!e.$__state) {
        e.$__state = ref({
          ...zt(t, e),
          ...a
        }), ga(e, t);
        return;
      }
      e.$__state.value = {
        ...zt(t, e),
        ...a
      };
    }
  },
  beforeUnmount(e) {
    Pl(e);
  }
};
var Uo = (e, t) => {
  e.$__scrollspy && e.$__scrollspy.cleanup();
  const { arg: o, value: a } = t, l = typeof a == "object" && a !== null, n = o || (typeof a == "string" ? a : l ? a.content || a.element : null);
  e.$__scrollspy = sn(n, e, l ? wa(a, ["content", "element"]) : {});
};
var Hd = {
  mounted: Uo,
  updated: Uo,
  beforeUnmount(e) {
    e.$__scrollspy && e.$__scrollspy.cleanup();
  }
};
var Rd = {
  mounted(e, t) {
    const o = Kt(t.value);
    if (!o)
      return;
    const a = ma(t.value, e);
    !a.content && !a.title || (e.$__state = ref({
      noninteractive: true,
      ...zt(t, e),
      title: a.title ?? a.content ?? "",
      tooltip: o
    }), ga(e, t));
  },
  updated(e, t) {
    const o = Kt(t.value);
    if (!o)
      return;
    const a = ma(t.value, e);
    if (!(!a.content && !a.title)) {
      if (!e.$__state) {
        e.$__state = ref({
          noninteractive: true,
          ...zt(t, e),
          title: a.title ?? a.content ?? "",
          tooltip: o
        }), ga(e, t);
        return;
      }
      e.$__state.value = {
        noninteractive: true,
        ...zt(t, e),
        title: a.title ?? a.content ?? "",
        tooltip: o
      };
    }
  },
  beforeUnmount(e) {
    Pl(e);
  }
};
var Xo = Object.freeze(Object.defineProperty({
  __proto__: null,
  vBColorMode: Id,
  vBModal: ja,
  vBPopover: zd,
  vBScrollspy: Hd,
  vBToggle: ja,
  vBTooltip: Rd
}, Symbol.toStringTag, { value: "Module" }));
var xd = ["disabled", "aria-label"];
var Md = createBaseVNode("span", { class: "navbar-toggler-icon" }, null, -1);
var Dd = defineComponent({
  __name: "BNavbarToggle",
  props: {
    disabled: { type: [Boolean, String], default: false },
    label: { default: "Toggle navigation" },
    target: { default: void 0 }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = d(() => o.disabled), n = computed(() => ({
      disabled: l.value
    })), r = (s) => {
      l.value || a("click", s);
    };
    return (s, i) => withDirectives((openBlock(), createElementBlock("button", {
      class: normalizeClass(["navbar-toggler", n.value]),
      type: "button",
      disabled: unref(l),
      "aria-label": s.label,
      onClick: r
    }, [
      renderSlot(s.$slots, "default", {}, () => [
        Md
      ])
    ], 10, xd)), [
      [unref(ja), unref(l) ? void 0 : s.target]
    ]);
  }
});
var jd = ["id", "aria-labelledby"];
var qd = ["id"];
var Wd = defineComponent({
  inheritAttrs: false,
  __name: "BOffcanvas",
  props: {
    backdrop: { type: [Boolean, String], default: true },
    backdropVariant: { default: "dark" },
    bodyClass: { default: void 0 },
    bodyScrolling: { type: [Boolean, String], default: false },
    footerClass: { default: void 0 },
    headerClass: { default: void 0 },
    headerCloseClass: { default: void 0 },
    headerCloseLabel: { default: "Close" },
    headerCloseVariant: { default: "secondary" },
    id: { default: void 0 },
    lazy: { type: [Boolean, String], default: false },
    modelValue: { type: [Boolean, String], default: false },
    noCloseOnBackdrop: { type: [Boolean, String], default: false },
    noCloseOnEsc: { type: [Boolean, String], default: false },
    noFocus: { type: [Boolean, String], default: false },
    noHeader: { type: [Boolean, String], default: false },
    noHeaderClose: { type: [Boolean, String], default: false },
    placement: { default: "start" },
    teleportDisabled: { type: [Boolean, String], default: false },
    teleportTo: { default: "body" },
    title: { default: void 0 }
  },
  emits: ["close", "esc", "hidden", "hide", "hide-prevented", "show", "show-prevented", "shown", "update:modelValue"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = useSlots(), r = _e(a, "modelValue", l, { passive: true }), s = d(r), i = d(() => a.bodyScrolling), u = d(() => a.backdrop), c = d(() => a.noHeaderClose), f = d(() => a.noHeader), b = d(() => a.noFocus), m = d(() => a.noCloseOnBackdrop), h2 = d(() => a.noCloseOnEsc), $ = d(() => a.lazy), B = d(() => a.teleportDisabled), v = Pe(() => a.id, "offcanvas");
    nn(s, i);
    const S = ref(null);
    Ge(
      "Escape",
      () => {
        z("esc");
      },
      { target: S }
    );
    const { focused: y } = De(S, {
      initialValue: s.value && b.value === false
    }), _ = ref(s.value), C = ref(false), T = toRef(() => u.value === true && s.value === true), k = toRef(
      () => $.value === false || $.value === true && C.value === true || $.value === true && s.value === true
    ), N = toRef(() => !He(n["header-close"])), V = computed(() => [
      { "text-reset": !N.value },
      a.headerCloseClass
    ]), A = computed(() => ({
      variant: N.value ? a.headerCloseVariant : void 0,
      class: V.value
    })), E = toRef(() => !He(n.footer)), K = computed(() => [
      // props.responsive === undefined ? 'offcanvas' : `offcanvas-${props.responsive}`,
      "offcanvas",
      // Remove when above check is fixed
      `offcanvas-${a.placement}`,
      {
        show: s.value && _.value === true
      }
    ]), oe = computed(() => ({
      visible: s.value,
      placement: a.placement,
      hide: z
    })), F = (ve, ge = {}) => new Vt(ve, {
      cancelable: false,
      target: S.value || null,
      relatedTarget: null,
      trigger: null,
      ...ge,
      componentId: v.value
    }), z = (ve = "") => {
      if (ve === "backdrop" && m.value || ve === "esc" && h2.value) {
        l("hide-prevented");
        return;
      }
      const ge = F("hide", { cancelable: ve !== "", trigger: ve });
      if (ve === "close" && l(ve, ge), ve === "esc" && l(ve, ge), l("hide", ge), ge.defaultPrevented) {
        l("hide-prevented");
        return;
      }
      r.value = false;
    }, D = () => {
      const ve = F("show", { cancelable: true });
      if (l("show", ve), ve.defaultPrevented) {
        r.value = false, l("show-prevented");
        return;
      }
      r.value = true;
    }, J = () => {
      nextTick(() => {
        b.value === false && (y.value = true);
      });
    }, ie = () => D(), te = () => {
      _.value = true, J(), l("shown", F("shown")), $.value === true && (C.value = true);
    }, he = () => {
      _.value = false;
    }, Oe = () => {
      l("hidden", F("hidden")), $.value === true && (C.value = false);
    };
    return Ne(S, "bv-toggle", () => {
      s.value ? z() : D();
    }), t({
      hide: z,
      show: D
    }), (ve, ge) => (openBlock(), createBlock(Teleport, {
      to: ve.teleportTo,
      disabled: unref(B)
    }, [
      createVNode(Dt, {
        "no-fade": true,
        "trans-props": {
          enterToClass: "showing",
          enterFromClass: "",
          leaveToClass: "hiding show",
          leaveFromClass: "show"
        },
        onBeforeEnter: ie,
        onAfterEnter: te,
        onLeave: he,
        onAfterLeave: Oe
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", mergeProps({
            id: unref(v),
            ref_key: "element",
            ref: S,
            "aria-modal": "true",
            role: "dialog",
            class: K.value,
            tabindex: "-1",
            "aria-labelledby": `${unref(v)}-offcanvas-label`,
            "data-bs-backdrop": "false"
          }, ve.$attrs), [
            k.value ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              unref(f) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(["offcanvas-header", ve.headerClass])
              }, [
                renderSlot(ve.$slots, "header", normalizeProps(guardReactiveProps(oe.value)), () => [
                  createBaseVNode("h5", {
                    id: `${unref(v)}-offcanvas-label`,
                    class: "offcanvas-title"
                  }, [
                    renderSlot(ve.$slots, "title", normalizeProps(guardReactiveProps(oe.value)), () => [
                      createTextVNode(toDisplayString(ve.title), 1)
                    ])
                  ], 8, qd),
                  unref(c) ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    N.value ? (openBlock(), createBlock(Bt, mergeProps({ key: 0 }, A.value, {
                      onClick: ge[0] || (ge[0] = (ke) => z("close"))
                    }), {
                      default: withCtx(() => [
                        renderSlot(ve.$slots, "header-close")
                      ]),
                      _: 3
                    }, 16)) : (openBlock(), createBlock(jt, mergeProps({
                      key: 1,
                      "aria-label": ve.headerCloseLabel
                    }, A.value, {
                      onClick: ge[1] || (ge[1] = (ke) => z("close"))
                    }), null, 16, ["aria-label"]))
                  ], 64))
                ])
              ], 2)),
              createBaseVNode("div", {
                class: normalizeClass(["offcanvas-body", ve.bodyClass])
              }, [
                renderSlot(ve.$slots, "default", normalizeProps(guardReactiveProps(oe.value)))
              ], 2),
              E.value ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(ve.footerClass)
              }, [
                renderSlot(ve.$slots, "footer", normalizeProps(guardReactiveProps(oe.value)))
              ], 2)) : createCommentVNode("", true)
            ], 64)) : createCommentVNode("", true)
          ], 16, jd), [
            [vShow, unref(r)]
          ])
        ]),
        _: 3
      }),
      renderSlot(ve.$slots, "backdrop", {}, () => [
        createVNode(ka, {
          variant: ve.backdropVariant,
          show: T.value,
          fixed: "",
          "no-wrap": "",
          "no-spinner": "",
          onClick: ge[2] || (ge[2] = (ke) => z("backdrop"))
        }, null, 8, ["variant", "show"])
      ])
    ], 8, ["to", "disabled"]));
  }
});
var Gd = ["aria-disabled", "aria-label"];
var Ko = 20;
var Yo = 0;
var Ud = defineComponent({
  __name: "BPagination",
  props: {
    align: { default: "start" },
    ariaControls: { default: void 0 },
    ariaLabel: { default: "Pagination" },
    disabled: { type: [Boolean, String], default: false },
    ellipsisClass: { default: void 0 },
    ellipsisText: { default: "…" },
    firstClass: { default: void 0 },
    firstNumber: { type: [Boolean, String], default: false },
    firstText: { default: "«" },
    hideEllipsis: { type: [Boolean, String], default: false },
    hideGotoEndButtons: { type: [Boolean, String], default: false },
    labelFirstPage: { default: "Go to first page" },
    labelLastPage: { default: "Go to last page" },
    labelNextPage: { default: "Go to next page" },
    labelPage: { default: "Go to page" },
    labelPrevPage: { default: "Go to previous page" },
    lastClass: { default: void 0 },
    lastNumber: { type: [Boolean, String], default: false },
    lastText: { default: "»" },
    limit: { default: 5 },
    modelValue: { default: 1 },
    nextClass: { default: void 0 },
    nextText: { default: "›" },
    pageClass: { default: void 0 },
    perPage: { default: Ko },
    pills: { type: [Boolean, String], default: false },
    prevClass: { default: void 0 },
    prevText: { default: "‹" },
    size: { default: void 0 },
    totalRows: { default: Yo }
  },
  emits: ["update:modelValue", "page-click"],
  setup(e, { emit: t }) {
    const i = e, u = t, c = _e(i, "modelValue", u), f = d(() => i.disabled), b = d(() => i.firstNumber), m = d(() => i.hideEllipsis), h2 = d(() => i.hideGotoEndButtons), $ = d(() => i.lastNumber), B = d(() => i.pills), v = Se(() => i.limit, { nanToZero: true, method: "parseInt" }), S = Se(() => i.perPage, { nanToZero: true, method: "parseInt" }), y = Se(() => i.totalRows, { nanToZero: true, method: "parseInt" }), _ = Se(c, { nanToZero: true, method: "parseInt" }), C = toRef(() => Math.max(S.value || Ko, 1)), T = toRef(() => Math.max(y.value || Yo, 0)), k = toRef(() => Math.ceil(T.value / C.value)), N = toRef(() => i.align === "fill"), V = toRef(() => i.align === "fill" ? "start" : i.align), A = Jt(V), E = (Y) => Y === _.value, K = (Y) => f.value ? null : E(Y) ? "0" : "-1", oe = (Y) => f.value || E(Y) || _.value < 1 || // Check if the number is out of bounds
    Y < 1 || Y > k.value, F = computed(() => oe(1)), z = computed(() => oe(_.value - 1)), D = computed(() => oe(k.value)), J = computed(() => oe(_.value + 1)), ie = ({
      page: Y,
      classVal: pe,
      dis: ne,
      slotName: Be,
      textValue: ue,
      tabIndex: x,
      label: U,
      position: re,
      isActive: Te,
      role: $e,
      hidden: Ve
    }) => ({
      li: {
        class: [
          "page-item",
          {
            active: Te,
            disabled: ne,
            "flex-fill": N.value,
            "d-flex": N.value && !ne
          },
          pe
        ],
        role: $e,
        "aria-hidden": Ve
      },
      button: {
        is: ne ? "span" : "button",
        class: ["page-link", { "flex-grow-1": !ne && N.value }],
        "aria-label": U,
        "aria-controls": i.ariaControls || void 0,
        "aria-disabled": ne ? true : void 0,
        "aria-posinset": re,
        "aria-setsize": re ? k.value : void 0,
        role: "menuitem",
        type: ne ? void 0 : "button",
        tabindex: ne ? void 0 : x
      },
      text: {
        name: Be,
        active: Te,
        value: ue ?? Y,
        page: Y,
        disabled: ne,
        index: Y - 1,
        content: ue ? void 0 : Y
      },
      clickHandler: (ot) => Q(ot, Y)
    }), te = ({
      page: Y,
      classVal: pe,
      dis: ne,
      slotName: Be,
      textValue: ue,
      label: x
    }) => ie({ page: Y, classVal: pe, dis: ne, slotName: Be, textValue: ue, label: x, tabIndex: "-1" }), he = (Y) => ie({
      page: Y,
      dis: f.value,
      classVal: i.pageClass,
      slotName: "page",
      label: i.labelPage ? `${i.labelPage} ${Y}` : void 0,
      tabIndex: K(Y) ?? void 0,
      position: Y,
      isActive: E(Y)
    }), Oe = computed(
      () => te({
        page: 1,
        dis: F.value,
        classVal: i.firstClass,
        slotName: "first-text",
        textValue: i.firstText,
        label: i.labelFirstPage
      })
    ), ve = computed(
      () => te({
        page: Math.max(_.value - 1, 1),
        dis: z.value,
        classVal: i.prevClass,
        slotName: "prev-text",
        textValue: i.prevText,
        label: i.labelPrevPage
      })
    ), ge = computed(
      () => te({
        page: Math.min(_.value + 1, k.value),
        dis: J.value,
        classVal: i.nextClass,
        slotName: "next-text",
        textValue: i.nextText,
        label: i.labelNextPage
      })
    ), ke = computed(
      () => te({
        page: k.value,
        dis: D.value,
        classVal: i.lastClass,
        slotName: "last-text",
        textValue: i.lastText,
        label: i.labelLastPage
      })
    ), Ce = pa(), M = pa(), X = computed(() => ({
      li: {
        class: [
          "page-item",
          "disabled",
          "bv-d-xs-down-none",
          N.value ? "flex-fill" : "",
          i.ellipsisClass
        ],
        role: "separator"
      },
      span: {
        class: ["page-link"]
      }
    })), L = computed(() => [
      A.value,
      {
        [`pagination-${i.size}`]: i.size !== void 0,
        "b-pagination-pills": B.value
      }
    ]), j = computed(() => ({
      pageSize: C.value,
      totalRows: y.value,
      numberOfPages: k.value
    })), Q = (Y, pe) => {
      if (pe === _.value)
        return;
      const ne = new vt("page-click", {
        cancelable: true,
        target: Y.target
      });
      u("page-click", ne, pe), !ne.defaultPrevented && (c.value = pe);
    };
    watch(_, (Y) => {
      const ne = ((Be, ue) => {
        const x = Be || 1;
        return x > ue ? ue : x < 1 ? 1 : x;
      })(Y, k.value);
      ne !== c.value && (c.value = ne);
    }), watch(j, (Y, pe) => {
      (pe.pageSize !== Y.pageSize && pe.totalRows === Y.totalRows || pe.numberOfPages !== Y.numberOfPages && _.value > pe.numberOfPages) && (c.value = 1);
    });
    const Z = computed(() => {
      const Y = k.value, { value: pe } = _, ne = v.value, Be = b.value ? 1 : 0, ue = $.value ? 1 : 0, x = m.value || ne <= 3, U = h2.value ? 1 : 0;
      if (Y < ne + Be + ue)
        return [
          !Be && !U ? -1 : null,
          -2,
          ...Array.from({ length: Y }, ($e, Ve) => Ve + 1),
          -3,
          !ue && !U ? -4 : null
        ].filter(($e) => $e !== null);
      const re = Array.from({ length: ne + 4 - U * 2 });
      U ? (re[0] = -2, re[re.length - 1] = -3) : (Be ? (re[0] = -2, re[1] = 1) : (re[0] = -1, re[1] = -2), ue ? (re[re.length - 1] = -3, re[re.length - 2] = Y) : (re[re.length - 1] = -4, re[re.length - 2] = -3));
      const Te = Math.floor(ne / 2);
      if (pe <= Te + Be) {
        for (let $e = 1; $e <= ne; $e++)
          re[$e + 1 - U] = $e + Be;
        x || (re[re.length - 3] = -5);
      }
      if (pe > Y - Te - ue) {
        const $e = Y - (ne - 1) - ue;
        for (let Ve = 0; Ve < ne; Ve++)
          re[Ve + 2 - U] = $e + Ve;
        x || (re[2] = -5);
      }
      if (!re[2]) {
        const $e = pe - Math.floor(ne / 2);
        for (let Ve = 0; Ve < ne; Ve++)
          re[Ve + 2 - U] = $e + Ve;
        x || (re[2] = -5, re[re.length - 3] = -5);
      }
      return re;
    });
    return (Y, pe) => (openBlock(), createElementBlock("ul", {
      class: normalizeClass(["pagination", L.value]),
      role: "menubar",
      "aria-disabled": unref(f),
      "aria-label": Y.ariaLabel || void 0
    }, [
      createVNode(unref(Ce).define, null, {
        default: withCtx(({ button: ne, li: Be, text: ue, clickHandler: x }) => [
          createBaseVNode("li", normalizeProps(guardReactiveProps(Be)), [
            (openBlock(), createBlock(resolveDynamicComponent(ne.is), mergeProps(ne, { onClick: x }), {
              default: withCtx(() => [
                renderSlot(Y.$slots, ue.name, {
                  disabled: ue.disabled,
                  page: ue.page,
                  index: ue.index,
                  active: ue.active,
                  content: ue.value
                }, () => [
                  createTextVNode(toDisplayString(ue.value), 1)
                ])
              ]),
              _: 2
            }, 1040, ["onClick"]))
          ], 16)
        ]),
        _: 3
      }),
      createVNode(unref(M).define, null, {
        default: withCtx(() => [
          createBaseVNode("li", normalizeProps(guardReactiveProps(X.value.li)), [
            createBaseVNode("span", normalizeProps(guardReactiveProps(X.value.span)), [
              renderSlot(Y.$slots, "ellipsis-text", {}, () => [
                createTextVNode(toDisplayString(Y.ellipsisText || "..."), 1)
              ])
            ], 16)
          ], 16)
        ]),
        _: 3
      }),
      (openBlock(true), createElementBlock(Fragment, null, renderList(Z.value, (ne) => (openBlock(), createElementBlock(Fragment, {
        key: `page-${ne.number}`
      }, [
        ne === -1 ? (openBlock(), createBlock(unref(Ce).reuse, normalizeProps(mergeProps({ key: 0 }, Oe.value)), null, 16)) : ne === -2 ? (openBlock(), createBlock(unref(Ce).reuse, normalizeProps(mergeProps({ key: 1 }, ve.value)), null, 16)) : ne === -3 ? (openBlock(), createBlock(unref(Ce).reuse, normalizeProps(mergeProps({ key: 2 }, ge.value)), null, 16)) : ne === -4 ? (openBlock(), createBlock(unref(Ce).reuse, normalizeProps(mergeProps({ key: 3 }, ke.value)), null, 16)) : ne === -5 ? (openBlock(), createBlock(unref(M).reuse, { key: 4 })) : (openBlock(), createBlock(unref(Ce).reuse, normalizeProps(mergeProps({ key: 5 }, he(ne))), null, 16))
      ], 64))), 128))
    ], 10, Gd));
  }
});
var Je = defineComponent({
  inheritAttrs: false,
  __name: "BPlaceholder",
  props: {
    animation: { default: void 0 },
    cols: { default: 12 },
    size: { default: "md" },
    tag: { default: "span" },
    variant: { default: null },
    width: { default: void 0 },
    wrapperTag: { default: "span" }
  },
  setup(e) {
    const t = e, o = toRef(
      () => t.width === void 0 ? void 0 : typeof t.width == "number" ? t.width.toString() : t.width.replace("%", "")
    ), a = toRef(
      () => t.cols === void 0 ? void 0 : typeof t.cols == "number" ? t.cols.toString() : t.cols
    ), l = computed(() => ({
      [`col-${a.value}`]: a.value !== void 0 && o.value === void 0,
      [`bg-${t.variant}`]: t.variant !== null,
      [`placeholder-${t.size}`]: t.size !== "md"
    })), n = computed(() => ({
      [`placeholder-${t.animation}`]: t.animation !== void 0
    })), r = computed(() => ({
      width: o.value === void 0 ? void 0 : `${o.value}%`
    }));
    return (s, i) => (openBlock(), createBlock(resolveDynamicComponent(s.wrapperTag), {
      class: normalizeClass(n.value)
    }, {
      default: withCtx(() => [
        (openBlock(), createBlock(resolveDynamicComponent(s.tag), mergeProps(s.$attrs, {
          class: ["placeholder", l.value],
          style: r.value
        }), null, 16, ["class", "style"]))
      ]),
      _: 1
    }, 8, ["class"]));
  }
});
var En = defineComponent({
  __name: "BPlaceholderButton",
  props: {
    animation: { default: void 0 },
    cols: { default: void 0 },
    tag: { default: "div" },
    variant: { default: "primary" },
    width: { default: void 0 }
  },
  setup(e) {
    const t = e, o = computed(() => ({
      [`btn-${t.variant}`]: t.variant !== null
    }));
    return (a, l) => (openBlock(), createBlock(Je, {
      class: normalizeClass(["btn disabled", o.value]),
      animation: a.animation,
      width: a.width,
      cols: a.cols,
      tag: a.tag,
      style: { cursor: "wait", "pointer-events": "auto" }
    }, null, 8, ["class", "animation", "width", "cols", "tag"]));
  }
});
var Xd = defineComponent({
  __name: "BPlaceholderCard",
  props: {
    animation: { default: void 0 },
    footerAnimation: { default: void 0 },
    footerSize: { default: "md" },
    footerVariant: { default: void 0 },
    footerWidth: { default: 100 },
    headerAnimation: { default: void 0 },
    headerSize: { default: "md" },
    headerVariant: { default: void 0 },
    headerWidth: { default: 100 },
    imgBlankColor: { default: "#868e96" },
    imgBottom: { type: [Boolean, String], default: false },
    imgHeight: { default: 100 },
    imgSrc: { default: void 0 },
    noButton: { type: [Boolean, String], default: false },
    noFooter: { type: [Boolean, String], default: false },
    noHeader: { type: [Boolean, String], default: false },
    noImg: { type: [Boolean, String], default: false },
    size: { default: "md" },
    variant: { default: void 0 }
  },
  setup(e) {
    const t = e, o = d(() => t.noButton), a = d(() => t.noHeader), l = d(() => t.noFooter), n = d(() => t.noImg), r = computed(() => ({
      animation: t.animation,
      size: t.size,
      variant: t.variant
    })), s = toRef(() => o.value ? Je : En);
    return (i, u) => (openBlock(), createBlock(Bn, { "img-bottom": i.imgBottom }, createSlots({
      default: withCtx(() => [
        renderSlot(i.$slots, "default", {}, () => [
          createVNode(Je, mergeProps({ cols: "7" }, r.value), null, 16),
          createVNode(Je, mergeProps({ cols: "4" }, r.value), null, 16),
          createVNode(Je, mergeProps({ cols: "4" }, r.value), null, 16),
          createVNode(Je, mergeProps({ cols: "6" }, r.value), null, 16),
          createVNode(Je, mergeProps({ cols: "8" }, r.value), null, 16)
        ])
      ]),
      _: 2
    }, [
      unref(n) ? void 0 : {
        name: "img",
        fn: withCtx(() => [
          renderSlot(i.$slots, "img", {}, () => [
            createVNode(vo, {
              blank: !i.imgSrc,
              "blank-color": i.imgBlankColor,
              height: i.imgSrc ? void 0 : i.imgHeight,
              src: i.imgSrc,
              top: !i.imgBottom,
              bottom: i.imgBottom,
              style: { cursor: "wait" }
            }, null, 8, ["blank", "blank-color", "height", "src", "top", "bottom"])
          ])
        ]),
        key: "0"
      },
      unref(a) ? void 0 : {
        name: "header",
        fn: withCtx(() => [
          renderSlot(i.$slots, "header", {}, () => [
            createVNode(Je, {
              width: i.headerWidth,
              variant: i.headerVariant,
              animation: i.headerAnimation,
              size: i.headerSize
            }, null, 8, ["width", "variant", "animation", "size"])
          ])
        ]),
        key: "1"
      },
      unref(l) ? void 0 : {
        name: "footer",
        fn: withCtx(() => [
          renderSlot(i.$slots, "footer", {}, () => [
            (openBlock(), createBlock(resolveDynamicComponent(s.value), {
              width: i.footerWidth,
              animation: i.footerAnimation,
              size: unref(o) ? i.footerSize : void 0,
              variant: i.footerVariant
            }, null, 8, ["width", "animation", "size", "variant"]))
          ])
        ]),
        key: "2"
      }
    ]), 1032, ["img-bottom"]));
  }
});
var Kd = ["id"];
var Yd = ["id"];
var go = defineComponent({
  __name: "BTableSimple",
  props: {
    bordered: { type: [Boolean, String], default: false },
    borderless: { type: [Boolean, String], default: false },
    borderVariant: { default: null },
    captionTop: { type: [Boolean, String], default: false },
    dark: { type: [Boolean, String], default: false },
    fixed: { type: [Boolean, String], default: false },
    hover: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    noBorderCollapse: { type: [Boolean, String], default: false },
    outlined: { type: [Boolean, String], default: false },
    responsive: { type: [Boolean, String], default: false },
    small: { type: [Boolean, String], default: false },
    stacked: { type: [Boolean, String], default: false },
    stickyHeader: { type: [Boolean, String], default: false },
    striped: { type: [Boolean, String], default: false },
    stripedColumns: { type: [Boolean, String], default: false },
    tableClass: { default: void 0 },
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = d(() => t.captionTop), a = d(() => t.borderless), l = d(() => t.bordered), n = d(() => t.dark), r = d(() => t.hover), s = d(() => t.small), i = d(() => t.striped), u = d(() => t.stickyHeader), c = d(() => t.stripedColumns), f = d(() => t.responsive), b = d(() => t.stacked), m = computed(() => [
      t.tableClass,
      "table",
      "b-table",
      {
        "table-bordered": l.value,
        "table-borderless": a.value,
        [`border-${t.borderVariant}`]: t.borderVariant !== null,
        "caption-top": o.value,
        "table-dark": n.value,
        "table-hover": r.value,
        "b-table-stacked": b.value === true,
        [`b-table-stacked-${b.value}`]: typeof b.value == "string",
        "table-striped": i.value,
        "table-sm": s.value,
        [`table-${t.variant}`]: t.variant !== null,
        "table-striped-columns": c.value
      }
    ]), h2 = computed(() => ({
      "table-responsive": f.value === true,
      [`table-responsive-${f.value}`]: typeof f.value == "string",
      "b-table-sticky-header": u.value
    }));
    return ($, B) => unref(f) ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(h2.value)
    }, [
      createBaseVNode("table", {
        id: $.id,
        class: normalizeClass(m.value)
      }, [
        renderSlot($.$slots, "default")
      ], 10, Yd)
    ], 2)) : (openBlock(), createElementBlock("table", {
      key: 0,
      id: $.id,
      class: normalizeClass(m.value)
    }, [
      renderSlot($.$slots, "default")
    ], 10, Kd));
  }
});
var Zd = defineComponent({
  __name: "BPlaceholderTable",
  props: {
    animation: { default: void 0 },
    cellWidth: { default: 100 },
    columns: { default: 5 },
    footerAnimation: { default: void 0 },
    footerCellWidth: { default: 100 },
    footerColumns: { default: void 0 },
    footerSize: { default: "md" },
    footerVariant: { default: void 0 },
    headerAnimation: { default: void 0 },
    headerCellWidth: { default: 100 },
    headerColumns: { default: void 0 },
    headerSize: { default: "md" },
    headerVariant: { default: void 0 },
    hideHeader: { type: [Boolean, String], default: false },
    rows: { default: 3 },
    showFooter: { type: [Boolean, String], default: false },
    size: { default: "md" },
    variant: { default: void 0 }
  },
  setup(e) {
    const t = e, o = Se(() => t.columns), a = Se(() => t.rows), l = toRef(() => t.headerColumns ?? NaN), n = toRef(() => t.footerColumns ?? NaN), r = Se(l), s = Se(n), i = toRef(() => o.value || 5), u = toRef(() => a.value || 3), c = toRef(
      () => t.headerColumns === void 0 ? i.value : r.value
    ), f = toRef(
      () => t.footerColumns === void 0 ? i.value : s.value
    ), b = d(() => t.hideHeader), m = d(() => t.showFooter);
    return (h2, $) => (openBlock(), createBlock(go, null, {
      default: withCtx(() => [
        unref(b) ? createCommentVNode("", true) : renderSlot(h2.$slots, "thead", { key: 0 }, () => [
          createBaseVNode("thead", null, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(c.value, (B, v) => (openBlock(), createElementBlock("th", { key: v }, [
                createVNode(Je, {
                  size: h2.headerSize,
                  variant: h2.headerVariant,
                  animation: h2.headerAnimation,
                  width: h2.headerCellWidth
                }, null, 8, ["size", "variant", "animation", "width"])
              ]))), 128))
            ])
          ])
        ]),
        renderSlot(h2.$slots, "default", {}, () => [
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(u.value, (B, v) => (openBlock(), createElementBlock("tr", { key: v }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(i.value, (S, y) => (openBlock(), createElementBlock("td", { key: y }, [
                createVNode(Je, {
                  size: h2.size,
                  variant: h2.variant,
                  animation: h2.animation,
                  width: h2.cellWidth
                }, null, 8, ["size", "variant", "animation", "width"])
              ]))), 128))
            ]))), 128))
          ])
        ]),
        unref(m) ? renderSlot(h2.$slots, "tfoot", { key: 1 }, () => [
          createBaseVNode("tfoot", null, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(f.value, (B, v) => (openBlock(), createElementBlock("th", { key: v }, [
                createVNode(Je, {
                  size: h2.footerSize,
                  variant: h2.footerVariant,
                  animation: h2.footerAnimation,
                  width: h2.footerCellWidth
                }, null, 8, ["size", "variant", "animation", "width"])
              ]))), 128))
            ])
          ])
        ]) : createCommentVNode("", true)
      ]),
      _: 3
    }));
  }
});
var Jd = defineComponent({
  __name: "BPlaceholderWrapper",
  props: {
    loading: { type: [Boolean, String], default: false }
  },
  setup(e) {
    const t = e, o = d(() => t.loading);
    return (a, l) => unref(o) ? renderSlot(a.$slots, "loading", { key: 0 }) : renderSlot(a.$slots, "default", { key: 1 });
  }
});
var Zo = Sa("cols", [""], { type: [String, Number], default: null });
var Qd = defineComponent({
  name: "BRow",
  slots: Object,
  props: {
    tag: { type: String, default: "div" },
    gutterX: { type: String, default: null },
    gutterY: { type: String, default: null },
    noGutters: { type: [Boolean, String], default: false },
    alignV: { type: String, default: null },
    alignH: { type: String, default: null },
    alignContent: { type: String, default: null },
    ...Zo
  },
  setup(e) {
    const t = d(() => e.noGutters), o = Jt(() => e.alignH), a = computed(() => Il(e, Zo, "cols", "row-cols"));
    return {
      computedClasses: computed(() => [
        a.value,
        {
          [`gx-${e.gutterX}`]: e.gutterX !== null,
          [`gy-${e.gutterY}`]: e.gutterY !== null,
          "g-0": t.value,
          [`align-items-${e.alignV}`]: e.alignV !== null,
          [o.value]: e.alignH !== null,
          [`align-content-${e.alignContent}`]: e.alignContent !== null
        }
      ])
    };
  }
});
function ec(e, t, o, a, l, n) {
  return openBlock(), createBlock(resolveDynamicComponent(e.tag), {
    class: normalizeClass(["row", e.computedClasses])
  }, {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var tc = $a(Qd, [["render", ec]]);
var Pn = defineComponent({
  __name: "BTbody",
  props: {
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = computed(() => ({
      [`thead-${t.variant}`]: t.variant !== null
    }));
    return (a, l) => (openBlock(), createElementBlock("tbody", {
      class: normalizeClass(o.value)
    }, [
      renderSlot(a.$slots, "default")
    ], 2));
  }
});
var ac = ["scope", "colspan", "rowspan", "data-label"];
var oc = { key: 0 };
var Ft = defineComponent({
  __name: "BTd",
  props: {
    colspan: { default: void 0 },
    rowspan: { default: void 0 },
    stackedHeading: { default: void 0 },
    stickyColumn: { type: [Boolean, String], default: false },
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = d(() => t.stickyColumn), a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== null,
      "b-table-sticky-column": o.value,
      "table-b-table-default": o.value && t.variant === null
    })), l = toRef(() => t.colspan ? "colspan" : t.rowspan ? "rowspan" : "col");
    return (n, r) => (openBlock(), createElementBlock("td", {
      scope: l.value,
      class: normalizeClass(a.value),
      colspan: n.colspan,
      rowspan: n.rowspan,
      "data-label": n.stackedHeading
    }, [
      n.stackedHeading ? (openBlock(), createElementBlock("div", oc, [
        renderSlot(n.$slots, "default")
      ])) : renderSlot(n.$slots, "default", { key: 1 })
    ], 10, ac));
  }
});
var qa = defineComponent({
  __name: "BTfoot",
  props: {
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = computed(() => ({
      [`table-${t.variant}`]: t.variant !== null
    }));
    return (a, l) => (openBlock(), createElementBlock("tfoot", {
      class: normalizeClass(o.value)
    }, [
      renderSlot(a.$slots, "default")
    ], 2));
  }
});
var lc = ["scope", "colspan", "rowspan", "data-label"];
var nc = { key: 0 };
var Wa = defineComponent({
  __name: "BTh",
  props: {
    colspan: { default: void 0 },
    rowspan: { default: void 0 },
    stackedHeading: { default: void 0 },
    stickyColumn: { type: [Boolean, String], default: false },
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = d(() => t.stickyColumn), a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== null,
      "b-table-sticky-column": o.value,
      "table-b-table-default": o.value && t.variant === null
    })), l = toRef(() => t.colspan ? "colspan" : t.rowspan ? "rowspan" : "col");
    return (n, r) => (openBlock(), createElementBlock("th", {
      scope: l.value,
      class: normalizeClass(a.value),
      colspan: n.colspan,
      rowspan: n.rowspan,
      "data-label": n.stackedHeading
    }, [
      n.stackedHeading !== void 0 ? (openBlock(), createElementBlock("div", nc, [
        renderSlot(n.$slots, "default")
      ])) : renderSlot(n.$slots, "default", { key: 1 })
    ], 10, lc));
  }
});
var Nn = defineComponent({
  __name: "BThead",
  props: {
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = computed(() => ({
      [`table-${t.variant}`]: t.variant !== null
    }));
    return (a, l) => (openBlock(), createElementBlock("thead", {
      class: normalizeClass(o.value)
    }, [
      renderSlot(a.$slots, "default")
    ], 2));
  }
});
var nt = defineComponent({
  __name: "BTr",
  props: {
    variant: { default: null }
  },
  setup(e) {
    const t = e, o = computed(() => ({
      [`table-${t.variant}`]: t.variant !== null
    }));
    return (a, l) => (openBlock(), createElementBlock("tr", {
      class: normalizeClass(o.value)
    }, [
      renderSlot(a.$slots, "default")
    ], 2));
  }
});
var sc = {
  key: 0,
  class: "b-table-stacked-label"
};
var rc = { class: "d-inline-flex flex-nowrap align-items-center gap-1" };
var ic = { key: 2 };
var In = defineComponent({
  __name: "BTableLite",
  props: {
    align: { default: void 0 },
    caption: { default: void 0 },
    captionHtml: { default: void 0 },
    detailsTdClass: { default: void 0 },
    emptyFilteredText: { default: "There are no records matching your request" },
    emptyText: { default: "There are no records to show" },
    fieldColumnClass: { type: [Function, String, Object], default: void 0 },
    fields: { default: () => [] },
    footClone: { type: [Boolean, String], default: false },
    footRowVariant: { default: void 0 },
    footVariant: { default: void 0 },
    headRowVariant: { default: void 0 },
    headVariant: { default: void 0 },
    items: { default: () => [] },
    labelStacked: { type: [Boolean, String], default: false },
    modelValue: { default: void 0 },
    primaryKey: { default: void 0 },
    showEmpty: { type: [Boolean, String], default: false },
    tbodyClass: { default: void 0 },
    tbodyTrAttr: { default: void 0 },
    tbodyTrClass: { type: [Function, String, Object], default: void 0 },
    tfootClass: { default: void 0 },
    tfootTrClass: { default: void 0 },
    theadClass: { default: void 0 },
    theadTrClass: { default: void 0 },
    bordered: { type: [Boolean, String], default: void 0 },
    borderless: { type: [Boolean, String], default: void 0 },
    borderVariant: { default: void 0 },
    captionTop: { type: [Boolean, String], default: void 0 },
    dark: { type: [Boolean, String], default: void 0 },
    fixed: { type: [Boolean, String], default: void 0 },
    hover: { type: [Boolean, String], default: void 0 },
    id: { default: void 0 },
    noBorderCollapse: { type: [Boolean, String], default: void 0 },
    outlined: { type: [Boolean, String], default: void 0 },
    responsive: { type: [Boolean, String], default: void 0 },
    small: { type: [Boolean, String], default: void 0 },
    stacked: { type: [Boolean, String], default: void 0 },
    stickyHeader: { type: [Boolean, String], default: void 0 },
    striped: { type: [Boolean, String], default: void 0 },
    stripedColumns: { type: [Boolean, String], default: void 0 },
    tableClass: { default: void 0 },
    variant: { default: void 0 }
  },
  emits: ["head-clicked", "row-clicked", "row-dbl-clicked", "row-hovered", "row-unhovered"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = d(() => o.footClone), n = d(() => o.labelStacked), r = d(() => o.showEmpty), s = d(() => o.stacked), i = computed(() => [
      o.tableClass,
      {
        [`align-${o.align}`]: o.align !== void 0
      }
    ]), u = computed(() => !o.fields.length && o.items.length ? Object.keys(o.items[0]).map((v) => {
      const S = Va(v);
      return {
        key: v,
        label: S,
        tdAttr: s.value === true ? { "data-label": S } : void 0
      };
    }) : o.fields.map((v) => {
      if (typeof v == "string") {
        const S = Va(v);
        return {
          key: v,
          label: S,
          tdAttr: s.value === true ? { "data-label": S } : void 0
        };
      }
      return {
        ...v,
        tdAttr: s.value === true ? { "data-label": Va(v.key), ...v.tdAttr } : v.tdAttr
      };
    })), c = toRef(() => u.value.length), f = (v, S, y) => {
      const _ = st(v, S);
      return y && typeof y == "function" ? y(_, S, v) : y;
    }, b = (v, S, y = false) => {
      const _ = typeof v == "string" ? v : v.key;
      a("head-clicked", _, v, S, y);
    }, m = (v) => {
      v._showDetails = !v._showDetails;
    }, h2 = (v) => [
      v.class,
      v.thClass,
      {
        "b-table-sticky-column": v.stickyColumn
      },
      o.fieldColumnClass ? typeof o.fieldColumnClass == "function" ? o.fieldColumnClass(v) : o.fieldColumnClass : null
    ], $ = (v, S) => {
      var y;
      return [
        v.class,
        v.tdClass,
        (y = S._cellVariants) != null && y[v.key] ? `table-${S._cellVariants[v.key]}` : null,
        {
          "b-table-sticky-column": v.stickyColumn
        }
      ];
    }, B = (v, S) => o.tbodyTrClass ? typeof o.tbodyTrClass == "function" ? o.tbodyTrClass(v, S) : o.tbodyTrClass : null;
    return (v, S) => (openBlock(), createBlock(go, {
      id: v.id,
      bordered: v.bordered,
      borderless: v.borderless,
      "border-variant": v.borderVariant,
      "caption-top": v.captionTop,
      dark: v.dark,
      fixed: v.fixed,
      hover: v.hover,
      "no-border-collapse": v.noBorderCollapse,
      outlined: v.outlined,
      responsive: v.responsive,
      small: v.small,
      stacked: unref(s),
      "sticky-header": v.stickyHeader,
      striped: v.striped,
      "table-class": i.value,
      variant: v.variant,
      "striped-columns": v.stripedColumns
    }, {
      default: withCtx(() => [
        createVNode(Nn, {
          variant: v.headVariant,
          class: normalizeClass(v.theadClass)
        }, {
          default: withCtx(() => [
            v.$slots["thead-top"] ? renderSlot(v.$slots, "thead-top", { key: 0 }) : createCommentVNode("", true),
            createVNode(nt, {
              variant: v.headRowVariant,
              class: normalizeClass(v.theadTrClass)
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(u.value, (y) => (openBlock(), createBlock(Wa, mergeProps({
                  key: y.key,
                  scope: "col",
                  class: h2(y),
                  title: y.headerTitle,
                  variant: y.variant,
                  abbr: y.headerAbbr,
                  style: y.thStyle
                }, y.thAttr, {
                  onClick: (_) => b(y, _)
                }), {
                  default: withCtx(() => [
                    renderSlot(v.$slots, v.$slots[`head(${String(y.key)})`] ? `head(${String(y.key)})` : "head()", {
                      label: y.label,
                      column: y.key,
                      field: y,
                      isFoot: false
                    }, () => [
                      createTextVNode(toDisplayString(unref(ia)(y)), 1)
                    ])
                  ]),
                  _: 2
                }, 1040, ["class", "title", "variant", "abbr", "style", "onClick"]))), 128))
              ]),
              _: 3
            }, 8, ["variant", "class"]),
            v.$slots["thead-sub"] ? (openBlock(), createBlock(nt, { key: 1 }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(u.value, (y) => (openBlock(), createBlock(Ft, {
                  key: y.key,
                  scope: "col",
                  variant: y.variant,
                  class: normalizeClass([y.class, y.thClass])
                }, {
                  default: withCtx(() => [
                    renderSlot(v.$slots, "thead-sub", mergeProps({ items: u.value }, y), () => [
                      createTextVNode(toDisplayString(y.label), 1)
                    ])
                  ]),
                  _: 2
                }, 1032, ["variant", "class"]))), 128))
              ]),
              _: 3
            })) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["variant", "class"]),
        createVNode(Pn, {
          class: normalizeClass(v.tbodyClass)
        }, {
          default: withCtx(() => [
            renderSlot(v.$slots, "custom-body", {
              fields: u.value,
              items: v.items,
              columns: u.value.length
            }, () => [
              !unref(s) && v.$slots["top-row"] ? (openBlock(), createBlock(nt, { key: 0 }, {
                default: withCtx(() => [
                  renderSlot(v.$slots, "top-row")
                ]),
                _: 3
              })) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(v.items, (y, _) => (openBlock(), createElementBlock(Fragment, { key: _ }, [
                createVNode(nt, {
                  class: normalizeClass(B(y, "row")),
                  variant: y._rowVariant,
                  onClick: (C) => !unref(aa)(C) && a("row-clicked", y, _, C),
                  onDblclick: (C) => !unref(aa)(C) && a("row-dbl-clicked", y, _, C),
                  onMouseenter: (C) => !unref(aa)(C) && a("row-hovered", y, _, C),
                  onMouseleave: (C) => !unref(aa)(C) && a("row-unhovered", y, _, C)
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(u.value, (C) => {
                      var T;
                      return openBlock(), createBlock(Ft, mergeProps({
                        key: C.key,
                        variant: (T = y._cellVariants) != null && T[C.key] ? null : C.variant,
                        class: $(C, y)
                      }, f(y, String(C.key), C.tdAttr)), {
                        default: withCtx(() => [
                          unref(s) && unref(n) ? (openBlock(), createElementBlock("label", sc, toDisplayString(unref(ia)(C)), 1)) : createCommentVNode("", true),
                          renderSlot(
                            v.$slots,
                            v.$slots[`cell(${String(C.key)})`] ? `cell(${String(C.key)})` : "cell()",
                            {
                              value: unref(st)(y, String(C.key)),
                              index: _,
                              item: y,
                              field: C,
                              items: v.items,
                              toggleDetails: () => {
                                m(y);
                              },
                              detailsShowing: y._showDetails ?? false
                            },
                            () => [
                              !v.$slots[`cell(${String(C.key)})`] && !v.$slots["cell()"] ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                                createTextVNode(toDisplayString(unref(Nl)(y, String(C.key), C.formatter)), 1)
                              ], 64)) : createCommentVNode("", true)
                            ]
                          )
                        ]),
                        _: 2
                      }, 1040, ["variant", "class"]);
                    }), 128))
                  ]),
                  _: 2
                }, 1032, ["class", "variant", "onClick", "onDblclick", "onMouseenter", "onMouseleave"]),
                y._showDetails === true && v.$slots["row-details"] ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  createVNode(nt, {
                    "aria-hidden": "true",
                    role: "presentation",
                    class: "d-none"
                  }),
                  createVNode(nt, {
                    class: normalizeClass(B(y, "row-details")),
                    variant: y._rowVariant
                  }, {
                    default: withCtx(() => [
                      createVNode(Ft, { colspan: c.value }, {
                        default: withCtx(() => [
                          renderSlot(v.$slots, "row-details", {
                            item: y,
                            toggleDetails: () => {
                              m(y);
                            },
                            fields: v.fields,
                            index: _
                          })
                        ]),
                        _: 2
                      }, 1032, ["colspan"])
                    ]),
                    _: 2
                  }, 1032, ["class", "variant"])
                ], 64)) : createCommentVNode("", true)
              ], 64))), 128)),
              unref(r) && v.items.length === 0 ? (openBlock(), createBlock(nt, {
                key: 1,
                class: "b-table-empty-slot"
              }, {
                default: withCtx(() => [
                  createVNode(Ft, { colspan: c.value }, {
                    default: withCtx(() => [
                      renderSlot(v.$slots, "empty", { items: v.items }, () => [
                        createTextVNode(toDisplayString(v.emptyText), 1)
                      ])
                    ]),
                    _: 3
                  }, 8, ["colspan"])
                ]),
                _: 3
              })) : createCommentVNode("", true),
              !unref(s) && v.$slots["bottom-row"] ? (openBlock(), createBlock(nt, { key: 2 }, {
                default: withCtx(() => [
                  renderSlot(v.$slots, "bottom-row")
                ]),
                _: 3
              })) : createCommentVNode("", true)
            ])
          ]),
          _: 3
        }, 8, ["class"]),
        unref(l) ? (openBlock(), createBlock(qa, {
          key: 0,
          variant: v.footVariant,
          class: normalizeClass(v.tfootClass)
        }, {
          default: withCtx(() => [
            createVNode(nt, {
              variant: v.footRowVariant,
              class: normalizeClass(v.tfootTrClass)
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(u.value, (y) => (openBlock(), createBlock(Wa, mergeProps({
                  key: y.key,
                  scope: "col",
                  class: h2(y),
                  title: y.headerTitle,
                  abbr: y.headerAbbr,
                  style: y.thStyle,
                  variant: y.variant
                }, y.thAttr, {
                  onClick: (_) => b(y, _, true)
                }), {
                  default: withCtx(() => [
                    createBaseVNode("div", rc, [
                      createBaseVNode("div", null, [
                        renderSlot(
                          v.$slots,
                          v.$slots[`foot(${String(y.key)})`] ? `foot(${String(y.key)})` : "foot()",
                          {
                            label: y.label,
                            column: y.key,
                            field: y,
                            isFoot: true
                          },
                          () => [
                            createTextVNode(toDisplayString(unref(ia)(y)), 1)
                          ]
                        )
                      ])
                    ])
                  ]),
                  _: 2
                }, 1040, ["class", "title", "abbr", "style", "variant", "onClick"]))), 128))
              ]),
              _: 3
            }, 8, ["variant", "class"])
          ]),
          _: 3
        }, 8, ["variant", "class"])) : v.$slots["custom-foot"] ? (openBlock(), createBlock(qa, { key: 1 }, {
          default: withCtx(() => [
            renderSlot(v.$slots, "custom-foot", {
              fields: u.value,
              items: v.items,
              columns: u.value.length
            })
          ]),
          _: 3
        })) : createCommentVNode("", true),
        v.$slots["table-caption"] || v.caption ? (openBlock(), createElementBlock("caption", ic, [
          renderSlot(v.$slots, "table-caption", {}, () => [
            createTextVNode(toDisplayString(v.caption), 1)
          ])
        ])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["id", "bordered", "borderless", "border-variant", "caption-top", "dark", "fixed", "hover", "no-border-collapse", "outlined", "responsive", "small", "stacked", "sticky-header", "striped", "table-class", "variant", "striped-columns"]));
  }
});
var uc = createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"
}, null, -1);
var dc = [
  uc
];
var cc = createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"
}, null, -1);
var fc = [
  cc
];
var vc = { class: "d-flex align-items-center gap-2 mt-5" };
var pc = defineComponent({
  __name: "BTable",
  props: {
    provider: { default: void 0 },
    sortCompare: { default: void 0 },
    noProvider: { default: void 0 },
    noProviderPaging: { type: [Boolean, String], default: false },
    noProviderSorting: { type: [Boolean, String], default: false },
    noProviderFiltering: { type: [Boolean, String], default: false },
    sortBy: { default: void 0 },
    sortDesc: { type: [Boolean, String], default: false },
    selectable: { type: [Boolean, String], default: false },
    stickySelect: { type: [Boolean, String], default: false },
    selectHead: { type: [Boolean, String], default: true },
    selectMode: { default: "multi" },
    selectionVariant: { default: "primary" },
    busy: { type: [Boolean, String], default: false },
    busyLoadingText: { default: "Loading..." },
    perPage: { default: 1 / 0 },
    currentPage: { default: 1 },
    filter: { default: void 0 },
    filterable: { default: void 0 },
    noLocalSorting: { type: [Boolean, String], default: false },
    noSelectOnClick: { type: [Boolean, String], default: false },
    sortCompareLocale: { default: void 0 },
    sortCompareOptions: { default: () => ({ numeric: true }) },
    selectedItems: { default: () => [] },
    noSortableIcon: { type: [Boolean, String], default: false },
    align: { default: void 0 },
    caption: { default: void 0 },
    captionHtml: { default: void 0 },
    detailsTdClass: { default: void 0 },
    emptyFilteredText: { default: void 0 },
    emptyText: { default: void 0 },
    fieldColumnClass: { type: [Function, String, Object], default: void 0 },
    fields: { default: () => [] },
    footClone: { type: [Boolean, String], default: void 0 },
    footRowVariant: { default: void 0 },
    footVariant: { default: void 0 },
    headRowVariant: { default: void 0 },
    headVariant: { default: void 0 },
    items: { default: () => [] },
    labelStacked: { type: [Boolean, String], default: void 0 },
    modelValue: { default: void 0 },
    primaryKey: { default: void 0 },
    showEmpty: { type: [Boolean, String], default: void 0 },
    tbodyClass: { default: void 0 },
    tbodyTrAttr: { default: void 0 },
    tbodyTrClass: { type: [Function, String, Object], default: void 0 },
    tfootClass: { default: void 0 },
    tfootTrClass: { default: void 0 },
    theadClass: { default: void 0 },
    theadTrClass: { default: void 0 },
    bordered: { type: [Boolean, String], default: void 0 },
    borderless: { type: [Boolean, String], default: void 0 },
    borderVariant: { default: void 0 },
    captionTop: { type: [Boolean, String], default: void 0 },
    dark: { type: [Boolean, String], default: void 0 },
    fixed: { type: [Boolean, String], default: void 0 },
    hover: { type: [Boolean, String], default: void 0 },
    id: { default: void 0 },
    noBorderCollapse: { type: [Boolean, String], default: void 0 },
    outlined: { type: [Boolean, String], default: void 0 },
    responsive: { type: [Boolean, String], default: void 0 },
    small: { type: [Boolean, String], default: void 0 },
    stacked: { type: [Boolean, String], default: void 0 },
    stickyHeader: { type: [Boolean, String], default: void 0 },
    striped: { type: [Boolean, String], default: void 0 },
    stripedColumns: { type: [Boolean, String], default: void 0 },
    variant: { default: void 0 }
  },
  emits: ["filtered", "head-clicked", "row-clicked", "row-dbl-clicked", "row-hovered", "row-selected", "row-unhovered", "row-unselected", "selection", "sorted", "update:busy", "update:selectedItems", "update:sortDesc", "update:sortBy"],
  setup(e, { expose: t, emit: o }) {
    const a = e, l = o, n = _e(a, "sortBy", l, { passive: true }), r = _e(a, "busy", l, { passive: true }), s = _e(a, "sortDesc", l, { passive: true }), i = _e(a, "selectedItems", l, {
      passive: true
    }), u = computed({
      get: () => /* @__PURE__ */ new Set([...i.value]),
      set: (M) => {
        i.value = [...M];
      }
    }), c = {
      add: (M) => {
        const X = new Set(u.value);
        X.add(M), u.value = X, l("row-selected", M);
      },
      clear: () => {
        u.value.forEach((M) => {
          c.delete(M);
        });
      },
      delete: (M) => {
        const X = new Set(u.value);
        X.delete(M), u.value = X, l("row-unselected", M);
      },
      /* TODO
      This has method and the delete method suffer from an error when using a non-reactive source as the items prop
      ```ts
      const items = [{first_name: 'Geneva', last_name: 'Wilson', age: 89},{first_name: 'Jami', last_name: 'Carney', age: 38}]
      ```
      For some reason, the reference of the object gets lost. However, when you use an actual ref(), it works just fine
      Getting the reference properly will fix all outstanding issues
      */
      has: (M) => {
        if (!a.primaryKey)
          return u.value.has(M);
        const X = a.primaryKey;
        for (const L of u.value) {
          const j = st(L, X), Q = st(M, X);
          if (j && Q && j === Q)
            return true;
        }
        return false;
      }
    }, f = ref([]), b = d(s), m = d(r), h2 = d(() => a.noProviderPaging), $ = d(() => a.noProviderSorting), B = d(() => a.noProviderFiltering), v = d(() => a.selectable), S = d(() => a.noSortableIcon), y = d(() => a.noSelectOnClick), _ = d(() => a.noLocalSorting), C = Se(() => a.perPage, { method: "parseInt" }), T = Se(() => a.currentPage, { method: "parseInt" }), k = toRef(() => !!a.filter), N = toRef(() => a.provider !== void 0), V = toRef(() => u.value.size > 0), A = computed(
      () => n.value !== void 0 || a.fields.some((M) => typeof M == "string" ? false : M.sortable)
    ), E = computed(
      () => a.fields.map(
        (M) => typeof M == "string" ? M : {
          ...M,
          thAttr: {
            "aria-sort": A.value === false ? void 0 : n.value !== M.key ? "none" : b.value === true ? "descending" : "ascending",
            ...M.thAttr
          }
        }
      )
    ), K = computed(() => ({
      "b-table-busy": m.value,
      "b-table-selectable": v.value,
      "user-select-none": v.value && V.value
    })), oe = computed(() => [
      a.tbodyTrClass ? typeof a.tbodyTrClass == "function" ? a.tbodyTrClass(null, "table-busy") : a.tbodyTrClass : null
    ]), F = (M) => [
      {
        "b-table-sortable-column": A.value && M.sortable
      }
    ], z = (M, X) => [
      {
        [`selected table-${a.selectionVariant}`]: v.value && M && c.has(M)
      },
      a.tbodyTrClass ? typeof a.tbodyTrClass == "function" ? a.tbodyTrClass(M, X) : a.tbodyTrClass : null
    ], D = (M) => n.value !== M.key ? { opacity: 0.5 } : {}, J = computed(() => {
      const M = (j) => {
        const Q = n.value;
        if (Q === void 0)
          return j;
        const Z = E.value.find((Y) => typeof Y == "string" ? false : Y.key === Q);
        return typeof Z != "string" && (Z == null ? void 0 : Z.sortable) === false ? j : [...j].sort((Y, pe) => {
          if (a.sortCompare !== void 0)
            return a.sortCompare(Y, pe, Q, b.value);
          const ne = (Be) => {
            const ue = Be[Q];
            if (Z && typeof Z != "string" && Z.sortByFormatted) {
              const x = typeof Z.sortByFormatted == "function" ? Z.sortByFormatted : Z.formatter;
              if (x)
                return Nl(Be, String(Z.key), x);
            }
            return typeof ue == "object" && ue !== null ? JSON.stringify(ue) : (ue == null ? void 0 : ue.toString()) ?? "";
          };
          return ne(Y).localeCompare(ne(pe), a.sortCompareLocale, a.sortCompareOptions) * (b.value ? -1 : 1);
        });
      }, X = (j) => j.filter(
        (Q) => Object.entries(Q).some(([Z, Y]) => {
          var ne, Be, ue;
          return Y == null || Z[0] === "_" || !((ne = a.filterable) != null && ne.includes(Z)) && ((Be = a.filterable) != null && Be.length) ? false : (typeof Y == "object" ? JSON.stringify(Object.values(Y)) : Y.toString()).toLowerCase().includes(((ue = a.filter) == null ? void 0 : ue.toLowerCase()) ?? "");
        })
      );
      let L = N.value ? f.value : a.items;
      return (k.value === true && !N.value || k.value === true && N.value && B.value) && (L = X(L)), (A.value === true && !N.value && !_.value || A.value === true && N.value && $.value) && (L = M(L)), L;
    }), ie = computed(() => Number.isNaN(C.value) || N.value && !h2.value ? J.value : J.value.slice(
      (T.value - 1) * (C.value || 1 / 0),
      T.value * (C.value || 1 / 0)
    )), te = (M, X, L = false, j = false, Q = false) => {
      if (v.value) {
        if (a.selectMode === "single" || a.selectMode === "multi") {
          if (L || j)
            return;
          c.has(M) ? c.delete(M) : (a.selectMode === "single" && c.clear(), c.add(M));
        } else if (j || Q)
          c.has(M) ? c.delete(M) : c.add(M);
        else if (L) {
          const Z = [...u.value].pop(), Y = a.items.findIndex((Be) => Be === Z), pe = Math.min(Y, X), ne = Math.max(Y, X);
          a.items.slice(pe, ne + 1).forEach((Be) => {
            c.has(Be) || c.add(Be);
          });
        } else
          c.clear(), c.add(M);
        ke();
      }
    }, he = (M, X, L) => {
      y.value === false && te(M, X, L.shiftKey, L.ctrlKey, L.metaKey), l("row-clicked", M, X, L);
    }, Oe = (M) => {
      if (!A.value)
        return;
      const X = typeof M == "string" ? M : M.key, L = typeof M == "string" ? false : M.sortable;
      A.value === true && L === true && (n.value !== X ? (n.value = X, s.value = false) : b.value === false ? s.value = true : (n.value = void 0, s.value = false), l("sorted", X, n.value === void 0 ? false : !b.value));
    }, ve = (M, X, L, j = false) => {
      l("head-clicked", M, X, L, j), Oe(X);
    }, ge = async () => {
      if (!N.value || a.provider === void 0 || m.value)
        return;
      r.value = true;
      const M = a.provider({
        currentPage: T.value,
        filter: a.filter,
        sortBy: n.value,
        sortDesc: a.sortDesc,
        perPage: C.value
      });
      try {
        const X = M instanceof Promise ? await M : M;
        if (X === void 0)
          return;
        f.value = X;
      } finally {
        r.value = false;
      }
    }, ke = () => {
      v.value && l("selection", [...u.value]);
    }, Ce = async (M, X, L) => {
      if (X === L)
        return;
      const j = (pe) => {
        var ne;
        return ((ne = a.noProvider) == null ? void 0 : ne.includes(pe)) === true;
      }, Q = (M === "currentPage" || M === "perPage") && (j("paging") || h2.value === true), Z = M === "filter" && (j("filtering") || B.value === true), Y = (M === "sortBy" || M === "sortDesc") && (j("sorting") || $.value === true);
      Q || Z || Y || (N.value === true && await ge(), M === "currentPage" || M === "perPage" || l("filtered", [...J.value]));
    };
    return watch(
      () => a.filter,
      (M, X) => {
        Ce("filter", M, X), !(M === X || N.value) && (M || l("filtered", [...J.value]));
      }
    ), watch(T, (M, X) => {
      Ce("currentPage", M, X);
    }), watch(C, (M, X) => {
      Ce("perPage", M, X);
    }), watch(n, (M, X) => {
      Ce("sortBy", M, X);
    }), watch(b, (M, X) => {
      Ce("sortDesc", M, X);
    }), watch(
      () => a.provider,
      (M) => {
        if (M === void 0) {
          f.value = [];
          return;
        }
        ge();
      }
    ), onMounted(ge), t({
      // The row selection methods are really for compat. Users should probably use the v-model though
      clearSelected: () => {
        v.value && (c.clear(), ke());
      },
      refresh: ge,
      selectAllRows: () => {
        if (!v.value)
          return;
        const M = u.value.size > 0 ? [...u.value] : [];
        u.value = /* @__PURE__ */ new Set([...J.value]), u.value.forEach((X) => {
          M.includes(X) || l("row-selected", X);
        }), ke();
      },
      selectRow: (M) => {
        if (!v.value)
          return;
        const X = J.value[M];
        !X || c.has(X) || (c.add(X), ke());
      },
      unselectRow: (M) => {
        if (!v.value)
          return;
        const X = J.value[M];
        !X || !c.has(X) || (c.delete(X), ke());
      }
    }), (M, X) => (openBlock(), createBlock(In, mergeProps(a, {
      "aria-busy": unref(m),
      items: ie.value,
      fields: E.value,
      "table-class": K.value,
      "tbody-tr-class": z,
      "field-column-class": F,
      onHeadClicked: ve,
      onRowClicked: he,
      onRowHovered: X[0] || (X[0] = (L, j, Q) => {
        l("row-hovered", L, j, Q);
      }),
      onRowUnhovered: X[1] || (X[1] = (L, j, Q) => {
        l("row-unhovered", L, j, Q);
      })
    }), createSlots({
      "head()": withCtx((L) => [
        createTextVNode(toDisplayString(unref(ia)(L.field)) + " ", 1),
        A.value && L.field.sortable && unref(S) === false ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          unref(b) ? renderSlot(M.$slots, "sortDesc", normalizeProps(mergeProps({ key: 1 }, { ...L })), () => [
            (openBlock(), createElementBlock("svg", {
              style: normalizeStyle(D(L.field)),
              xmlns: "http://www.w3.org/2000/svg",
              width: "16",
              height: "16",
              fill: "currentColor",
              class: "bi bi-arrow-down-short",
              viewBox: "0 0 16 16",
              "aria-hidden": ""
            }, fc, 4))
          ]) : renderSlot(M.$slots, "sortAsc", normalizeProps(mergeProps({ key: 0 }, { ...L })), () => [
            (openBlock(), createElementBlock("svg", {
              style: normalizeStyle(D(L.field)),
              xmlns: "http://www.w3.org/2000/svg",
              width: "16",
              height: "16",
              fill: "currentColor",
              class: "bi bi-arrow-up-short",
              viewBox: "0 0 16 16",
              "aria-hidden": ""
            }, dc, 4))
          ])
        ], 64)) : createCommentVNode("", true)
      ]),
      "custom-body": withCtx((L) => [
        unref(m) ? (openBlock(), createBlock(nt, {
          key: 0,
          class: normalizeClass(["b-table-busy-slot", oe.value])
        }, {
          default: withCtx(() => [
            createVNode(Ft, {
              colspan: L.fields.length
            }, {
              default: withCtx(() => [
                renderSlot(M.$slots, "table-busy", {}, () => [
                  createVNode(ka, { show: "" }, {
                    overlay: withCtx(() => [
                      createBaseVNode("div", vc, [
                        createVNode(Ca),
                        createBaseVNode("strong", null, toDisplayString(M.busyLoadingText), 1)
                      ])
                    ]),
                    _: 1
                  })
                ])
              ]),
              _: 2
            }, 1032, ["colspan"])
          ]),
          _: 2
        }, 1032, ["class"])) : createCommentVNode("", true)
      ]),
      _: 2
    }, [
      renderList(M.$slots, (L, j) => ({
        name: j,
        fn: withCtx((Q) => [
          renderSlot(M.$slots, j, normalizeProps(guardReactiveProps(Q)))
        ])
      }))
    ]), 1040, ["aria-busy", "items", "fields", "table-class"]));
  }
});
var mc = defineComponent({
  inheritAttrs: false,
  __name: "BTab",
  props: {
    active: { type: [Boolean, String], default: false },
    buttonId: { default: void 0 },
    disabled: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    lazy: { type: [Boolean, String], default: void 0 },
    lazyOnce: { type: [Boolean, String], default: void 0 },
    noBody: { type: [Boolean, String], default: false },
    tag: { default: "div" },
    title: { default: void 0 },
    titleItemClass: { default: void 0 },
    titleLinkAttrs: { default: void 0 },
    titleLinkClass: { default: void 0 }
  },
  emits: ["update:active"],
  setup(e, { emit: t }) {
    const o = e, a = useSlots(), l = t, n = inject(Ll, null), r = Pe(() => o.id, "tabpane"), s = Pe(() => o.buttonId, "tab"), i = d(() => o.active), u = d(() => o.disabled), c = d(() => o.lazyOnce ?? o.lazy), f = d(() => o.noBody), b = ref(false), m = ref(null), { onClick: h2, ...$ } = useAttrs(), B = computed(
      () => ({
        id: r.value,
        buttonId: s.value,
        disabled: u.value,
        title: o.title,
        titleComponent: a.title,
        titleItemClass: o.titleItemClass,
        titleLinkAttrs: o.titleLinkAttrs,
        titleLinkClass: o.titleLinkClass,
        onClick: h2,
        el: m.value
      })
    );
    onMounted(() => {
      n && (n.registerTab(B), i.value && n.activateTab(r.value));
    }), onUnmounted(() => {
      n && n.unregisterTab(r.value);
    });
    const v = toRef(() => (n == null ? void 0 : n.activeId.value) === r.value), S = ref(v.value), y = toRef(() => !!(n != null && n.lazy.value || c.value)), _ = toRef(() => o.lazyOnce !== void 0), C = toRef(() => v.value && !u.value), T = toRef(
      () => C.value || !y.value || y.value && _.value && b.value
    );
    watch(v, (N) => {
      if (N) {
        l("update:active", true), setTimeout(() => {
          S.value = true;
        }, 0);
        return;
      }
      S.value = false, l("update:active", false);
    }), watch(i, (N) => {
      if (n) {
        if (!N) {
          v.value && n.activateTab(void 0);
          return;
        }
        n.activateTab(r.value);
      }
    });
    const k = computed(() => [
      {
        active: v.value,
        show: S.value,
        "card-body": (n == null ? void 0 : n.card.value) && f.value === false,
        fade: !(n != null && n.noFade.value)
      },
      S.value ? n == null ? void 0 : n.activeTabClass : n == null ? void 0 : n.inactiveTabClass,
      n == null ? void 0 : n.tabClass
    ]);
    return watch(T, (N) => {
      N && !b.value && (b.value = true);
    }), (N, V) => (openBlock(), createBlock(resolveDynamicComponent(N.tag), mergeProps({
      id: unref(r),
      ref_key: "el",
      ref: m,
      class: ["tab-pane", k.value],
      role: "tabpanel",
      "aria-labelledby": unref(s)
    }, $), {
      default: withCtx(() => [
        T.value ? renderSlot(N.$slots, "default", { key: 0 }) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16, ["id", "class", "aria-labelledby"]));
  }
});
var gc = ["aria-orientation"];
var bc = ["id", "aria-controls", "aria-selected", "onClick"];
var yc = defineComponent({
  __name: "BTabs",
  props: {
    activeId: { default: void 0 },
    activeNavItemClass: { default: void 0 },
    activeTabClass: { default: void 0 },
    align: { default: void 0 },
    card: { type: [Boolean, String], default: false },
    contentClass: { default: void 0 },
    end: { type: [Boolean, String], default: false },
    fill: { type: [Boolean, String], default: false },
    id: { default: void 0 },
    inactiveNavItemClass: { default: void 0 },
    inactiveTabClass: { default: void 0 },
    justified: { type: [Boolean, String], default: false },
    lazy: { type: [Boolean, String], default: false },
    modelValue: { default: -1 },
    navClass: { default: void 0 },
    navItemClass: { default: void 0 },
    navWrapperClass: { default: void 0 },
    noFade: { type: [Boolean, String], default: false },
    noNavStyle: { type: [Boolean, String], default: false },
    pills: { type: [Boolean, String], default: false },
    small: { type: [Boolean, String], default: false },
    tag: { default: "div" },
    tabClass: { default: void 0 },
    vertical: { type: [Boolean, String], default: false }
  },
  emits: ["activate-tab", "click", "update:activeId", "update:modelValue"],
  setup(e, { emit: t }) {
    const o = e, a = t, l = _e(o, "modelValue", a, { passive: true }), n = _e(o, "activeId", a, { passive: true }), r = d(() => o.card), s = d(() => o.end), i = d(() => o.fill), u = d(() => o.justified), c = d(() => o.lazy), f = d(() => o.noFade), b = d(() => o.noNavStyle), m = d(() => o.pills), h2 = d(() => o.small), $ = d(() => o.vertical), B = pa(), v = ref([]), S = computed(
      () => v.value.map((F) => {
        const z = unref(F), D = z.id === n.value;
        return {
          ...z,
          active: D,
          navItemClasses: [
            {
              active: D,
              disabled: z.disabled
            },
            D ? o.activeNavItemClass : o.inactiveNavItemClass,
            o.navItemClass,
            z.titleLinkClass
          ]
        };
      })
    ), y = toRef(() => !(S != null && S.value && S.value.length > 0)), _ = computed(() => ({
      "d-flex": $.value,
      "align-items-start": $.value
    })), C = Jt(() => o.align), T = computed(() => ({
      "nav-pills": m.value,
      "flex-column me-3": $.value,
      [C.value]: o.align !== void 0,
      "nav-fill": i.value,
      "card-header-tabs": r.value,
      "nav-justified": u.value,
      "nav-tabs": !b.value && !m.value,
      small: h2.value
    })), k = (F) => {
      var z;
      if (F !== void 0) {
        const D = (z = S.value[F]) == null ? void 0 : z.id;
        if (F > -1 && F < S.value.length && !S.value[F].disabled && (l.value < 0 || n.value !== D || l.value !== F)) {
          const J = new vt("activate-tab", { cancelable: true });
          a("activate-tab", F, l.value, J), J.defaultPrevented || (n.value !== D && (n.value = D), l.value !== F && (l.value = F));
        }
      }
    }, N = (F, z) => {
      var D, J, ie;
      k(z), z >= 0 && !S.value[z].disabled && ((D = S.value[z]) != null && D.onClick) && typeof S.value[z].onClick == "function" && ((ie = (J = S.value[z]).onClick) == null || ie.call(J, F));
    }, V = (F) => {
      var z, D;
      S.value.length <= 0 || (l.value = A(l.value + F, F), (D = document.getElementById((z = S.value[l.value]) == null ? void 0 : z.buttonId)) == null || D.focus());
    }, A = (F, z) => {
      let D = F, J = -1, ie = -1;
      for (let te = 0; te < S.value.length; te++)
        S.value[te].disabled || (J === -1 && (J = te), ie = te);
      for (; D >= J && D <= ie && S.value[D].disabled; )
        D += z;
      return D < J && (D = J), D > ie && (D = ie), D;
    };
    watch(l, (F, z) => {
      if (F === z || S.value.length <= 0)
        return;
      const D = A(F, F > z ? 1 : -1);
      nextTick(() => {
        k(D);
      });
    }), watch(n, (F, z) => {
      const D = S.value.findIndex((J) => J.id === F);
      if (F !== z && !(S.value.length <= 0)) {
        if (D === -1) {
          k(A(0, 1));
          return;
        }
        k(D);
      }
    });
    const E = (F) => {
      v.value.find((z) => z.value.id === F.value.id) ? v.value[v.value.findIndex((z) => z.value.id === F.value.id)] = F : v.value.push(F), v.value.sort((z, D) => {
        if (!Node || !z.value.el || !D.value.el)
          return 0;
        const J = z.value.el.compareDocumentPosition(D.value.el);
        return J & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : J & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;
      });
    }, K = (F) => {
      v.value = v.value.filter((z) => z.value.id !== F);
    };
    watch(
      v,
      () => {
        oe();
      },
      { deep: true }
    );
    const oe = () => {
      var F;
      if (S.value.length === 0) {
        l.value = -1, n.value = void 0;
        return;
      }
      if (l.value >= 0 && !n.value && (n.value = (F = S.value[l.value]) == null ? void 0 : F.id), S.value.find((z) => z.id === n.value)) {
        k(S.value.findIndex((z) => z.id === n.value));
        return;
      }
      k(S.value.map((z) => !z.disabled).indexOf(true));
    };
    return provide(Ll, {
      lazy: c,
      card: r,
      noFade: f,
      activeTabClass: toRef(() => o.activeTabClass),
      inactiveTabClass: toRef(() => o.inactiveTabClass),
      tabClass: toRef(() => o.tabClass),
      registerTab: E,
      unregisterTab: K,
      activeId: n,
      activateTab: (F) => {
        const z = S.value.findIndex((D) => D.id === F);
        if (F === void 0 || z === -1) {
          k(A(0, 1));
          return;
        }
        k(z);
      }
    }), (F, z) => (openBlock(), createBlock(resolveDynamicComponent(F.tag), {
      id: F.id,
      class: normalizeClass(["tabs", _.value])
    }, {
      default: withCtx(() => [
        createVNode(unref(B).define, null, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(["tab-content", F.contentClass])
            }, [
              renderSlot(F.$slots, "default"),
              y.value ? (openBlock(), createElementBlock("div", {
                key: "bv-empty-tab",
                class: normalizeClass(["tab-pane active", { "card-body": unref(r) }])
              }, [
                renderSlot(F.$slots, "empty")
              ], 2)) : createCommentVNode("", true)
            ], 2)
          ]),
          _: 3
        }),
        unref(s) ? (openBlock(), createBlock(unref(B).reuse, { key: 0 })) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass([F.navWrapperClass, { "card-header": unref(r), "ms-auto": F.vertical && unref(s) }])
        }, [
          createBaseVNode("ul", {
            class: normalizeClass(["nav", [T.value, F.navClass]]),
            role: "tablist",
            "aria-orientation": F.vertical ? "vertical" : "horizontal"
          }, [
            renderSlot(F.$slots, "tabs-start"),
            (openBlock(true), createElementBlock(Fragment, null, renderList(S.value, (D, J) => (openBlock(), createElementBlock("li", {
              key: D.id,
              class: normalizeClass(["nav-item", D.titleItemClass]),
              role: "presentation"
            }, [
              createBaseVNode("button", mergeProps({
                id: D.buttonId,
                class: ["nav-link", D.navItemClasses],
                role: "tab",
                "aria-controls": D.id,
                "aria-selected": D.active
              }, D.titleLinkAttrs, {
                onKeydown: [
                  z[0] || (z[0] = withKeys(withModifiers((ie) => V(-1), ["stop", "prevent"]), ["left"])),
                  z[1] || (z[1] = withKeys(withModifiers((ie) => V(1), ["stop", "prevent"]), ["right"])),
                  z[2] || (z[2] = withKeys(withModifiers((ie) => V(-999), ["stop", "prevent"]), ["page-up"])),
                  z[3] || (z[3] = withKeys(withModifiers((ie) => V(999), ["stop", "prevent"]), ["page-down"]))
                ],
                onClick: withModifiers((ie) => N(ie, J), ["stop", "prevent"])
              }), [
                D.titleComponent ? (openBlock(), createBlock(resolveDynamicComponent(D.titleComponent), { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(D.title), 1)
                ], 64))
              ], 16, bc)
            ], 2))), 128)),
            renderSlot(F.$slots, "tabs-end")
          ], 10, gc)
        ], 2),
        unref(s) ? createCommentVNode("", true) : (openBlock(), createBlock(unref(B).reuse, { key: 1 }))
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var hc = { id: "__BVID__toaster-container" };
var Bc = defineComponent({
  __name: "BToastOrchestrator",
  props: {
    teleportDisabled: { type: [Boolean, String], default: false },
    teleportTo: { default: "body" },
    appendToast: { type: [Boolean, String], default: false }
  },
  setup(e, { expose: t }) {
    const o = e, a = d(() => o.teleportDisabled), l = d(() => o.appendToast), n = {
      "top-left": "top-0 start-0",
      "top-center": "top-0 start-50 translate-middle-x",
      "top-right": "top-0 end-0",
      "middle-left": "top-50 start-0 translate-middle-y",
      "middle-center": "top-50 start-50 translate-middle",
      "middle-right": "top-50 end-0 translate-middle-y",
      "bottom-left": "bottom-0 start-0",
      "bottom-center": "bottom-0 start-50 translate-middle-x",
      "bottom-right": "bottom-0 end-0"
    }, { remove: r, toasts: s, show: i, _setIsAppend: u } = rn();
    watch(
      l,
      (f) => {
        u == null || u(f);
      },
      { immediate: true }
    );
    const c = (f) => wa(f, ["_modelValue", "_self", "pos"]);
    return t({
      remove: r,
      show: i,
      toasts: s
    }), (f, b) => (openBlock(), createBlock(Teleport, {
      to: f.teleportTo,
      disabled: unref(a)
    }, [
      createBaseVNode("div", hc, [
        (openBlock(), createElementBlock(Fragment, null, renderList(n, (m, h2) => createBaseVNode("div", {
          key: h2,
          class: normalizeClass([m, "toast-container position-fixed p-3"])
        }, [
          createVNode(TransitionGroup, { name: "b-list" }, {
            default: withCtx(() => {
              var $;
              return [
                (openBlock(true), createElementBlock(Fragment, null, renderList(($ = unref(s)) == null ? void 0 : $.filter((B) => B.value.props.pos === h2), (B) => (openBlock(), createBlock(resolveDynamicComponent(B.value.component), mergeProps({
                  key: B.value.props._self
                }, c(B.value.props), {
                  modelValue: B.value.props._modelValue,
                  "onUpdate:modelValue": (v) => B.value.props._modelValue = v,
                  "trans-props": { ...B.value.props.transProps, appear: true },
                  onHide: withModifiers((v) => {
                    var S;
                    return (S = unref(r)) == null ? void 0 : S(B.value.props._self);
                  }, ["prevent"])
                }), null, 16, ["modelValue", "onUpdate:modelValue", "trans-props", "onHide"]))), 128))
              ];
            }),
            _: 2
          }, 1024)
        ], 2)), 64))
      ])
    ], 8, ["to", "disabled"]));
  }
});
var Sc = defineComponent({
  __name: "BTooltip",
  props: {
    interactive: { type: [Boolean, String], default: void 0 },
    boundary: {},
    boundaryPadding: {},
    click: { type: [Boolean, String], default: void 0 },
    container: { default: void 0 },
    content: { default: void 0 },
    customClass: { default: void 0 },
    delay: { default: void 0 },
    floatingMiddleware: { default: void 0 },
    hide: { type: [Boolean, String], default: void 0 },
    html: { type: [Boolean, String], default: void 0 },
    id: { default: void 0 },
    inline: { type: [Boolean, String], default: void 0 },
    manual: { type: [Boolean, String], default: void 0 },
    modelValue: { type: [Boolean, String], default: void 0 },
    noAutoClose: { type: [Boolean, String], default: void 0 },
    noFade: { type: [Boolean, String], default: void 0 },
    noFlip: { type: [Boolean, String], default: void 0 },
    noHide: { type: [Boolean, String], default: void 0 },
    noShift: { type: [Boolean, String], default: void 0 },
    noSize: { type: [Boolean, String] },
    noninteractive: { type: [Boolean, String], default: void 0 },
    offset: { default: void 0 },
    placement: { default: void 0 },
    persistent: { type: [Boolean, String] },
    realtime: { type: [Boolean, String], default: void 0 },
    reference: { default: void 0 },
    strategy: { default: void 0 },
    target: { default: void 0 },
    title: { default: void 0 },
    variant: { default: void 0 }
  },
  setup(e, { expose: t }) {
    var n, r, s;
    const o = e, a = computed(() => {
      const { interactive: i, noninteractive: u, ...c } = o;
      return { noninteractive: u !== void 0 ? u : !i, ...c };
    }), l = ref(null);
    return t({
      hide: (n = l.value) == null ? void 0 : n.hide,
      show: (r = l.value) == null ? void 0 : r.show,
      toggle: (s = l.value) == null ? void 0 : s.toggle
    }), (i, u) => (openBlock(), createBlock(no, mergeProps({
      ref_key: "popover",
      ref: l,
      tooltip: ""
    }, a.value), createSlots({ _: 2 }, [
      renderList(i.$slots, (c, f) => ({
        name: f,
        fn: withCtx((b) => [
          renderSlot(i.$slots, f, normalizeProps(guardReactiveProps(b)))
        ])
      }))
    ]), 1040));
  }
});
var Jo = Object.freeze(Object.defineProperty({
  __proto__: null,
  BAccordion: ui,
  BAccordionItem: ci,
  BAlert: vi,
  BAvatar: bi,
  BAvatarGroup: yi,
  BBadge: hi,
  BBreadcrumb: wi,
  BBreadcrumbItem: vn,
  BButton: Bt,
  BButtonGroup: Ci,
  BButtonToolbar: $i,
  BCard: Bn,
  BCardBody: yn,
  BCardFooter: hn,
  BCardGroup: Vi,
  BCardHeader: mn,
  BCardImg: vo,
  BCardSubtitle: bn,
  BCardText: Ai,
  BCardTitle: gn,
  BCarousel: zi,
  BCarouselSlide: Di,
  BCloseButton: jt,
  BCol: Ut,
  BCollapse: fn,
  BContainer: Wi,
  BDropdown: Sn,
  BDropdownDivider: Ki,
  BDropdownForm: Zi,
  BDropdownGroup: eu,
  BDropdownHeader: au,
  BDropdownItem: ou,
  BDropdownItemButton: su,
  BDropdownText: iu,
  BForm: wn,
  BFormCheckbox: kn,
  BFormCheckboxGroup: bu,
  BFormFile: Bu,
  BFormFloatingLabel: fu,
  BFormGroup: Vu,
  BFormInput: Ou,
  BFormInvalidFeedback: xa,
  BFormRadio: Tn,
  BFormRadioGroup: Fu,
  BFormRow: ua,
  BFormSelect: Mu,
  BFormSelectOption: po,
  BFormSelectOptionGroup: _n,
  BFormSpinbutton: Wu,
  BFormTag: Vn,
  BFormTags: sd,
  BFormText: Ma,
  BFormTextarea: id,
  BFormValidFeedback: Da,
  BImg: fo,
  BInputGroup: md,
  BInputGroupAddon: mo,
  BInputGroupAppend: gd,
  BInputGroupPrepend: bd,
  BInputGroupText: An,
  BLink: ft,
  BListGroup: yd,
  BListGroupItem: hd,
  BModal: Ra,
  BModalOrchestrator: Sd,
  BNav: wd,
  BNavForm: kd,
  BNavItem: Td,
  BNavItemDropdown: Vd,
  BNavText: Od,
  BNavbar: Ed,
  BNavbarBrand: Pd,
  BNavbarNav: Nd,
  BNavbarToggle: Dd,
  BOffcanvas: Wd,
  BOverlay: ka,
  BPagination: Ud,
  BPlaceholder: Je,
  BPlaceholderButton: En,
  BPlaceholderCard: Xd,
  BPlaceholderTable: Zd,
  BPlaceholderWrapper: Jd,
  BPopover: no,
  BProgress: dn,
  BProgressBar: un,
  BRow: tc,
  BSpinner: Ca,
  BTab: mc,
  BTable: pc,
  BTableLite: In,
  BTableSimple: go,
  BTabs: yc,
  BTbody: Pn,
  BTd: Ft,
  BTfoot: qa,
  BTh: Wa,
  BThead: Nn,
  BToast: cn,
  BToastOrchestrator: Bc,
  BTooltip: Sc,
  BTr: nt,
  BTransition: Dt
}, Symbol.toStringTag, { value: "Module" }));
var kc = Object.freeze(Object.defineProperty({
  __proto__: null,
  useBreadcrumb: Kl,
  useColorMode: jr,
  useModal: Gr,
  useModalController: ln,
  useScrollspy: sn,
  useToast: rn
}, Symbol.toStringTag, { value: "Module" }));
var $c = Object.freeze(Object.defineProperty({
  __proto__: null,
  BvCarouselEvent: nl,
  BvEvent: vt,
  BvTriggerableEvent: Vt
}, Symbol.toStringTag, { value: "Module" }));
var Tc = Object.freeze(Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: "Module" }));
var _c = ({
  components: e = false,
  directives: t = false,
  plugins: o = {}
} = {}) => ({
  install(a) {
    const l = typeof e == "boolean" ? { all: e } : e, n = Object.keys(Jo);
    No(l, n).forEach((u) => {
      const c = Jo[u];
      a.component(u, c);
    });
    const r = typeof t == "boolean" ? { all: t } : t, s = Object.keys(Xo), i = (u) => u.toLowerCase().startsWith("v") ? u.slice(1) : u;
    No(r, s).forEach((u) => {
      const c = i(u), f = Xo[u];
      a.directive(c, f);
    }), ((o == null ? void 0 : o.breadcrumb) ?? true) && a.use(ei), ((o == null ? void 0 : o.modalController) ?? true) && a.use(ni), ((o == null ? void 0 : o.modalManager) ?? true) && a.use(si), (((o == null ? void 0 : o.rtl) ?? true) || typeof o.rtl == "object") && a.use(ri, o), ((o == null ? void 0 : o.toast) ?? true) && a.use(Qr);
  }
});
export {
  ui as BAccordion,
  ci as BAccordionItem,
  vi as BAlert,
  bi as BAvatar,
  yi as BAvatarGroup,
  hi as BBadge,
  wi as BBreadcrumb,
  vn as BBreadcrumbItem,
  Bt as BButton,
  Ci as BButtonGroup,
  $i as BButtonToolbar,
  Bn as BCard,
  yn as BCardBody,
  hn as BCardFooter,
  Vi as BCardGroup,
  mn as BCardHeader,
  vo as BCardImg,
  bn as BCardSubtitle,
  Ai as BCardText,
  gn as BCardTitle,
  zi as BCarousel,
  Di as BCarouselSlide,
  jt as BCloseButton,
  Ut as BCol,
  fn as BCollapse,
  Wi as BContainer,
  Sn as BDropdown,
  Ki as BDropdownDivider,
  Zi as BDropdownForm,
  eu as BDropdownGroup,
  au as BDropdownHeader,
  ou as BDropdownItem,
  su as BDropdownItemButton,
  iu as BDropdownText,
  wn as BForm,
  kn as BFormCheckbox,
  bu as BFormCheckboxGroup,
  Bu as BFormFile,
  fu as BFormFloatingLabel,
  Vu as BFormGroup,
  Ou as BFormInput,
  xa as BFormInvalidFeedback,
  Tn as BFormRadio,
  Fu as BFormRadioGroup,
  ua as BFormRow,
  Mu as BFormSelect,
  po as BFormSelectOption,
  _n as BFormSelectOptionGroup,
  Wu as BFormSpinbutton,
  Vn as BFormTag,
  sd as BFormTags,
  Ma as BFormText,
  id as BFormTextarea,
  Da as BFormValidFeedback,
  fo as BImg,
  md as BInputGroup,
  mo as BInputGroupAddon,
  gd as BInputGroupAppend,
  bd as BInputGroupPrepend,
  An as BInputGroupText,
  ft as BLink,
  yd as BListGroup,
  hd as BListGroupItem,
  Ra as BModal,
  Sd as BModalOrchestrator,
  wd as BNav,
  kd as BNavForm,
  Td as BNavItem,
  Vd as BNavItemDropdown,
  Od as BNavText,
  Ed as BNavbar,
  Pd as BNavbarBrand,
  Nd as BNavbarNav,
  Dd as BNavbarToggle,
  Wd as BOffcanvas,
  ka as BOverlay,
  Ud as BPagination,
  Je as BPlaceholder,
  En as BPlaceholderButton,
  Xd as BPlaceholderCard,
  Zd as BPlaceholderTable,
  Jd as BPlaceholderWrapper,
  no as BPopover,
  dn as BProgress,
  un as BProgressBar,
  tc as BRow,
  Ca as BSpinner,
  mc as BTab,
  pc as BTable,
  In as BTableLite,
  go as BTableSimple,
  yc as BTabs,
  Pn as BTbody,
  Ft as BTd,
  qa as BTfoot,
  Wa as BTh,
  Nn as BThead,
  cn as BToast,
  Bc as BToastOrchestrator,
  Sc as BTooltip,
  nt as BTr,
  Dt as BTransition,
  nl as BvCarouselEvent,
  vt as BvEvent,
  Vt as BvTriggerableEvent,
  Jo as Components,
  kc as Composables,
  Xo as Directives,
  Tc as Types,
  $c as Utils,
  _c as createBootstrap,
  _c as default,
  Kl as useBreadcrumb,
  jr as useColorMode,
  Gr as useModal,
  ln as useModalController,
  sn as useScrollspy,
  rn as useToast,
  Id as vBColorMode,
  ja as vBModal,
  zd as vBPopover,
  Hd as vBScrollspy,
  ja as vBToggle,
  Rd as vBTooltip
};
//# sourceMappingURL=bootstrap-vue-next.js.map
